
FreeRTOS_BTL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003edc  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08003fec  08003fec  00013fec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004070  08004070  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08004070  08004070  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004070  08004070  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004070  08004070  00014070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004074  08004074  00014074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004078  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000049f0  20000010  08004088  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004a00  08004088  00024a00  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY
 13 .debug_info   000074e0  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ff5  00000000  00000000  0002755c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009a8  00000000  00000000  00029558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000072c  00000000  00000000  00029f00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001379f  00000000  00000000  0002a62c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009963  00000000  00000000  0003ddcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0006894b  00000000  00000000  0004772e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000267c  00000000  00000000  000b007c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  000b26f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	08003fd4 	.word	0x08003fd4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	08003fd4 	.word	0x08003fd4

08000150 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000158:	687b      	ldr	r3, [r7, #4]
 800015a:	f003 0307 	and.w	r3, r3, #7
 800015e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000160:	4b0c      	ldr	r3, [pc, #48]	; (8000194 <__NVIC_SetPriorityGrouping+0x44>)
 8000162:	68db      	ldr	r3, [r3, #12]
 8000164:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000166:	68ba      	ldr	r2, [r7, #8]
 8000168:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800016c:	4013      	ands	r3, r2
 800016e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000170:	68fb      	ldr	r3, [r7, #12]
 8000172:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000174:	68bb      	ldr	r3, [r7, #8]
 8000176:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000178:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800017c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000180:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000182:	4a04      	ldr	r2, [pc, #16]	; (8000194 <__NVIC_SetPriorityGrouping+0x44>)
 8000184:	68bb      	ldr	r3, [r7, #8]
 8000186:	60d3      	str	r3, [r2, #12]
}
 8000188:	bf00      	nop
 800018a:	3714      	adds	r7, #20
 800018c:	46bd      	mov	sp, r7
 800018e:	bc80      	pop	{r7}
 8000190:	4770      	bx	lr
 8000192:	bf00      	nop
 8000194:	e000ed00 	.word	0xe000ed00

08000198 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000198:	b480      	push	{r7}
 800019a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__NVIC_GetPriorityGrouping+0x18>)
 800019e:	68db      	ldr	r3, [r3, #12]
 80001a0:	0a1b      	lsrs	r3, r3, #8
 80001a2:	f003 0307 	and.w	r3, r3, #7
}
 80001a6:	4618      	mov	r0, r3
 80001a8:	46bd      	mov	sp, r7
 80001aa:	bc80      	pop	{r7}
 80001ac:	4770      	bx	lr
 80001ae:	bf00      	nop
 80001b0:	e000ed00 	.word	0xe000ed00

080001b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001b4:	b480      	push	{r7}
 80001b6:	b083      	sub	sp, #12
 80001b8:	af00      	add	r7, sp, #0
 80001ba:	4603      	mov	r3, r0
 80001bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001c2:	2b00      	cmp	r3, #0
 80001c4:	db0b      	blt.n	80001de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001c6:	79fb      	ldrb	r3, [r7, #7]
 80001c8:	f003 021f 	and.w	r2, r3, #31
 80001cc:	4906      	ldr	r1, [pc, #24]	; (80001e8 <__NVIC_EnableIRQ+0x34>)
 80001ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001d2:	095b      	lsrs	r3, r3, #5
 80001d4:	2001      	movs	r0, #1
 80001d6:	fa00 f202 	lsl.w	r2, r0, r2
 80001da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80001de:	bf00      	nop
 80001e0:	370c      	adds	r7, #12
 80001e2:	46bd      	mov	sp, r7
 80001e4:	bc80      	pop	{r7}
 80001e6:	4770      	bx	lr
 80001e8:	e000e100 	.word	0xe000e100

080001ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80001ec:	b480      	push	{r7}
 80001ee:	b083      	sub	sp, #12
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	4603      	mov	r3, r0
 80001f4:	6039      	str	r1, [r7, #0]
 80001f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001fc:	2b00      	cmp	r3, #0
 80001fe:	db0a      	blt.n	8000216 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000200:	683b      	ldr	r3, [r7, #0]
 8000202:	b2da      	uxtb	r2, r3
 8000204:	490c      	ldr	r1, [pc, #48]	; (8000238 <__NVIC_SetPriority+0x4c>)
 8000206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800020a:	0112      	lsls	r2, r2, #4
 800020c:	b2d2      	uxtb	r2, r2
 800020e:	440b      	add	r3, r1
 8000210:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000214:	e00a      	b.n	800022c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000216:	683b      	ldr	r3, [r7, #0]
 8000218:	b2da      	uxtb	r2, r3
 800021a:	4908      	ldr	r1, [pc, #32]	; (800023c <__NVIC_SetPriority+0x50>)
 800021c:	79fb      	ldrb	r3, [r7, #7]
 800021e:	f003 030f 	and.w	r3, r3, #15
 8000222:	3b04      	subs	r3, #4
 8000224:	0112      	lsls	r2, r2, #4
 8000226:	b2d2      	uxtb	r2, r2
 8000228:	440b      	add	r3, r1
 800022a:	761a      	strb	r2, [r3, #24]
}
 800022c:	bf00      	nop
 800022e:	370c      	adds	r7, #12
 8000230:	46bd      	mov	sp, r7
 8000232:	bc80      	pop	{r7}
 8000234:	4770      	bx	lr
 8000236:	bf00      	nop
 8000238:	e000e100 	.word	0xe000e100
 800023c:	e000ed00 	.word	0xe000ed00

08000240 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000240:	b480      	push	{r7}
 8000242:	b089      	sub	sp, #36	; 0x24
 8000244:	af00      	add	r7, sp, #0
 8000246:	60f8      	str	r0, [r7, #12]
 8000248:	60b9      	str	r1, [r7, #8]
 800024a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800024c:	68fb      	ldr	r3, [r7, #12]
 800024e:	f003 0307 	and.w	r3, r3, #7
 8000252:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000254:	69fb      	ldr	r3, [r7, #28]
 8000256:	f1c3 0307 	rsb	r3, r3, #7
 800025a:	2b04      	cmp	r3, #4
 800025c:	bf28      	it	cs
 800025e:	2304      	movcs	r3, #4
 8000260:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000262:	69fb      	ldr	r3, [r7, #28]
 8000264:	3304      	adds	r3, #4
 8000266:	2b06      	cmp	r3, #6
 8000268:	d902      	bls.n	8000270 <NVIC_EncodePriority+0x30>
 800026a:	69fb      	ldr	r3, [r7, #28]
 800026c:	3b03      	subs	r3, #3
 800026e:	e000      	b.n	8000272 <NVIC_EncodePriority+0x32>
 8000270:	2300      	movs	r3, #0
 8000272:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000274:	f04f 32ff 	mov.w	r2, #4294967295
 8000278:	69bb      	ldr	r3, [r7, #24]
 800027a:	fa02 f303 	lsl.w	r3, r2, r3
 800027e:	43da      	mvns	r2, r3
 8000280:	68bb      	ldr	r3, [r7, #8]
 8000282:	401a      	ands	r2, r3
 8000284:	697b      	ldr	r3, [r7, #20]
 8000286:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000288:	f04f 31ff 	mov.w	r1, #4294967295
 800028c:	697b      	ldr	r3, [r7, #20]
 800028e:	fa01 f303 	lsl.w	r3, r1, r3
 8000292:	43d9      	mvns	r1, r3
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000298:	4313      	orrs	r3, r2
         );
}
 800029a:	4618      	mov	r0, r3
 800029c:	3724      	adds	r7, #36	; 0x24
 800029e:	46bd      	mov	sp, r7
 80002a0:	bc80      	pop	{r7}
 80002a2:	4770      	bx	lr

080002a4 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80002a4:	b480      	push	{r7}
 80002a6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <LL_RCC_HSI_Enable+0x18>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	4a03      	ldr	r2, [pc, #12]	; (80002bc <LL_RCC_HSI_Enable+0x18>)
 80002ae:	f043 0301 	orr.w	r3, r3, #1
 80002b2:	6013      	str	r3, [r2, #0]
}
 80002b4:	bf00      	nop
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bc80      	pop	{r7}
 80002ba:	4770      	bx	lr
 80002bc:	40021000 	.word	0x40021000

080002c0 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80002c0:	b480      	push	{r7}
 80002c2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80002c4:	4b06      	ldr	r3, [pc, #24]	; (80002e0 <LL_RCC_HSI_IsReady+0x20>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	f003 0302 	and.w	r3, r3, #2
 80002cc:	2b02      	cmp	r3, #2
 80002ce:	bf0c      	ite	eq
 80002d0:	2301      	moveq	r3, #1
 80002d2:	2300      	movne	r3, #0
 80002d4:	b2db      	uxtb	r3, r3
}
 80002d6:	4618      	mov	r0, r3
 80002d8:	46bd      	mov	sp, r7
 80002da:	bc80      	pop	{r7}
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop
 80002e0:	40021000 	.word	0x40021000

080002e4 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80002e4:	b480      	push	{r7}
 80002e6:	b083      	sub	sp, #12
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 80002ec:	4b06      	ldr	r3, [pc, #24]	; (8000308 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	00db      	lsls	r3, r3, #3
 80002f8:	4903      	ldr	r1, [pc, #12]	; (8000308 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 80002fa:	4313      	orrs	r3, r2
 80002fc:	600b      	str	r3, [r1, #0]
}
 80002fe:	bf00      	nop
 8000300:	370c      	adds	r7, #12
 8000302:	46bd      	mov	sp, r7
 8000304:	bc80      	pop	{r7}
 8000306:	4770      	bx	lr
 8000308:	40021000 	.word	0x40021000

0800030c <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800030c:	b480      	push	{r7}
 800030e:	b083      	sub	sp, #12
 8000310:	af00      	add	r7, sp, #0
 8000312:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000314:	4b06      	ldr	r3, [pc, #24]	; (8000330 <LL_RCC_SetSysClkSource+0x24>)
 8000316:	685b      	ldr	r3, [r3, #4]
 8000318:	f023 0203 	bic.w	r2, r3, #3
 800031c:	4904      	ldr	r1, [pc, #16]	; (8000330 <LL_RCC_SetSysClkSource+0x24>)
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	4313      	orrs	r3, r2
 8000322:	604b      	str	r3, [r1, #4]
}
 8000324:	bf00      	nop
 8000326:	370c      	adds	r7, #12
 8000328:	46bd      	mov	sp, r7
 800032a:	bc80      	pop	{r7}
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop
 8000330:	40021000 	.word	0x40021000

08000334 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000334:	b480      	push	{r7}
 8000336:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000338:	4b03      	ldr	r3, [pc, #12]	; (8000348 <LL_RCC_GetSysClkSource+0x14>)
 800033a:	685b      	ldr	r3, [r3, #4]
 800033c:	f003 030c 	and.w	r3, r3, #12
}
 8000340:	4618      	mov	r0, r3
 8000342:	46bd      	mov	sp, r7
 8000344:	bc80      	pop	{r7}
 8000346:	4770      	bx	lr
 8000348:	40021000 	.word	0x40021000

0800034c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800034c:	b480      	push	{r7}
 800034e:	b083      	sub	sp, #12
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000354:	4b06      	ldr	r3, [pc, #24]	; (8000370 <LL_RCC_SetAHBPrescaler+0x24>)
 8000356:	685b      	ldr	r3, [r3, #4]
 8000358:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800035c:	4904      	ldr	r1, [pc, #16]	; (8000370 <LL_RCC_SetAHBPrescaler+0x24>)
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	4313      	orrs	r3, r2
 8000362:	604b      	str	r3, [r1, #4]
}
 8000364:	bf00      	nop
 8000366:	370c      	adds	r7, #12
 8000368:	46bd      	mov	sp, r7
 800036a:	bc80      	pop	{r7}
 800036c:	4770      	bx	lr
 800036e:	bf00      	nop
 8000370:	40021000 	.word	0x40021000

08000374 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000374:	b480      	push	{r7}
 8000376:	b083      	sub	sp, #12
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800037c:	4b06      	ldr	r3, [pc, #24]	; (8000398 <LL_RCC_SetAPB1Prescaler+0x24>)
 800037e:	685b      	ldr	r3, [r3, #4]
 8000380:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000384:	4904      	ldr	r1, [pc, #16]	; (8000398 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	4313      	orrs	r3, r2
 800038a:	604b      	str	r3, [r1, #4]
}
 800038c:	bf00      	nop
 800038e:	370c      	adds	r7, #12
 8000390:	46bd      	mov	sp, r7
 8000392:	bc80      	pop	{r7}
 8000394:	4770      	bx	lr
 8000396:	bf00      	nop
 8000398:	40021000 	.word	0x40021000

0800039c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800039c:	b480      	push	{r7}
 800039e:	b083      	sub	sp, #12
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80003a4:	4b06      	ldr	r3, [pc, #24]	; (80003c0 <LL_RCC_SetAPB2Prescaler+0x24>)
 80003a6:	685b      	ldr	r3, [r3, #4]
 80003a8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80003ac:	4904      	ldr	r1, [pc, #16]	; (80003c0 <LL_RCC_SetAPB2Prescaler+0x24>)
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	4313      	orrs	r3, r2
 80003b2:	604b      	str	r3, [r1, #4]
}
 80003b4:	bf00      	nop
 80003b6:	370c      	adds	r7, #12
 80003b8:	46bd      	mov	sp, r7
 80003ba:	bc80      	pop	{r7}
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop
 80003c0:	40021000 	.word	0x40021000

080003c4 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80003c4:	b480      	push	{r7}
 80003c6:	b085      	sub	sp, #20
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80003cc:	4b08      	ldr	r3, [pc, #32]	; (80003f0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80003ce:	69da      	ldr	r2, [r3, #28]
 80003d0:	4907      	ldr	r1, [pc, #28]	; (80003f0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	4313      	orrs	r3, r2
 80003d6:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80003d8:	4b05      	ldr	r3, [pc, #20]	; (80003f0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80003da:	69da      	ldr	r2, [r3, #28]
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	4013      	ands	r3, r2
 80003e0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80003e2:	68fb      	ldr	r3, [r7, #12]
}
 80003e4:	bf00      	nop
 80003e6:	3714      	adds	r7, #20
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bc80      	pop	{r7}
 80003ec:	4770      	bx	lr
 80003ee:	bf00      	nop
 80003f0:	40021000 	.word	0x40021000

080003f4 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80003f4:	b480      	push	{r7}
 80003f6:	b085      	sub	sp, #20
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80003fc:	4b08      	ldr	r3, [pc, #32]	; (8000420 <LL_APB2_GRP1_EnableClock+0x2c>)
 80003fe:	699a      	ldr	r2, [r3, #24]
 8000400:	4907      	ldr	r1, [pc, #28]	; (8000420 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	4313      	orrs	r3, r2
 8000406:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000408:	4b05      	ldr	r3, [pc, #20]	; (8000420 <LL_APB2_GRP1_EnableClock+0x2c>)
 800040a:	699a      	ldr	r2, [r3, #24]
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	4013      	ands	r3, r2
 8000410:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000412:	68fb      	ldr	r3, [r7, #12]
}
 8000414:	bf00      	nop
 8000416:	3714      	adds	r7, #20
 8000418:	46bd      	mov	sp, r7
 800041a:	bc80      	pop	{r7}
 800041c:	4770      	bx	lr
 800041e:	bf00      	nop
 8000420:	40021000 	.word	0x40021000

08000424 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000424:	b480      	push	{r7}
 8000426:	b083      	sub	sp, #12
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800042c:	4b06      	ldr	r3, [pc, #24]	; (8000448 <LL_FLASH_SetLatency+0x24>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	f023 0207 	bic.w	r2, r3, #7
 8000434:	4904      	ldr	r1, [pc, #16]	; (8000448 <LL_FLASH_SetLatency+0x24>)
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	4313      	orrs	r3, r2
 800043a:	600b      	str	r3, [r1, #0]
}
 800043c:	bf00      	nop
 800043e:	370c      	adds	r7, #12
 8000440:	46bd      	mov	sp, r7
 8000442:	bc80      	pop	{r7}
 8000444:	4770      	bx	lr
 8000446:	bf00      	nop
 8000448:	40022000 	.word	0x40022000

0800044c <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 800044c:	b480      	push	{r7}
 800044e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000450:	4b03      	ldr	r3, [pc, #12]	; (8000460 <LL_FLASH_GetLatency+0x14>)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	f003 0307 	and.w	r3, r3, #7
}
 8000458:	4618      	mov	r0, r3
 800045a:	46bd      	mov	sp, r7
 800045c:	bc80      	pop	{r7}
 800045e:	4770      	bx	lr
 8000460:	40022000 	.word	0x40022000

08000464 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8000464:	b480      	push	{r7}
 8000466:	b083      	sub	sp, #12
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	68db      	ldr	r3, [r3, #12]
 8000470:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	60da      	str	r2, [r3, #12]
}
 8000478:	bf00      	nop
 800047a:	370c      	adds	r7, #12
 800047c:	46bd      	mov	sp, r7
 800047e:	bc80      	pop	{r7}
 8000480:	4770      	bx	lr

08000482 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8000482:	b480      	push	{r7}
 8000484:	b083      	sub	sp, #12
 8000486:	af00      	add	r7, sp, #0
 8000488:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	691b      	ldr	r3, [r3, #16]
 800048e:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	695b      	ldr	r3, [r3, #20]
 800049a:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	615a      	str	r2, [r3, #20]
}
 80004a2:	bf00      	nop
 80004a4:	370c      	adds	r7, #12
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bc80      	pop	{r7}
 80004aa:	4770      	bx	lr

080004ac <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_OUTPUT
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80004ac:	b490      	push	{r4, r7}
 80004ae:	b088      	sub	sp, #32
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	60f8      	str	r0, [r7, #12]
 80004b4:	60b9      	str	r1, [r7, #8]
 80004b6:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 80004b8:	68fb      	ldr	r3, [r7, #12]
 80004ba:	461a      	mov	r2, r3
 80004bc:	68bb      	ldr	r3, [r7, #8]
 80004be:	0e1b      	lsrs	r3, r3, #24
 80004c0:	4413      	add	r3, r2
 80004c2:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 80004c4:	6822      	ldr	r2, [r4, #0]
 80004c6:	68bb      	ldr	r3, [r7, #8]
 80004c8:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80004ca:	697b      	ldr	r3, [r7, #20]
 80004cc:	fa93 f3a3 	rbit	r3, r3
 80004d0:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80004d2:	693b      	ldr	r3, [r7, #16]
 80004d4:	fab3 f383 	clz	r3, r3
 80004d8:	b2db      	uxtb	r3, r3
 80004da:	009b      	lsls	r3, r3, #2
 80004dc:	210f      	movs	r1, #15
 80004de:	fa01 f303 	lsl.w	r3, r1, r3
 80004e2:	43db      	mvns	r3, r3
 80004e4:	401a      	ands	r2, r3
 80004e6:	68bb      	ldr	r3, [r7, #8]
 80004e8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80004ea:	69fb      	ldr	r3, [r7, #28]
 80004ec:	fa93 f3a3 	rbit	r3, r3
 80004f0:	61bb      	str	r3, [r7, #24]
  return result;
 80004f2:	69bb      	ldr	r3, [r7, #24]
 80004f4:	fab3 f383 	clz	r3, r3
 80004f8:	b2db      	uxtb	r3, r3
 80004fa:	009b      	lsls	r3, r3, #2
 80004fc:	6879      	ldr	r1, [r7, #4]
 80004fe:	fa01 f303 	lsl.w	r3, r1, r3
 8000502:	4313      	orrs	r3, r2
 8000504:	6023      	str	r3, [r4, #0]
}
 8000506:	bf00      	nop
 8000508:	3720      	adds	r7, #32
 800050a:	46bd      	mov	sp, r7
 800050c:	bc90      	pop	{r4, r7}
 800050e:	4770      	bx	lr

08000510 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_DOWN
  *         @arg @ref LL_GPIO_PULL_UP
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8000510:	b480      	push	{r7}
 8000512:	b087      	sub	sp, #28
 8000514:	af00      	add	r7, sp, #0
 8000516:	60f8      	str	r0, [r7, #12]
 8000518:	60b9      	str	r1, [r7, #8]
 800051a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	68da      	ldr	r2, [r3, #12]
 8000520:	68bb      	ldr	r3, [r7, #8]
 8000522:	0a1b      	lsrs	r3, r3, #8
 8000524:	43db      	mvns	r3, r3
 8000526:	401a      	ands	r2, r3
 8000528:	68bb      	ldr	r3, [r7, #8]
 800052a:	0a1b      	lsrs	r3, r3, #8
 800052c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800052e:	697b      	ldr	r3, [r7, #20]
 8000530:	fa93 f3a3 	rbit	r3, r3
 8000534:	613b      	str	r3, [r7, #16]
  return result;
 8000536:	693b      	ldr	r3, [r7, #16]
 8000538:	fab3 f383 	clz	r3, r3
 800053c:	b2db      	uxtb	r3, r3
 800053e:	4619      	mov	r1, r3
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	408b      	lsls	r3, r1
 8000544:	431a      	orrs	r2, r3
 8000546:	68fb      	ldr	r3, [r7, #12]
 8000548:	60da      	str	r2, [r3, #12]
}
 800054a:	bf00      	nop
 800054c:	371c      	adds	r7, #28
 800054e:	46bd      	mov	sp, r7
 8000550:	bc80      	pop	{r7}
 8000552:	4770      	bx	lr

08000554 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000554:	b480      	push	{r7}
 8000556:	b083      	sub	sp, #12
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
 800055c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 800055e:	683b      	ldr	r3, [r7, #0]
 8000560:	0a1b      	lsrs	r3, r3, #8
 8000562:	b29a      	uxth	r2, r3
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	611a      	str	r2, [r3, #16]
}
 8000568:	bf00      	nop
 800056a:	370c      	adds	r7, #12
 800056c:	46bd      	mov	sp, r7
 800056e:	bc80      	pop	{r7}
 8000570:	4770      	bx	lr

08000572 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000572:	b480      	push	{r7}
 8000574:	b083      	sub	sp, #12
 8000576:	af00      	add	r7, sp, #0
 8000578:	6078      	str	r0, [r7, #4]
 800057a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 800057c:	683b      	ldr	r3, [r7, #0]
 800057e:	0a1b      	lsrs	r3, r3, #8
 8000580:	b29a      	uxth	r2, r3
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	615a      	str	r2, [r3, #20]
}
 8000586:	bf00      	nop
 8000588:	370c      	adds	r7, #12
 800058a:	46bd      	mov	sp, r7
 800058c:	bc80      	pop	{r7}
 800058e:	4770      	bx	lr

08000590 <LL_GPIO_AF_Remap_SWJ_NOJTAG>:
  * @rmtoll MAPR          SWJ_CFG           LL_GPIO_AF_Remap_SWJ_NOJTAG
  * @note  NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_Remap_SWJ_NOJTAG(void)
{
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0
  MODIFY_REG(AFIO->MAPR, AFIO_MAPR_SWJ_CFG, AFIO_MAPR_SWJ_CFG_JTAGDISABLE);
 8000594:	4b05      	ldr	r3, [pc, #20]	; (80005ac <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x1c>)
 8000596:	685b      	ldr	r3, [r3, #4]
 8000598:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800059c:	4a03      	ldr	r2, [pc, #12]	; (80005ac <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x1c>)
 800059e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005a2:	6053      	str	r3, [r2, #4]
}
 80005a4:	bf00      	nop
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bc80      	pop	{r7}
 80005aa:	4770      	bx	lr
 80005ac:	40010000 	.word	0x40010000

080005b0 <LL_GPIO_AF_SetEXTISource>:
  *         @arg @ref LL_GPIO_AF_EXTI_LINE14
  *         @arg @ref LL_GPIO_AF_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_SetEXTISource(uint32_t Port, uint32_t Line)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b085      	sub	sp, #20
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
 80005b8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(AFIO->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 80005ba:	4a13      	ldr	r2, [pc, #76]	; (8000608 <LL_GPIO_AF_SetEXTISource+0x58>)
 80005bc:	683b      	ldr	r3, [r7, #0]
 80005be:	b2db      	uxtb	r3, r3
 80005c0:	3302      	adds	r3, #2
 80005c2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80005c6:	683b      	ldr	r3, [r7, #0]
 80005c8:	0c1b      	lsrs	r3, r3, #16
 80005ca:	43db      	mvns	r3, r3
 80005cc:	ea02 0103 	and.w	r1, r2, r3
 80005d0:	683b      	ldr	r3, [r7, #0]
 80005d2:	0c1b      	lsrs	r3, r3, #16
 80005d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	fa93 f3a3 	rbit	r3, r3
 80005dc:	60bb      	str	r3, [r7, #8]
  return result;
 80005de:	68bb      	ldr	r3, [r7, #8]
 80005e0:	fab3 f383 	clz	r3, r3
 80005e4:	b2db      	uxtb	r3, r3
 80005e6:	461a      	mov	r2, r3
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	fa03 f202 	lsl.w	r2, r3, r2
 80005ee:	4806      	ldr	r0, [pc, #24]	; (8000608 <LL_GPIO_AF_SetEXTISource+0x58>)
 80005f0:	683b      	ldr	r3, [r7, #0]
 80005f2:	b2db      	uxtb	r3, r3
 80005f4:	430a      	orrs	r2, r1
 80005f6:	3302      	adds	r3, #2
 80005f8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 80005fc:	bf00      	nop
 80005fe:	3714      	adds	r7, #20
 8000600:	46bd      	mov	sp, r7
 8000602:	bc80      	pop	{r7}
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	40010000 	.word	0x40010000

0800060c <shiftOut>:
volatile uint32_t sysTickCounter = 0;
volatile uint32_t debouncing = 0;

int time;
int t1,t2;
extern void shiftOut(int data) {
 800060c:	b580      	push	{r7, lr}
 800060e:	b084      	sub	sp, #16
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 8; i++) {
 8000614:	2300      	movs	r3, #0
 8000616:	60fb      	str	r3, [r7, #12]
 8000618:	e01f      	b.n	800065a <shiftOut+0x4e>
//		LL_GPIO_WriteOutputPort(GPIOA,GPIO_PIN_6, data << (i & 0x80));
		if ((data << i) & 0x80) {
 800061a:	687a      	ldr	r2, [r7, #4]
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	fa02 f303 	lsl.w	r3, r2, r3
 8000622:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000626:	2b00      	cmp	r3, #0
 8000628:	d005      	beq.n	8000636 <shiftOut+0x2a>
		    LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_6); // Nếu bit là 1, set GPIO_PIN_6 lên mức cao
 800062a:	f244 0140 	movw	r1, #16448	; 0x4040
 800062e:	480f      	ldr	r0, [pc, #60]	; (800066c <shiftOut+0x60>)
 8000630:	f7ff ff90 	bl	8000554 <LL_GPIO_SetOutputPin>
 8000634:	e004      	b.n	8000640 <shiftOut+0x34>
		} else {
		    LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_6); // Nếu bit là 0, reset GPIO_PIN_6 xuống mức thấp
 8000636:	f244 0140 	movw	r1, #16448	; 0x4040
 800063a:	480c      	ldr	r0, [pc, #48]	; (800066c <shiftOut+0x60>)
 800063c:	f7ff ff99 	bl	8000572 <LL_GPIO_ResetOutputPin>
		}

		LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_7); // Set pin high
 8000640:	f248 0180 	movw	r1, #32896	; 0x8080
 8000644:	4809      	ldr	r0, [pc, #36]	; (800066c <shiftOut+0x60>)
 8000646:	f7ff ff85 	bl	8000554 <LL_GPIO_SetOutputPin>
		LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_7); // Set pin low
 800064a:	f248 0180 	movw	r1, #32896	; 0x8080
 800064e:	4807      	ldr	r0, [pc, #28]	; (800066c <shiftOut+0x60>)
 8000650:	f7ff ff8f 	bl	8000572 <LL_GPIO_ResetOutputPin>
	for (int i = 0; i < 8; i++) {
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	3301      	adds	r3, #1
 8000658:	60fb      	str	r3, [r7, #12]
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	2b07      	cmp	r3, #7
 800065e:	dddc      	ble.n	800061a <shiftOut+0xe>
	}
}
 8000660:	bf00      	nop
 8000662:	bf00      	nop
 8000664:	3710      	adds	r7, #16
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	40010800 	.word	0x40010800

08000670 <hienthi>:

extern void hienthi(int so1, int so2) {
 8000670:	b5b0      	push	{r4, r5, r7, lr}
 8000672:	b088      	sub	sp, #32
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
 8000678:	6039      	str	r1, [r7, #0]
	unsigned char ma7doan[] = {
 800067a:	4b2c      	ldr	r3, [pc, #176]	; (800072c <hienthi+0xbc>)
 800067c:	f107 040c 	add.w	r4, r7, #12
 8000680:	461d      	mov	r5, r3
 8000682:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000684:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000686:	682b      	ldr	r3, [r5, #0]
 8000688:	7023      	strb	r3, [r4, #0]
			// 0 1 2 3 4 5 6 7 8 9 A b C d E F-
			0xC0,0xF9,0xA4,0xB0,0x99,0x92,0x82,0xF8,0x80,0x90,0x8C,0xBF,0xC6,0xA1,0x86,0xFF,0xbf
	};

	shiftOut(ma7doan[so2 % 10]);
 800068a:	6839      	ldr	r1, [r7, #0]
 800068c:	4b28      	ldr	r3, [pc, #160]	; (8000730 <hienthi+0xc0>)
 800068e:	fb83 2301 	smull	r2, r3, r3, r1
 8000692:	109a      	asrs	r2, r3, #2
 8000694:	17cb      	asrs	r3, r1, #31
 8000696:	1ad2      	subs	r2, r2, r3
 8000698:	4613      	mov	r3, r2
 800069a:	009b      	lsls	r3, r3, #2
 800069c:	4413      	add	r3, r2
 800069e:	005b      	lsls	r3, r3, #1
 80006a0:	1aca      	subs	r2, r1, r3
 80006a2:	f102 0320 	add.w	r3, r2, #32
 80006a6:	443b      	add	r3, r7
 80006a8:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80006ac:	4618      	mov	r0, r3
 80006ae:	f7ff ffad 	bl	800060c <shiftOut>
	shiftOut(ma7doan[so2 / 10]);
 80006b2:	683b      	ldr	r3, [r7, #0]
 80006b4:	4a1e      	ldr	r2, [pc, #120]	; (8000730 <hienthi+0xc0>)
 80006b6:	fb82 1203 	smull	r1, r2, r2, r3
 80006ba:	1092      	asrs	r2, r2, #2
 80006bc:	17db      	asrs	r3, r3, #31
 80006be:	1ad3      	subs	r3, r2, r3
 80006c0:	3320      	adds	r3, #32
 80006c2:	443b      	add	r3, r7
 80006c4:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80006c8:	4618      	mov	r0, r3
 80006ca:	f7ff ff9f 	bl	800060c <shiftOut>
	shiftOut(ma7doan[so1 % 10]);
 80006ce:	6879      	ldr	r1, [r7, #4]
 80006d0:	4b17      	ldr	r3, [pc, #92]	; (8000730 <hienthi+0xc0>)
 80006d2:	fb83 2301 	smull	r2, r3, r3, r1
 80006d6:	109a      	asrs	r2, r3, #2
 80006d8:	17cb      	asrs	r3, r1, #31
 80006da:	1ad2      	subs	r2, r2, r3
 80006dc:	4613      	mov	r3, r2
 80006de:	009b      	lsls	r3, r3, #2
 80006e0:	4413      	add	r3, r2
 80006e2:	005b      	lsls	r3, r3, #1
 80006e4:	1aca      	subs	r2, r1, r3
 80006e6:	f102 0320 	add.w	r3, r2, #32
 80006ea:	443b      	add	r3, r7
 80006ec:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80006f0:	4618      	mov	r0, r3
 80006f2:	f7ff ff8b 	bl	800060c <shiftOut>
	shiftOut(ma7doan[so1 / 10]);
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	4a0d      	ldr	r2, [pc, #52]	; (8000730 <hienthi+0xc0>)
 80006fa:	fb82 1203 	smull	r1, r2, r2, r3
 80006fe:	1092      	asrs	r2, r2, #2
 8000700:	17db      	asrs	r3, r3, #31
 8000702:	1ad3      	subs	r3, r2, r3
 8000704:	3320      	adds	r3, #32
 8000706:	443b      	add	r3, r7
 8000708:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 800070c:	4618      	mov	r0, r3
 800070e:	f7ff ff7d 	bl	800060c <shiftOut>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_8); // Set pin high
 8000712:	4908      	ldr	r1, [pc, #32]	; (8000734 <hienthi+0xc4>)
 8000714:	4808      	ldr	r0, [pc, #32]	; (8000738 <hienthi+0xc8>)
 8000716:	f7ff ff1d 	bl	8000554 <LL_GPIO_SetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_8); // Set pin low
 800071a:	4906      	ldr	r1, [pc, #24]	; (8000734 <hienthi+0xc4>)
 800071c:	4806      	ldr	r0, [pc, #24]	; (8000738 <hienthi+0xc8>)
 800071e:	f7ff ff28 	bl	8000572 <LL_GPIO_ResetOutputPin>
}
 8000722:	bf00      	nop
 8000724:	3720      	adds	r7, #32
 8000726:	46bd      	mov	sp, r7
 8000728:	bdb0      	pop	{r4, r5, r7, pc}
 800072a:	bf00      	nop
 800072c:	08003fec 	.word	0x08003fec
 8000730:	66666667 	.word	0x66666667
 8000734:	04010001 	.word	0x04010001
 8000738:	40010800 	.word	0x40010800

0800073c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_AFIO);
 8000742:	2001      	movs	r0, #1
 8000744:	f7ff fe56 	bl	80003f4 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000748:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800074c:	f7ff fe3a 	bl	80003c4 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000750:	2003      	movs	r0, #3
 8000752:	f7ff fcfd 	bl	8000150 <__NVIC_SetPriorityGrouping>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 8000756:	f7ff fd1f 	bl	8000198 <__NVIC_GetPriorityGrouping>
 800075a:	4603      	mov	r3, r0
 800075c:	2200      	movs	r2, #0
 800075e:	210f      	movs	r1, #15
 8000760:	4618      	mov	r0, r3
 8000762:	f7ff fd6d 	bl	8000240 <NVIC_EncodePriority>
 8000766:	4603      	mov	r3, r0
 8000768:	4619      	mov	r1, r3
 800076a:	f04f 30ff 	mov.w	r0, #4294967295
 800076e:	f7ff fd3d 	bl	80001ec <__NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  LL_GPIO_AF_Remap_SWJ_NOJTAG();
 8000772:	f7ff ff0d 	bl	8000590 <LL_GPIO_AF_Remap_SWJ_NOJTAG>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000776:	f000 f83d 	bl	80007f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800077a:	f000 f8d5 	bl	8000928 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800077e:	f000 f86b 	bl	8000858 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  UARTStdioConfig(USART2,true);
 8000782:	2101      	movs	r1, #1
 8000784:	4813      	ldr	r0, [pc, #76]	; (80007d4 <main+0x98>)
 8000786:	f003 f849 	bl	800381c <UARTStdioConfig>
  button_event_queue =  xQueueCreate(5, sizeof(button_event_t));
 800078a:	2200      	movs	r2, #0
 800078c:	2102      	movs	r1, #2
 800078e:	2005      	movs	r0, #5
 8000790:	f001 f9fa 	bl	8001b88 <xQueueGenericCreate>
 8000794:	4603      	mov	r3, r0
 8000796:	4a10      	ldr	r2, [pc, #64]	; (80007d8 <main+0x9c>)
 8000798:	6013      	str	r3, [r2, #0]
  mutex_isr = xSemaphoreCreateMutex();
 800079a:	2001      	movs	r0, #1
 800079c:	f001 fa6c 	bl	8001c78 <xQueueCreateMutex>
 80007a0:	4603      	mov	r3, r0
 80007a2:	4a0e      	ldr	r2, [pc, #56]	; (80007dc <main+0xa0>)
 80007a4:	6013      	str	r3, [r2, #0]

  xTaskCreate(LED_Task, "LED_Task",configMINIMAL_STACK_SIZE, NULL, 1, &status_task_Handle);
 80007a6:	4b0e      	ldr	r3, [pc, #56]	; (80007e0 <main+0xa4>)
 80007a8:	9301      	str	r3, [sp, #4]
 80007aa:	2301      	movs	r3, #1
 80007ac:	9300      	str	r3, [sp, #0]
 80007ae:	2300      	movs	r3, #0
 80007b0:	2280      	movs	r2, #128	; 0x80
 80007b2:	490c      	ldr	r1, [pc, #48]	; (80007e4 <main+0xa8>)
 80007b4:	480c      	ldr	r0, [pc, #48]	; (80007e8 <main+0xac>)
 80007b6:	f001 fdf6 	bl	80023a6 <xTaskCreate>
  xTaskCreate(UART_Task, "UART_Task",configMINIMAL_STACK_SIZE, NULL, 1, NULL);
 80007ba:	2300      	movs	r3, #0
 80007bc:	9301      	str	r3, [sp, #4]
 80007be:	2301      	movs	r3, #1
 80007c0:	9300      	str	r3, [sp, #0]
 80007c2:	2300      	movs	r3, #0
 80007c4:	2280      	movs	r2, #128	; 0x80
 80007c6:	4909      	ldr	r1, [pc, #36]	; (80007ec <main+0xb0>)
 80007c8:	4809      	ldr	r0, [pc, #36]	; (80007f0 <main+0xb4>)
 80007ca:	f001 fdec 	bl	80023a6 <xTaskCreate>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  vTaskStartScheduler();
 80007ce:	f001 ff4f 	bl	8002670 <vTaskStartScheduler>
  while (1)
 80007d2:	e7fe      	b.n	80007d2 <main+0x96>
 80007d4:	40004400 	.word	0x40004400
 80007d8:	20000030 	.word	0x20000030
 80007dc:	20000034 	.word	0x20000034
 80007e0:	2000002c 	.word	0x2000002c
 80007e4:	08004000 	.word	0x08004000
 80007e8:	08000aed 	.word	0x08000aed
 80007ec:	0800400c 	.word	0x0800400c
 80007f0:	08000c2d 	.word	0x08000c2d

080007f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 80007f8:	2000      	movs	r0, #0
 80007fa:	f7ff fe13 	bl	8000424 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 80007fe:	bf00      	nop
 8000800:	f7ff fe24 	bl	800044c <LL_FLASH_GetLatency>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d1fa      	bne.n	8000800 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_SetCalibTrimming(16);
 800080a:	2010      	movs	r0, #16
 800080c:	f7ff fd6a 	bl	80002e4 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_HSI_Enable();
 8000810:	f7ff fd48 	bl	80002a4 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8000814:	bf00      	nop
 8000816:	f7ff fd53 	bl	80002c0 <LL_RCC_HSI_IsReady>
 800081a:	4603      	mov	r3, r0
 800081c:	2b01      	cmp	r3, #1
 800081e:	d1fa      	bne.n	8000816 <SystemClock_Config+0x22>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000820:	2000      	movs	r0, #0
 8000822:	f7ff fd93 	bl	800034c <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000826:	2000      	movs	r0, #0
 8000828:	f7ff fda4 	bl	8000374 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 800082c:	2000      	movs	r0, #0
 800082e:	f7ff fdb5 	bl	800039c <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8000832:	2000      	movs	r0, #0
 8000834:	f7ff fd6a 	bl	800030c <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8000838:	bf00      	nop
 800083a:	f7ff fd7b 	bl	8000334 <LL_RCC_GetSysClkSource>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d1fa      	bne.n	800083a <SystemClock_Config+0x46>
  {

  }
  LL_Init1msTick(8000000);
 8000844:	4803      	ldr	r0, [pc, #12]	; (8000854 <SystemClock_Config+0x60>)
 8000846:	f001 f883 	bl	8001950 <LL_Init1msTick>
  LL_SetSystemCoreClock(8000000);
 800084a:	4802      	ldr	r0, [pc, #8]	; (8000854 <SystemClock_Config+0x60>)
 800084c:	f001 f88e 	bl	800196c <LL_SetSystemCoreClock>
}
 8000850:	bf00      	nop
 8000852:	bd80      	pop	{r7, pc}
 8000854:	007a1200 	.word	0x007a1200

08000858 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b08c      	sub	sp, #48	; 0x30
 800085c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800085e:	f107 0314 	add.w	r3, r7, #20
 8000862:	2200      	movs	r2, #0
 8000864:	601a      	str	r2, [r3, #0]
 8000866:	605a      	str	r2, [r3, #4]
 8000868:	609a      	str	r2, [r3, #8]
 800086a:	60da      	str	r2, [r3, #12]
 800086c:	611a      	str	r2, [r3, #16]
 800086e:	615a      	str	r2, [r3, #20]
 8000870:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000872:	463b      	mov	r3, r7
 8000874:	2200      	movs	r2, #0
 8000876:	601a      	str	r2, [r3, #0]
 8000878:	605a      	str	r2, [r3, #4]
 800087a:	609a      	str	r2, [r3, #8]
 800087c:	60da      	str	r2, [r3, #12]
 800087e:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 8000880:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000884:	f7ff fd9e 	bl	80003c4 <LL_APB1_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8000888:	2008      	movs	r0, #8
 800088a:	f7ff fdb3 	bl	80003f4 <LL_APB2_GRP1_EnableClock>
  /**USART3 GPIO Configuration
  PB10   ------> USART3_TX
  PB11   ------> USART3_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 800088e:	4b22      	ldr	r3, [pc, #136]	; (8000918 <MX_USART3_UART_Init+0xc0>)
 8000890:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000892:	2309      	movs	r3, #9
 8000894:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8000896:	2303      	movs	r3, #3
 8000898:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800089a:	2300      	movs	r3, #0
 800089c:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800089e:	463b      	mov	r3, r7
 80008a0:	4619      	mov	r1, r3
 80008a2:	481e      	ldr	r0, [pc, #120]	; (800091c <MX_USART3_UART_Init+0xc4>)
 80008a4:	f000 fdcb 	bl	800143e <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_11;
 80008a8:	4b1d      	ldr	r3, [pc, #116]	; (8000920 <MX_USART3_UART_Init+0xc8>)
 80008aa:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 80008ac:	2304      	movs	r3, #4
 80008ae:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008b0:	463b      	mov	r3, r7
 80008b2:	4619      	mov	r1, r3
 80008b4:	4819      	ldr	r0, [pc, #100]	; (800091c <MX_USART3_UART_Init+0xc4>)
 80008b6:	f000 fdc2 	bl	800143e <LL_GPIO_Init>

  /* USART3 interrupt Init */
  NVIC_SetPriority(USART3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80008ba:	f7ff fc6d 	bl	8000198 <__NVIC_GetPriorityGrouping>
 80008be:	4603      	mov	r3, r0
 80008c0:	2200      	movs	r2, #0
 80008c2:	2100      	movs	r1, #0
 80008c4:	4618      	mov	r0, r3
 80008c6:	f7ff fcbb 	bl	8000240 <NVIC_EncodePriority>
 80008ca:	4603      	mov	r3, r0
 80008cc:	4619      	mov	r1, r3
 80008ce:	2027      	movs	r0, #39	; 0x27
 80008d0:	f7ff fc8c 	bl	80001ec <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART3_IRQn);
 80008d4:	2027      	movs	r0, #39	; 0x27
 80008d6:	f7ff fc6d 	bl	80001b4 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 80008da:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80008de:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80008e0:	2300      	movs	r3, #0
 80008e2:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80008e4:	2300      	movs	r3, #0
 80008e6:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80008e8:	2300      	movs	r3, #0
 80008ea:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80008ec:	230c      	movs	r3, #12
 80008ee:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80008f0:	2300      	movs	r3, #0
 80008f2:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80008f4:	2300      	movs	r3, #0
 80008f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_USART_Init(USART3, &USART_InitStruct);
 80008f8:	f107 0314 	add.w	r3, r7, #20
 80008fc:	4619      	mov	r1, r3
 80008fe:	4809      	ldr	r0, [pc, #36]	; (8000924 <MX_USART3_UART_Init+0xcc>)
 8000900:	f000 ffac 	bl	800185c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART3);
 8000904:	4807      	ldr	r0, [pc, #28]	; (8000924 <MX_USART3_UART_Init+0xcc>)
 8000906:	f7ff fdbc 	bl	8000482 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART3);
 800090a:	4806      	ldr	r0, [pc, #24]	; (8000924 <MX_USART3_UART_Init+0xcc>)
 800090c:	f7ff fdaa 	bl	8000464 <LL_USART_Enable>
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000910:	bf00      	nop
 8000912:	3730      	adds	r7, #48	; 0x30
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	04040004 	.word	0x04040004
 800091c:	40010c00 	.word	0x40010c00
 8000920:	04080008 	.word	0x04080008
 8000924:	40004800 	.word	0x40004800

08000928 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b088      	sub	sp, #32
 800092c:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 800092e:	f107 0318 	add.w	r3, r7, #24
 8000932:	2200      	movs	r2, #0
 8000934:	601a      	str	r2, [r3, #0]
 8000936:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000938:	1d3b      	adds	r3, r7, #4
 800093a:	2200      	movs	r2, #0
 800093c:	601a      	str	r2, [r3, #0]
 800093e:	605a      	str	r2, [r3, #4]
 8000940:	609a      	str	r2, [r3, #8]
 8000942:	60da      	str	r2, [r3, #12]
 8000944:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOD);
 8000946:	2020      	movs	r0, #32
 8000948:	f7ff fd54 	bl	80003f4 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 800094c:	2004      	movs	r0, #4
 800094e:	f7ff fd51 	bl	80003f4 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8000952:	2008      	movs	r0, #8
 8000954:	f7ff fd4e 	bl	80003f4 <LL_APB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3
 8000958:	495b      	ldr	r1, [pc, #364]	; (8000ac8 <MX_GPIO_Init+0x1a0>)
 800095a:	485c      	ldr	r0, [pc, #368]	; (8000acc <MX_GPIO_Init+0x1a4>)
 800095c:	f7ff fe09 	bl	8000572 <LL_GPIO_ResetOutputPin>
                          |LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7
                          |LL_GPIO_PIN_8|LL_GPIO_PIN_9|LL_GPIO_PIN_10|LL_GPIO_PIN_11
                          |LL_GPIO_PIN_12|LL_GPIO_PIN_15);

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3
 8000960:	4b59      	ldr	r3, [pc, #356]	; (8000ac8 <MX_GPIO_Init+0x1a0>)
 8000962:	607b      	str	r3, [r7, #4]
                          |LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7
                          |LL_GPIO_PIN_8|LL_GPIO_PIN_9|LL_GPIO_PIN_10|LL_GPIO_PIN_11
                          |LL_GPIO_PIN_12|LL_GPIO_PIN_15;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000964:	2301      	movs	r3, #1
 8000966:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000968:	2302      	movs	r3, #2
 800096a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800096c:	2300      	movs	r3, #0
 800096e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000970:	1d3b      	adds	r3, r7, #4
 8000972:	4619      	mov	r1, r3
 8000974:	4855      	ldr	r0, [pc, #340]	; (8000acc <MX_GPIO_Init+0x1a4>)
 8000976:	f000 fd62 	bl	800143e <LL_GPIO_Init>

  /**/
  LL_GPIO_AF_SetEXTISource(LL_GPIO_AF_EXTI_PORTB, LL_GPIO_AF_EXTI_LINE12);
 800097a:	4955      	ldr	r1, [pc, #340]	; (8000ad0 <MX_GPIO_Init+0x1a8>)
 800097c:	2001      	movs	r0, #1
 800097e:	f7ff fe17 	bl	80005b0 <LL_GPIO_AF_SetEXTISource>

  /**/
  LL_GPIO_AF_SetEXTISource(LL_GPIO_AF_EXTI_PORTB, LL_GPIO_AF_EXTI_LINE4);
 8000982:	4954      	ldr	r1, [pc, #336]	; (8000ad4 <MX_GPIO_Init+0x1ac>)
 8000984:	2001      	movs	r0, #1
 8000986:	f7ff fe13 	bl	80005b0 <LL_GPIO_AF_SetEXTISource>

  /**/
  LL_GPIO_AF_SetEXTISource(LL_GPIO_AF_EXTI_PORTB, LL_GPIO_AF_EXTI_LINE5);
 800098a:	4953      	ldr	r1, [pc, #332]	; (8000ad8 <MX_GPIO_Init+0x1b0>)
 800098c:	2001      	movs	r0, #1
 800098e:	f7ff fe0f 	bl	80005b0 <LL_GPIO_AF_SetEXTISource>

  /**/
  LL_GPIO_AF_SetEXTISource(LL_GPIO_AF_EXTI_PORTB, LL_GPIO_AF_EXTI_LINE8);
 8000992:	4952      	ldr	r1, [pc, #328]	; (8000adc <MX_GPIO_Init+0x1b4>)
 8000994:	2001      	movs	r0, #1
 8000996:	f7ff fe0b 	bl	80005b0 <LL_GPIO_AF_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_12;
 800099a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800099e:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 80009a0:	2301      	movs	r3, #1
 80009a2:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80009a4:	2300      	movs	r3, #0
 80009a6:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80009a8:	2302      	movs	r3, #2
 80009aa:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 80009ac:	f107 0318 	add.w	r3, r7, #24
 80009b0:	4618      	mov	r0, r3
 80009b2:	f000 fc0d 	bl	80011d0 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_4;
 80009b6:	2310      	movs	r3, #16
 80009b8:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 80009ba:	2301      	movs	r3, #1
 80009bc:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80009be:	2300      	movs	r3, #0
 80009c0:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80009c2:	2302      	movs	r3, #2
 80009c4:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 80009c6:	f107 0318 	add.w	r3, r7, #24
 80009ca:	4618      	mov	r0, r3
 80009cc:	f000 fc00 	bl	80011d0 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_5;
 80009d0:	2320      	movs	r3, #32
 80009d2:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 80009d4:	2301      	movs	r3, #1
 80009d6:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80009d8:	2300      	movs	r3, #0
 80009da:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80009dc:	2302      	movs	r3, #2
 80009de:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 80009e0:	f107 0318 	add.w	r3, r7, #24
 80009e4:	4618      	mov	r0, r3
 80009e6:	f000 fbf3 	bl	80011d0 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_8;
 80009ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009ee:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 80009f0:	2301      	movs	r3, #1
 80009f2:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80009f4:	2300      	movs	r3, #0
 80009f6:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80009f8:	2302      	movs	r3, #2
 80009fa:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 80009fc:	f107 0318 	add.w	r3, r7, #24
 8000a00:	4618      	mov	r0, r3
 8000a02:	f000 fbe5 	bl	80011d0 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(GPIOB, LL_GPIO_PIN_12, LL_GPIO_PULL_UP);
 8000a06:	2201      	movs	r2, #1
 8000a08:	4935      	ldr	r1, [pc, #212]	; (8000ae0 <MX_GPIO_Init+0x1b8>)
 8000a0a:	4836      	ldr	r0, [pc, #216]	; (8000ae4 <MX_GPIO_Init+0x1bc>)
 8000a0c:	f7ff fd80 	bl	8000510 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(GPIOB, LL_GPIO_PIN_4, LL_GPIO_PULL_UP);
 8000a10:	2201      	movs	r2, #1
 8000a12:	f241 0110 	movw	r1, #4112	; 0x1010
 8000a16:	4833      	ldr	r0, [pc, #204]	; (8000ae4 <MX_GPIO_Init+0x1bc>)
 8000a18:	f7ff fd7a 	bl	8000510 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(GPIOB, LL_GPIO_PIN_5, LL_GPIO_PULL_UP);
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	f242 0120 	movw	r1, #8224	; 0x2020
 8000a22:	4830      	ldr	r0, [pc, #192]	; (8000ae4 <MX_GPIO_Init+0x1bc>)
 8000a24:	f7ff fd74 	bl	8000510 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(GPIOB, LL_GPIO_PIN_8, LL_GPIO_PULL_UP);
 8000a28:	2201      	movs	r2, #1
 8000a2a:	492f      	ldr	r1, [pc, #188]	; (8000ae8 <MX_GPIO_Init+0x1c0>)
 8000a2c:	482d      	ldr	r0, [pc, #180]	; (8000ae4 <MX_GPIO_Init+0x1bc>)
 8000a2e:	f7ff fd6f 	bl	8000510 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_12, LL_GPIO_MODE_INPUT);
 8000a32:	2208      	movs	r2, #8
 8000a34:	492a      	ldr	r1, [pc, #168]	; (8000ae0 <MX_GPIO_Init+0x1b8>)
 8000a36:	482b      	ldr	r0, [pc, #172]	; (8000ae4 <MX_GPIO_Init+0x1bc>)
 8000a38:	f7ff fd38 	bl	80004ac <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_4, LL_GPIO_MODE_INPUT);
 8000a3c:	2208      	movs	r2, #8
 8000a3e:	f241 0110 	movw	r1, #4112	; 0x1010
 8000a42:	4828      	ldr	r0, [pc, #160]	; (8000ae4 <MX_GPIO_Init+0x1bc>)
 8000a44:	f7ff fd32 	bl	80004ac <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_5, LL_GPIO_MODE_INPUT);
 8000a48:	2208      	movs	r2, #8
 8000a4a:	f242 0120 	movw	r1, #8224	; 0x2020
 8000a4e:	4825      	ldr	r0, [pc, #148]	; (8000ae4 <MX_GPIO_Init+0x1bc>)
 8000a50:	f7ff fd2c 	bl	80004ac <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_8, LL_GPIO_MODE_INPUT);
 8000a54:	2208      	movs	r2, #8
 8000a56:	4924      	ldr	r1, [pc, #144]	; (8000ae8 <MX_GPIO_Init+0x1c0>)
 8000a58:	4822      	ldr	r0, [pc, #136]	; (8000ae4 <MX_GPIO_Init+0x1bc>)
 8000a5a:	f7ff fd27 	bl	80004ac <LL_GPIO_SetPinMode>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8000a5e:	f7ff fb9b 	bl	8000198 <__NVIC_GetPriorityGrouping>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2200      	movs	r2, #0
 8000a66:	2105      	movs	r1, #5
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f7ff fbe9 	bl	8000240 <NVIC_EncodePriority>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	4619      	mov	r1, r3
 8000a72:	200a      	movs	r0, #10
 8000a74:	f7ff fbba 	bl	80001ec <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI4_IRQn);
 8000a78:	200a      	movs	r0, #10
 8000a7a:	f7ff fb9b 	bl	80001b4 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI9_5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),4, 0));
 8000a7e:	f7ff fb8b 	bl	8000198 <__NVIC_GetPriorityGrouping>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2200      	movs	r2, #0
 8000a86:	2104      	movs	r1, #4
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f7ff fbd9 	bl	8000240 <NVIC_EncodePriority>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	4619      	mov	r1, r3
 8000a92:	2017      	movs	r0, #23
 8000a94:	f7ff fbaa 	bl	80001ec <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000a98:	2017      	movs	r0, #23
 8000a9a:	f7ff fb8b 	bl	80001b4 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),3, 0));
 8000a9e:	f7ff fb7b 	bl	8000198 <__NVIC_GetPriorityGrouping>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	2103      	movs	r1, #3
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f7ff fbc9 	bl	8000240 <NVIC_EncodePriority>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	2028      	movs	r0, #40	; 0x28
 8000ab4:	f7ff fb9a 	bl	80001ec <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ab8:	2028      	movs	r0, #40	; 0x28
 8000aba:	f7ff fb7b 	bl	80001b4 <__NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000abe:	bf00      	nop
 8000ac0:	3720      	adds	r7, #32
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	049fffff 	.word	0x049fffff
 8000acc:	40010800 	.word	0x40010800
 8000ad0:	000f0003 	.word	0x000f0003
 8000ad4:	000f0001 	.word	0x000f0001
 8000ad8:	00f00001 	.word	0x00f00001
 8000adc:	000f0002 	.word	0x000f0002
 8000ae0:	04100010 	.word	0x04100010
 8000ae4:	40010c00 	.word	0x40010c00
 8000ae8:	04010001 	.word	0x04010001

08000aec <LED_Task>:

/* USER CODE BEGIN 4 */
static void LED_Task(void *pvParameters){
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
	while(1){
		if( time>=0 && time<20 ){
 8000af4:	4b49      	ldr	r3, [pc, #292]	; (8000c1c <LED_Task+0x130>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	db0d      	blt.n	8000b18 <LED_Task+0x2c>
 8000afc:	4b47      	ldr	r3, [pc, #284]	; (8000c1c <LED_Task+0x130>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	2b13      	cmp	r3, #19
 8000b02:	dc09      	bgt.n	8000b18 <LED_Task+0x2c>
			LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_0 | LL_GPIO_PIN_5);
 8000b04:	f242 1121 	movw	r1, #8481	; 0x2121
 8000b08:	4845      	ldr	r0, [pc, #276]	; (8000c20 <LED_Task+0x134>)
 8000b0a:	f7ff fd23 	bl	8000554 <LL_GPIO_SetOutputPin>
			LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_1 | LL_GPIO_PIN_2 | LL_GPIO_PIN_3 | LL_GPIO_PIN_4);
 8000b0e:	f641 611e 	movw	r1, #7710	; 0x1e1e
 8000b12:	4843      	ldr	r0, [pc, #268]	; (8000c20 <LED_Task+0x134>)
 8000b14:	f7ff fd2d 	bl	8000572 <LL_GPIO_ResetOutputPin>
		}
		if( time>=20 && time<23 ){
 8000b18:	4b40      	ldr	r3, [pc, #256]	; (8000c1c <LED_Task+0x130>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	2b13      	cmp	r3, #19
 8000b1e:	dd0d      	ble.n	8000b3c <LED_Task+0x50>
 8000b20:	4b3e      	ldr	r3, [pc, #248]	; (8000c1c <LED_Task+0x130>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	2b16      	cmp	r3, #22
 8000b26:	dc09      	bgt.n	8000b3c <LED_Task+0x50>
			LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_1 | LL_GPIO_PIN_5);
 8000b28:	f242 2122 	movw	r1, #8738	; 0x2222
 8000b2c:	483c      	ldr	r0, [pc, #240]	; (8000c20 <LED_Task+0x134>)
 8000b2e:	f7ff fd11 	bl	8000554 <LL_GPIO_SetOutputPin>
			LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_0 | LL_GPIO_PIN_2 | LL_GPIO_PIN_3 | LL_GPIO_PIN_4);
 8000b32:	f641 511d 	movw	r1, #7453	; 0x1d1d
 8000b36:	483a      	ldr	r0, [pc, #232]	; (8000c20 <LED_Task+0x134>)
 8000b38:	f7ff fd1b 	bl	8000572 <LL_GPIO_ResetOutputPin>
		}
		if( time>=23 && time<43 ){
 8000b3c:	4b37      	ldr	r3, [pc, #220]	; (8000c1c <LED_Task+0x130>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	2b16      	cmp	r3, #22
 8000b42:	dd0d      	ble.n	8000b60 <LED_Task+0x74>
 8000b44:	4b35      	ldr	r3, [pc, #212]	; (8000c1c <LED_Task+0x130>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	2b2a      	cmp	r3, #42	; 0x2a
 8000b4a:	dc09      	bgt.n	8000b60 <LED_Task+0x74>
			LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_2 | LL_GPIO_PIN_3);
 8000b4c:	f640 410c 	movw	r1, #3084	; 0xc0c
 8000b50:	4833      	ldr	r0, [pc, #204]	; (8000c20 <LED_Task+0x134>)
 8000b52:	f7ff fcff 	bl	8000554 <LL_GPIO_SetOutputPin>
			LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_0 | LL_GPIO_PIN_1 | LL_GPIO_PIN_4 | LL_GPIO_PIN_5);
 8000b56:	f243 3133 	movw	r1, #13107	; 0x3333
 8000b5a:	4831      	ldr	r0, [pc, #196]	; (8000c20 <LED_Task+0x134>)
 8000b5c:	f7ff fd09 	bl	8000572 <LL_GPIO_ResetOutputPin>
		}
		if( time>=43 && time<46 ){
 8000b60:	4b2e      	ldr	r3, [pc, #184]	; (8000c1c <LED_Task+0x130>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	2b2a      	cmp	r3, #42	; 0x2a
 8000b66:	dd0d      	ble.n	8000b84 <LED_Task+0x98>
 8000b68:	4b2c      	ldr	r3, [pc, #176]	; (8000c1c <LED_Task+0x130>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	2b2d      	cmp	r3, #45	; 0x2d
 8000b6e:	dc09      	bgt.n	8000b84 <LED_Task+0x98>
			LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_2 | LL_GPIO_PIN_4);
 8000b70:	f241 4114 	movw	r1, #5140	; 0x1414
 8000b74:	482a      	ldr	r0, [pc, #168]	; (8000c20 <LED_Task+0x134>)
 8000b76:	f7ff fced 	bl	8000554 <LL_GPIO_SetOutputPin>
			LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_0 | LL_GPIO_PIN_1 | LL_GPIO_PIN_3 | LL_GPIO_PIN_5);
 8000b7a:	f642 312b 	movw	r1, #11051	; 0x2b2b
 8000b7e:	4828      	ldr	r0, [pc, #160]	; (8000c20 <LED_Task+0x134>)
 8000b80:	f7ff fcf7 	bl	8000572 <LL_GPIO_ResetOutputPin>
		}
		if(time==0){
 8000b84:	4b25      	ldr	r3, [pc, #148]	; (8000c1c <LED_Task+0x130>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d105      	bne.n	8000b98 <LED_Task+0xac>
			t1=24;
 8000b8c:	4b25      	ldr	r3, [pc, #148]	; (8000c24 <LED_Task+0x138>)
 8000b8e:	2218      	movs	r2, #24
 8000b90:	601a      	str	r2, [r3, #0]
			t2=21;
 8000b92:	4b25      	ldr	r3, [pc, #148]	; (8000c28 <LED_Task+0x13c>)
 8000b94:	2215      	movs	r2, #21
 8000b96:	601a      	str	r2, [r3, #0]
		}
		if(time==20){
 8000b98:	4b20      	ldr	r3, [pc, #128]	; (8000c1c <LED_Task+0x130>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	2b14      	cmp	r3, #20
 8000b9e:	d105      	bne.n	8000bac <LED_Task+0xc0>
			t1=4;
 8000ba0:	4b20      	ldr	r3, [pc, #128]	; (8000c24 <LED_Task+0x138>)
 8000ba2:	2204      	movs	r2, #4
 8000ba4:	601a      	str	r2, [r3, #0]
			t2=4;
 8000ba6:	4b20      	ldr	r3, [pc, #128]	; (8000c28 <LED_Task+0x13c>)
 8000ba8:	2204      	movs	r2, #4
 8000baa:	601a      	str	r2, [r3, #0]
		}
		if(time==23){
 8000bac:	4b1b      	ldr	r3, [pc, #108]	; (8000c1c <LED_Task+0x130>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	2b17      	cmp	r3, #23
 8000bb2:	d105      	bne.n	8000bc0 <LED_Task+0xd4>
			t1=21;
 8000bb4:	4b1b      	ldr	r3, [pc, #108]	; (8000c24 <LED_Task+0x138>)
 8000bb6:	2215      	movs	r2, #21
 8000bb8:	601a      	str	r2, [r3, #0]
			t2=24;
 8000bba:	4b1b      	ldr	r3, [pc, #108]	; (8000c28 <LED_Task+0x13c>)
 8000bbc:	2218      	movs	r2, #24
 8000bbe:	601a      	str	r2, [r3, #0]
		}
		if(time==43){
 8000bc0:	4b16      	ldr	r3, [pc, #88]	; (8000c1c <LED_Task+0x130>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	2b2b      	cmp	r3, #43	; 0x2b
 8000bc6:	d105      	bne.n	8000bd4 <LED_Task+0xe8>
			t1=4;
 8000bc8:	4b16      	ldr	r3, [pc, #88]	; (8000c24 <LED_Task+0x138>)
 8000bca:	2204      	movs	r2, #4
 8000bcc:	601a      	str	r2, [r3, #0]
			t2=4;
 8000bce:	4b16      	ldr	r3, [pc, #88]	; (8000c28 <LED_Task+0x13c>)
 8000bd0:	2204      	movs	r2, #4
 8000bd2:	601a      	str	r2, [r3, #0]
		}
		time=time+1;
 8000bd4:	4b11      	ldr	r3, [pc, #68]	; (8000c1c <LED_Task+0x130>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	3301      	adds	r3, #1
 8000bda:	4a10      	ldr	r2, [pc, #64]	; (8000c1c <LED_Task+0x130>)
 8000bdc:	6013      	str	r3, [r2, #0]
		t1=t1-1;
 8000bde:	4b11      	ldr	r3, [pc, #68]	; (8000c24 <LED_Task+0x138>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	3b01      	subs	r3, #1
 8000be4:	4a0f      	ldr	r2, [pc, #60]	; (8000c24 <LED_Task+0x138>)
 8000be6:	6013      	str	r3, [r2, #0]
		t2=t2-1;
 8000be8:	4b0f      	ldr	r3, [pc, #60]	; (8000c28 <LED_Task+0x13c>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	3b01      	subs	r3, #1
 8000bee:	4a0e      	ldr	r2, [pc, #56]	; (8000c28 <LED_Task+0x13c>)
 8000bf0:	6013      	str	r3, [r2, #0]
		if(time>=46) time=0;
 8000bf2:	4b0a      	ldr	r3, [pc, #40]	; (8000c1c <LED_Task+0x130>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	2b2d      	cmp	r3, #45	; 0x2d
 8000bf8:	dd02      	ble.n	8000c00 <LED_Task+0x114>
 8000bfa:	4b08      	ldr	r3, [pc, #32]	; (8000c1c <LED_Task+0x130>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]
		hienthi(t1,t2);
 8000c00:	4b08      	ldr	r3, [pc, #32]	; (8000c24 <LED_Task+0x138>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a08      	ldr	r2, [pc, #32]	; (8000c28 <LED_Task+0x13c>)
 8000c06:	6812      	ldr	r2, [r2, #0]
 8000c08:	4611      	mov	r1, r2
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f7ff fd30 	bl	8000670 <hienthi>
		vTaskDelay(1000);
 8000c10:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c14:	f001 fd08 	bl	8002628 <vTaskDelay>
		if( time>=0 && time<20 ){
 8000c18:	e76c      	b.n	8000af4 <LED_Task+0x8>
 8000c1a:	bf00      	nop
 8000c1c:	20000040 	.word	0x20000040
 8000c20:	40010800 	.word	0x40010800
 8000c24:	20000044 	.word	0x20000044
 8000c28:	20000048 	.word	0x20000048

08000c2c <UART_Task>:
	}

}
static void UART_Task(void *pvParameters){
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b084      	sub	sp, #16
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
	while(1){
		button_event_t button_event = {3, PRESSED};
 8000c34:	2303      	movs	r3, #3
 8000c36:	733b      	strb	r3, [r7, #12]
 8000c38:	2300      	movs	r3, #0
 8000c3a:	737b      	strb	r3, [r7, #13]
		xQueueReceive(button_event_queue, &button_event, portMAX_DELAY);
 8000c3c:	4b09      	ldr	r3, [pc, #36]	; (8000c64 <UART_Task+0x38>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	f107 010c 	add.w	r1, r7, #12
 8000c44:	f04f 32ff 	mov.w	r2, #4294967295
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f001 f999 	bl	8001f80 <xQueueReceive>
		UARTprintf("button %d %s ",button_event.button_num, button_event.status);
 8000c4e:	7b3b      	ldrb	r3, [r7, #12]
 8000c50:	4619      	mov	r1, r3
 8000c52:	7b7b      	ldrb	r3, [r7, #13]
 8000c54:	461a      	mov	r2, r3
 8000c56:	4804      	ldr	r0, [pc, #16]	; (8000c68 <UART_Task+0x3c>)
 8000c58:	f003 f85e 	bl	8003d18 <UARTprintf>
		vTaskDelay(100);
 8000c5c:	2064      	movs	r0, #100	; 0x64
 8000c5e:	f001 fce3 	bl	8002628 <vTaskDelay>
	while(1){
 8000c62:	e7e7      	b.n	8000c34 <UART_Task+0x8>
 8000c64:	20000030 	.word	0x20000030
 8000c68:	08004018 	.word	0x08004018

08000c6c <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_19
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8000c74:	4b07      	ldr	r3, [pc, #28]	; (8000c94 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8000c76:	695a      	ldr	r2, [r3, #20]
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	4013      	ands	r3, r2
 8000c7c:	687a      	ldr	r2, [r7, #4]
 8000c7e:	429a      	cmp	r2, r3
 8000c80:	bf0c      	ite	eq
 8000c82:	2301      	moveq	r3, #1
 8000c84:	2300      	movne	r3, #0
 8000c86:	b2db      	uxtb	r3, r3
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	370c      	adds	r7, #12
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bc80      	pop	{r7}
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	40010400 	.word	0x40010400

08000c98 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_19
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 8000ca0:	4a03      	ldr	r2, [pc, #12]	; (8000cb0 <LL_EXTI_ClearFlag_0_31+0x18>)
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	6153      	str	r3, [r2, #20]
}
 8000ca6:	bf00      	nop
 8000ca8:	370c      	adds	r7, #12
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bc80      	pop	{r7}
 8000cae:	4770      	bx	lr
 8000cb0:	40010400 	.word	0x40010400

08000cb4 <LL_GPIO_IsInputPinSet>:
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
 8000cbc:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU) == ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	689b      	ldr	r3, [r3, #8]
 8000cc2:	43da      	mvns	r2, r3
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	0a1b      	lsrs	r3, r3, #8
 8000cc8:	4013      	ands	r3, r2
 8000cca:	b29b      	uxth	r3, r3
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	bf0c      	ite	eq
 8000cd0:	2301      	moveq	r3, #1
 8000cd2:	2300      	movne	r3, #0
 8000cd4:	b2db      	uxtb	r3, r3
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	370c      	adds	r7, #12
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bc80      	pop	{r7}
 8000cde:	4770      	bx	lr

08000ce0 <LL_GPIO_SetOutputPin>:
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
 8000ce8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	0a1b      	lsrs	r3, r3, #8
 8000cee:	b29a      	uxth	r2, r3
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	611a      	str	r2, [r3, #16]
}
 8000cf4:	bf00      	nop
 8000cf6:	370c      	adds	r7, #12
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bc80      	pop	{r7}
 8000cfc:	4770      	bx	lr

08000cfe <LL_GPIO_ResetOutputPin>:
{
 8000cfe:	b480      	push	{r7}
 8000d00:	b083      	sub	sp, #12
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	6078      	str	r0, [r7, #4]
 8000d06:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	0a1b      	lsrs	r3, r3, #8
 8000d0c:	b29a      	uxth	r2, r3
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	615a      	str	r2, [r3, #20]
}
 8000d12:	bf00      	nop
 8000d14:	370c      	adds	r7, #12
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bc80      	pop	{r7}
 8000d1a:	4770      	bx	lr

08000d1c <LL_GPIO_TogglePin>:
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b085      	sub	sp, #20
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
 8000d24:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	68db      	ldr	r3, [r3, #12]
 8000d2a:	60fb      	str	r3, [r7, #12]
  uint32_t pinmask = ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	0a1b      	lsrs	r3, r3, #8
 8000d30:	b29b      	uxth	r3, r3
 8000d32:	60bb      	str	r3, [r7, #8]
  WRITE_REG(GPIOx->BSRR, ((odr & pinmask) << 16u) | (~odr & pinmask));
 8000d34:	68fa      	ldr	r2, [r7, #12]
 8000d36:	68bb      	ldr	r3, [r7, #8]
 8000d38:	4013      	ands	r3, r2
 8000d3a:	041a      	lsls	r2, r3, #16
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	43d9      	mvns	r1, r3
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	400b      	ands	r3, r1
 8000d44:	431a      	orrs	r2, r3
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	611a      	str	r2, [r3, #16]
}
 8000d4a:	bf00      	nop
 8000d4c:	3714      	adds	r7, #20
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bc80      	pop	{r7}
 8000d52:	4770      	bx	lr

08000d54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d58:	e7fe      	b.n	8000d58 <NMI_Handler+0x4>

08000d5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d5a:	b480      	push	{r7}
 8000d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d5e:	e7fe      	b.n	8000d5e <HardFault_Handler+0x4>

08000d60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d64:	e7fe      	b.n	8000d64 <MemManage_Handler+0x4>

08000d66 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d66:	b480      	push	{r7}
 8000d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d6a:	e7fe      	b.n	8000d6a <BusFault_Handler+0x4>

08000d6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d70:	e7fe      	b.n	8000d70 <UsageFault_Handler+0x4>

08000d72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d72:	b480      	push	{r7}
 8000d74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d76:	bf00      	nop
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bc80      	pop	{r7}
 8000d7c:	4770      	bx	lr
	...

08000d80 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
	debouncing=0;
 8000d86:	4b33      	ldr	r3, [pc, #204]	; (8000e54 <EXTI4_IRQHandler+0xd4>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]
	button_event_t button_event = {1, PRESSED};
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	713b      	strb	r3, [r7, #4]
 8000d90:	2300      	movs	r3, #0
 8000d92:	717b      	strb	r3, [r7, #5]
	BaseType_t	xHigherPriorityTaskWoken = pdFALSE;
 8000d94:	2300      	movs	r3, #0
 8000d96:	603b      	str	r3, [r7, #0]
  /* USER CODE END EXTI4_IRQn 0 */

	while (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_4) != RESET)
 8000d98:	e051      	b.n	8000e3e <EXTI4_IRQHandler+0xbe>
	{
		xQueueSendFromISR(button_event_queue,&xHigherPriorityTaskWoken, &xHigherPriorityTaskWoken);
 8000d9a:	4b2f      	ldr	r3, [pc, #188]	; (8000e58 <EXTI4_IRQHandler+0xd8>)
 8000d9c:	6818      	ldr	r0, [r3, #0]
 8000d9e:	463a      	mov	r2, r7
 8000da0:	4639      	mov	r1, r7
 8000da2:	2300      	movs	r3, #0
 8000da4:	f001 f82a 	bl	8001dfc <xQueueGenericSendFromISR>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d007      	beq.n	8000dbe <EXTI4_IRQHandler+0x3e>
 8000dae:	4b2b      	ldr	r3, [pc, #172]	; (8000e5c <EXTI4_IRQHandler+0xdc>)
 8000db0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000db4:	601a      	str	r2, [r3, #0]
 8000db6:	f3bf 8f4f 	dsb	sy
 8000dba:	f3bf 8f6f 	isb	sy
		sysTickCounter++;
 8000dbe:	4b28      	ldr	r3, [pc, #160]	; (8000e60 <EXTI4_IRQHandler+0xe0>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	4a26      	ldr	r2, [pc, #152]	; (8000e60 <EXTI4_IRQHandler+0xe0>)
 8000dc6:	6013      	str	r3, [r2, #0]
		if (LL_GPIO_IsInputPinSet(GPIOB, LL_GPIO_PIN_4)) {
 8000dc8:	f241 0110 	movw	r1, #4112	; 0x1010
 8000dcc:	4825      	ldr	r0, [pc, #148]	; (8000e64 <EXTI4_IRQHandler+0xe4>)
 8000dce:	f7ff ff71 	bl	8000cb4 <LL_GPIO_IsInputPinSet>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d015      	beq.n	8000e04 <EXTI4_IRQHandler+0x84>
			debouncing++;
 8000dd8:	4b1e      	ldr	r3, [pc, #120]	; (8000e54 <EXTI4_IRQHandler+0xd4>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	3301      	adds	r3, #1
 8000dde:	4a1d      	ldr	r2, [pc, #116]	; (8000e54 <EXTI4_IRQHandler+0xd4>)
 8000de0:	6013      	str	r3, [r2, #0]
			if(LL_GPIO_IsInputPinSet(GPIOB, LL_GPIO_PIN_4)&&debouncing>=1000){
 8000de2:	f241 0110 	movw	r1, #4112	; 0x1010
 8000de6:	481f      	ldr	r0, [pc, #124]	; (8000e64 <EXTI4_IRQHandler+0xe4>)
 8000de8:	f7ff ff64 	bl	8000cb4 <LL_GPIO_IsInputPinSet>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d00b      	beq.n	8000e0a <EXTI4_IRQHandler+0x8a>
 8000df2:	4b18      	ldr	r3, [pc, #96]	; (8000e54 <EXTI4_IRQHandler+0xd4>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000dfa:	d306      	bcc.n	8000e0a <EXTI4_IRQHandler+0x8a>
				LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_4);
 8000dfc:	2010      	movs	r0, #16
 8000dfe:	f7ff ff4b 	bl	8000c98 <LL_EXTI_ClearFlag_0_31>
 8000e02:	e002      	b.n	8000e0a <EXTI4_IRQHandler+0x8a>
			}
		}else debouncing=0;
 8000e04:	4b13      	ldr	r3, [pc, #76]	; (8000e54 <EXTI4_IRQHandler+0xd4>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	601a      	str	r2, [r3, #0]
		/* USER CODE BEGIN LL_EXTI_LINE_4 */
		if (sysTickCounter/2500 > 0){
 8000e0a:	4b15      	ldr	r3, [pc, #84]	; (8000e60 <EXTI4_IRQHandler+0xe0>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d907      	bls.n	8000e26 <EXTI4_IRQHandler+0xa6>
			LL_GPIO_TogglePin(GPIOA, LL_GPIO_PIN_1 | LL_GPIO_PIN_4);
 8000e16:	f241 2112 	movw	r1, #4626	; 0x1212
 8000e1a:	4813      	ldr	r0, [pc, #76]	; (8000e68 <EXTI4_IRQHandler+0xe8>)
 8000e1c:	f7ff ff7e 	bl	8000d1c <LL_GPIO_TogglePin>
			sysTickCounter=0;
 8000e20:	4b0f      	ldr	r3, [pc, #60]	; (8000e60 <EXTI4_IRQHandler+0xe0>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	601a      	str	r2, [r3, #0]
		}
		LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_0 | LL_GPIO_PIN_2 | LL_GPIO_PIN_3 | LL_GPIO_PIN_5);
 8000e26:	f642 512d 	movw	r1, #11565	; 0x2d2d
 8000e2a:	480f      	ldr	r0, [pc, #60]	; (8000e68 <EXTI4_IRQHandler+0xe8>)
 8000e2c:	f7ff ff67 	bl	8000cfe <LL_GPIO_ResetOutputPin>
		hienthi(88,88);
 8000e30:	2158      	movs	r1, #88	; 0x58
 8000e32:	2058      	movs	r0, #88	; 0x58
 8000e34:	f7ff fc1c 	bl	8000670 <hienthi>
		time=0;
 8000e38:	4b0c      	ldr	r3, [pc, #48]	; (8000e6c <EXTI4_IRQHandler+0xec>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	601a      	str	r2, [r3, #0]
	while (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_4) != RESET)
 8000e3e:	2010      	movs	r0, #16
 8000e40:	f7ff ff14 	bl	8000c6c <LL_EXTI_IsActiveFlag_0_31>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d1a7      	bne.n	8000d9a <EXTI4_IRQHandler+0x1a>
	}

  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000e4a:	bf00      	nop
 8000e4c:	bf00      	nop
 8000e4e:	3708      	adds	r7, #8
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	2000003c 	.word	0x2000003c
 8000e58:	20000030 	.word	0x20000030
 8000e5c:	e000ed04 	.word	0xe000ed04
 8000e60:	20000038 	.word	0x20000038
 8000e64:	40010c00 	.word	0x40010c00
 8000e68:	40010800 	.word	0x40010800
 8000e6c:	20000040 	.word	0x20000040

08000e70 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	debouncing=0;
 8000e76:	4b31      	ldr	r3, [pc, #196]	; (8000f3c <EXTI9_5_IRQHandler+0xcc>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
	button_event_t button_event = {2, PRESSED};
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	713b      	strb	r3, [r7, #4]
 8000e80:	2300      	movs	r3, #0
 8000e82:	717b      	strb	r3, [r7, #5]
	BaseType_t	xHigherPriorityTaskWoken = pdFALSE;
 8000e84:	2300      	movs	r3, #0
 8000e86:	603b      	str	r3, [r7, #0]
  /* USER CODE END EXTI9_5_IRQn 0 */
  while (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_5) != RESET)
 8000e88:	e043      	b.n	8000f12 <EXTI9_5_IRQHandler+0xa2>
  {
	xQueueSendFromISR(button_event_queue,&xHigherPriorityTaskWoken, &xHigherPriorityTaskWoken);
 8000e8a:	4b2d      	ldr	r3, [pc, #180]	; (8000f40 <EXTI9_5_IRQHandler+0xd0>)
 8000e8c:	6818      	ldr	r0, [r3, #0]
 8000e8e:	463a      	mov	r2, r7
 8000e90:	4639      	mov	r1, r7
 8000e92:	2300      	movs	r3, #0
 8000e94:	f000 ffb2 	bl	8001dfc <xQueueGenericSendFromISR>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d007      	beq.n	8000eae <EXTI9_5_IRQHandler+0x3e>
 8000e9e:	4b29      	ldr	r3, [pc, #164]	; (8000f44 <EXTI9_5_IRQHandler+0xd4>)
 8000ea0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000ea4:	601a      	str	r2, [r3, #0]
 8000ea6:	f3bf 8f4f 	dsb	sy
 8000eaa:	f3bf 8f6f 	isb	sy
	if (LL_GPIO_IsInputPinSet(GPIOB, LL_GPIO_PIN_5)) {
 8000eae:	f242 0120 	movw	r1, #8224	; 0x2020
 8000eb2:	4825      	ldr	r0, [pc, #148]	; (8000f48 <EXTI9_5_IRQHandler+0xd8>)
 8000eb4:	f7ff fefe 	bl	8000cb4 <LL_GPIO_IsInputPinSet>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d015      	beq.n	8000eea <EXTI9_5_IRQHandler+0x7a>
		debouncing++;
 8000ebe:	4b1f      	ldr	r3, [pc, #124]	; (8000f3c <EXTI9_5_IRQHandler+0xcc>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	3301      	adds	r3, #1
 8000ec4:	4a1d      	ldr	r2, [pc, #116]	; (8000f3c <EXTI9_5_IRQHandler+0xcc>)
 8000ec6:	6013      	str	r3, [r2, #0]
		if(LL_GPIO_IsInputPinSet(GPIOB, LL_GPIO_PIN_5)&&debouncing>=1000){
 8000ec8:	f242 0120 	movw	r1, #8224	; 0x2020
 8000ecc:	481e      	ldr	r0, [pc, #120]	; (8000f48 <EXTI9_5_IRQHandler+0xd8>)
 8000ece:	f7ff fef1 	bl	8000cb4 <LL_GPIO_IsInputPinSet>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d00b      	beq.n	8000ef0 <EXTI9_5_IRQHandler+0x80>
 8000ed8:	4b18      	ldr	r3, [pc, #96]	; (8000f3c <EXTI9_5_IRQHandler+0xcc>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000ee0:	d306      	bcc.n	8000ef0 <EXTI9_5_IRQHandler+0x80>
			LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_5);
 8000ee2:	2020      	movs	r0, #32
 8000ee4:	f7ff fed8 	bl	8000c98 <LL_EXTI_ClearFlag_0_31>
 8000ee8:	e002      	b.n	8000ef0 <EXTI9_5_IRQHandler+0x80>
		}
	}else debouncing=0;
 8000eea:	4b14      	ldr	r3, [pc, #80]	; (8000f3c <EXTI9_5_IRQHandler+0xcc>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	601a      	str	r2, [r3, #0]
    /* USER CODE BEGIN LL_EXTI_LINE_5 */
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_0 | LL_GPIO_PIN_1 | LL_GPIO_PIN_4 | LL_GPIO_PIN_5);
 8000ef0:	f243 3133 	movw	r1, #13107	; 0x3333
 8000ef4:	4815      	ldr	r0, [pc, #84]	; (8000f4c <EXTI9_5_IRQHandler+0xdc>)
 8000ef6:	f7ff ff02 	bl	8000cfe <LL_GPIO_ResetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_2 | LL_GPIO_PIN_3);
 8000efa:	f640 410c 	movw	r1, #3084	; 0xc0c
 8000efe:	4813      	ldr	r0, [pc, #76]	; (8000f4c <EXTI9_5_IRQHandler+0xdc>)
 8000f00:	f7ff feee 	bl	8000ce0 <LL_GPIO_SetOutputPin>
	hienthi(00,00);
 8000f04:	2100      	movs	r1, #0
 8000f06:	2000      	movs	r0, #0
 8000f08:	f7ff fbb2 	bl	8000670 <hienthi>
	time=43;
 8000f0c:	4b10      	ldr	r3, [pc, #64]	; (8000f50 <EXTI9_5_IRQHandler+0xe0>)
 8000f0e:	222b      	movs	r2, #43	; 0x2b
 8000f10:	601a      	str	r2, [r3, #0]
  while (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_5) != RESET)
 8000f12:	2020      	movs	r0, #32
 8000f14:	f7ff feaa 	bl	8000c6c <LL_EXTI_IsActiveFlag_0_31>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d1b5      	bne.n	8000e8a <EXTI9_5_IRQHandler+0x1a>
    /* USER CODE END LL_EXTI_LINE_5 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_8) != RESET)
 8000f1e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000f22:	f7ff fea3 	bl	8000c6c <LL_EXTI_IsActiveFlag_0_31>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d003      	beq.n	8000f34 <EXTI9_5_IRQHandler+0xc4>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_8);
 8000f2c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000f30:	f7ff feb2 	bl	8000c98 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_8 */
  }
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000f34:	bf00      	nop
 8000f36:	3708      	adds	r7, #8
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	2000003c 	.word	0x2000003c
 8000f40:	20000030 	.word	0x20000030
 8000f44:	e000ed04 	.word	0xe000ed04
 8000f48:	40010c00 	.word	0x40010c00
 8000f4c:	40010800 	.word	0x40010800
 8000f50:	20000040 	.word	0x20000040

08000f54 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	UARTStdioIntHandler();
 8000f58:	f002 ff34 	bl	8003dc4 <UARTStdioIntHandler>
  /* USER CODE END USART3_IRQn 0 */
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000f5c:	bf00      	nop
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
	if(xSemaphoreTakeFromISR(mutex_isr, NULL) == pdTRUE) {
 8000f66:	4b34      	ldr	r3, [pc, #208]	; (8001038 <EXTI15_10_IRQHandler+0xd8>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f001 f8a8 	bl	80020c4 <xQueueReceiveFromISR>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b01      	cmp	r3, #1
 8000f78:	d159      	bne.n	800102e <EXTI15_10_IRQHandler+0xce>
	/* USER CODE BEGIN EXTI15_10_IRQn 0 */
	debouncing=0;
 8000f7a:	4b30      	ldr	r3, [pc, #192]	; (800103c <EXTI15_10_IRQHandler+0xdc>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
	button_event_t button_event = {3, PRESSED};
 8000f80:	2303      	movs	r3, #3
 8000f82:	713b      	strb	r3, [r7, #4]
 8000f84:	2300      	movs	r3, #0
 8000f86:	717b      	strb	r3, [r7, #5]
	BaseType_t	xHigherPriorityTaskWoken = pdFALSE;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	603b      	str	r3, [r7, #0]
	/* USER CODE END EXTI15_10_IRQn 0 */
	while (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_12) != RESET)
 8000f8c:	e048      	b.n	8001020 <EXTI15_10_IRQHandler+0xc0>
	{
		xQueueSendFromISR(button_event_queue,&xHigherPriorityTaskWoken, &xHigherPriorityTaskWoken);
 8000f8e:	4b2c      	ldr	r3, [pc, #176]	; (8001040 <EXTI15_10_IRQHandler+0xe0>)
 8000f90:	6818      	ldr	r0, [r3, #0]
 8000f92:	463a      	mov	r2, r7
 8000f94:	4639      	mov	r1, r7
 8000f96:	2300      	movs	r3, #0
 8000f98:	f000 ff30 	bl	8001dfc <xQueueGenericSendFromISR>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d007      	beq.n	8000fb2 <EXTI15_10_IRQHandler+0x52>
 8000fa2:	4b28      	ldr	r3, [pc, #160]	; (8001044 <EXTI15_10_IRQHandler+0xe4>)
 8000fa4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000fa8:	601a      	str	r2, [r3, #0]
 8000faa:	f3bf 8f4f 	dsb	sy
 8000fae:	f3bf 8f6f 	isb	sy
		if (LL_GPIO_IsInputPinSet(GPIOB, LL_GPIO_PIN_12)) {
 8000fb2:	4925      	ldr	r1, [pc, #148]	; (8001048 <EXTI15_10_IRQHandler+0xe8>)
 8000fb4:	4825      	ldr	r0, [pc, #148]	; (800104c <EXTI15_10_IRQHandler+0xec>)
 8000fb6:	f7ff fe7d 	bl	8000cb4 <LL_GPIO_IsInputPinSet>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d01b      	beq.n	8000ff8 <EXTI15_10_IRQHandler+0x98>
			debouncing++;
 8000fc0:	4b1e      	ldr	r3, [pc, #120]	; (800103c <EXTI15_10_IRQHandler+0xdc>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	4a1d      	ldr	r2, [pc, #116]	; (800103c <EXTI15_10_IRQHandler+0xdc>)
 8000fc8:	6013      	str	r3, [r2, #0]
			if(LL_GPIO_IsInputPinSet(GPIOB, LL_GPIO_PIN_12)&&debouncing>=1000){
 8000fca:	491f      	ldr	r1, [pc, #124]	; (8001048 <EXTI15_10_IRQHandler+0xe8>)
 8000fcc:	481f      	ldr	r0, [pc, #124]	; (800104c <EXTI15_10_IRQHandler+0xec>)
 8000fce:	f7ff fe71 	bl	8000cb4 <LL_GPIO_IsInputPinSet>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d012      	beq.n	8000ffe <EXTI15_10_IRQHandler+0x9e>
 8000fd8:	4b18      	ldr	r3, [pc, #96]	; (800103c <EXTI15_10_IRQHandler+0xdc>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000fe0:	d30d      	bcc.n	8000ffe <EXTI15_10_IRQHandler+0x9e>
				LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_12);
 8000fe2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000fe6:	f7ff fe57 	bl	8000c98 <LL_EXTI_ClearFlag_0_31>
				xSemaphoreGiveFromISR(mutex_isr, NULL);
 8000fea:	4b13      	ldr	r3, [pc, #76]	; (8001038 <EXTI15_10_IRQHandler+0xd8>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	2100      	movs	r1, #0
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f000 ff68 	bl	8001ec6 <xQueueGiveFromISR>
 8000ff6:	e002      	b.n	8000ffe <EXTI15_10_IRQHandler+0x9e>
			}
		}else debouncing=0;
 8000ff8:	4b10      	ldr	r3, [pc, #64]	; (800103c <EXTI15_10_IRQHandler+0xdc>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	601a      	str	r2, [r3, #0]

		/* USER CODE BEGIN LL_EXTI_LINE_12 */
		LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_0 | LL_GPIO_PIN_5);
 8000ffe:	f242 1121 	movw	r1, #8481	; 0x2121
 8001002:	4813      	ldr	r0, [pc, #76]	; (8001050 <EXTI15_10_IRQHandler+0xf0>)
 8001004:	f7ff fe6c 	bl	8000ce0 <LL_GPIO_SetOutputPin>
		LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_1 | LL_GPIO_PIN_2 | LL_GPIO_PIN_3 | LL_GPIO_PIN_4);
 8001008:	f641 611e 	movw	r1, #7710	; 0x1e1e
 800100c:	4810      	ldr	r0, [pc, #64]	; (8001050 <EXTI15_10_IRQHandler+0xf0>)
 800100e:	f7ff fe76 	bl	8000cfe <LL_GPIO_ResetOutputPin>
		hienthi(00,00);
 8001012:	2100      	movs	r1, #0
 8001014:	2000      	movs	r0, #0
 8001016:	f7ff fb2b 	bl	8000670 <hienthi>
		time=20;
 800101a:	4b0e      	ldr	r3, [pc, #56]	; (8001054 <EXTI15_10_IRQHandler+0xf4>)
 800101c:	2214      	movs	r2, #20
 800101e:	601a      	str	r2, [r3, #0]
	while (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_12) != RESET)
 8001020:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001024:	f7ff fe22 	bl	8000c6c <LL_EXTI_IsActiveFlag_0_31>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d1af      	bne.n	8000f8e <EXTI15_10_IRQHandler+0x2e>
	}
	/* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
	}
}
 800102e:	bf00      	nop
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	20000034 	.word	0x20000034
 800103c:	2000003c 	.word	0x2000003c
 8001040:	20000030 	.word	0x20000030
 8001044:	e000ed04 	.word	0xe000ed04
 8001048:	04100010 	.word	0x04100010
 800104c:	40010c00 	.word	0x40010c00
 8001050:	40010800 	.word	0x40010800
 8001054:	20000040 	.word	0x20000040

08001058 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800105c:	bf00      	nop
 800105e:	46bd      	mov	sp, r7
 8001060:	bc80      	pop	{r7}
 8001062:	4770      	bx	lr

08001064 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001064:	f7ff fff8 	bl	8001058 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001068:	480b      	ldr	r0, [pc, #44]	; (8001098 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800106a:	490c      	ldr	r1, [pc, #48]	; (800109c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800106c:	4a0c      	ldr	r2, [pc, #48]	; (80010a0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800106e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001070:	e002      	b.n	8001078 <LoopCopyDataInit>

08001072 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001072:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001074:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001076:	3304      	adds	r3, #4

08001078 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001078:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800107a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800107c:	d3f9      	bcc.n	8001072 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800107e:	4a09      	ldr	r2, [pc, #36]	; (80010a4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001080:	4c09      	ldr	r4, [pc, #36]	; (80010a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001082:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001084:	e001      	b.n	800108a <LoopFillZerobss>

08001086 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001086:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001088:	3204      	adds	r2, #4

0800108a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800108a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800108c:	d3fb      	bcc.n	8001086 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800108e:	f002 ff6f 	bl	8003f70 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001092:	f7ff fb53 	bl	800073c <main>
  bx lr
 8001096:	4770      	bx	lr
  ldr r0, =_sdata
 8001098:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800109c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80010a0:	08004078 	.word	0x08004078
  ldr r2, =_sbss
 80010a4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80010a8:	20004a00 	.word	0x20004a00

080010ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010ac:	e7fe      	b.n	80010ac <ADC1_2_IRQHandler>
	...

080010b0 <LL_EXTI_EnableIT_0_31>:
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 80010b8:	4b05      	ldr	r3, [pc, #20]	; (80010d0 <LL_EXTI_EnableIT_0_31+0x20>)
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	4904      	ldr	r1, [pc, #16]	; (80010d0 <LL_EXTI_EnableIT_0_31+0x20>)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4313      	orrs	r3, r2
 80010c2:	600b      	str	r3, [r1, #0]
}
 80010c4:	bf00      	nop
 80010c6:	370c      	adds	r7, #12
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bc80      	pop	{r7}
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	40010400 	.word	0x40010400

080010d4 <LL_EXTI_DisableIT_0_31>:
{
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 80010dc:	4b05      	ldr	r3, [pc, #20]	; (80010f4 <LL_EXTI_DisableIT_0_31+0x20>)
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	43db      	mvns	r3, r3
 80010e4:	4903      	ldr	r1, [pc, #12]	; (80010f4 <LL_EXTI_DisableIT_0_31+0x20>)
 80010e6:	4013      	ands	r3, r2
 80010e8:	600b      	str	r3, [r1, #0]
}
 80010ea:	bf00      	nop
 80010ec:	370c      	adds	r7, #12
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bc80      	pop	{r7}
 80010f2:	4770      	bx	lr
 80010f4:	40010400 	.word	0x40010400

080010f8 <LL_EXTI_EnableEvent_0_31>:
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8001100:	4b05      	ldr	r3, [pc, #20]	; (8001118 <LL_EXTI_EnableEvent_0_31+0x20>)
 8001102:	685a      	ldr	r2, [r3, #4]
 8001104:	4904      	ldr	r1, [pc, #16]	; (8001118 <LL_EXTI_EnableEvent_0_31+0x20>)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4313      	orrs	r3, r2
 800110a:	604b      	str	r3, [r1, #4]
}
 800110c:	bf00      	nop
 800110e:	370c      	adds	r7, #12
 8001110:	46bd      	mov	sp, r7
 8001112:	bc80      	pop	{r7}
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	40010400 	.word	0x40010400

0800111c <LL_EXTI_DisableEvent_0_31>:
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8001124:	4b05      	ldr	r3, [pc, #20]	; (800113c <LL_EXTI_DisableEvent_0_31+0x20>)
 8001126:	685a      	ldr	r2, [r3, #4]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	43db      	mvns	r3, r3
 800112c:	4903      	ldr	r1, [pc, #12]	; (800113c <LL_EXTI_DisableEvent_0_31+0x20>)
 800112e:	4013      	ands	r3, r2
 8001130:	604b      	str	r3, [r1, #4]
}
 8001132:	bf00      	nop
 8001134:	370c      	adds	r7, #12
 8001136:	46bd      	mov	sp, r7
 8001138:	bc80      	pop	{r7}
 800113a:	4770      	bx	lr
 800113c:	40010400 	.word	0x40010400

08001140 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8001148:	4b05      	ldr	r3, [pc, #20]	; (8001160 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800114a:	689a      	ldr	r2, [r3, #8]
 800114c:	4904      	ldr	r1, [pc, #16]	; (8001160 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4313      	orrs	r3, r2
 8001152:	608b      	str	r3, [r1, #8]
}
 8001154:	bf00      	nop
 8001156:	370c      	adds	r7, #12
 8001158:	46bd      	mov	sp, r7
 800115a:	bc80      	pop	{r7}
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	40010400 	.word	0x40010400

08001164 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 800116c:	4b05      	ldr	r3, [pc, #20]	; (8001184 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 800116e:	689a      	ldr	r2, [r3, #8]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	43db      	mvns	r3, r3
 8001174:	4903      	ldr	r1, [pc, #12]	; (8001184 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8001176:	4013      	ands	r3, r2
 8001178:	608b      	str	r3, [r1, #8]
}
 800117a:	bf00      	nop
 800117c:	370c      	adds	r7, #12
 800117e:	46bd      	mov	sp, r7
 8001180:	bc80      	pop	{r7}
 8001182:	4770      	bx	lr
 8001184:	40010400 	.word	0x40010400

08001188 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8001190:	4b05      	ldr	r3, [pc, #20]	; (80011a8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8001192:	68da      	ldr	r2, [r3, #12]
 8001194:	4904      	ldr	r1, [pc, #16]	; (80011a8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4313      	orrs	r3, r2
 800119a:	60cb      	str	r3, [r1, #12]
}
 800119c:	bf00      	nop
 800119e:	370c      	adds	r7, #12
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bc80      	pop	{r7}
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	40010400 	.word	0x40010400

080011ac <LL_EXTI_DisableFallingTrig_0_31>:
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 80011b4:	4b05      	ldr	r3, [pc, #20]	; (80011cc <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 80011b6:	68da      	ldr	r2, [r3, #12]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	43db      	mvns	r3, r3
 80011bc:	4903      	ldr	r1, [pc, #12]	; (80011cc <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 80011be:	4013      	ands	r3, r2
 80011c0:	60cb      	str	r3, [r1, #12]
}
 80011c2:	bf00      	nop
 80011c4:	370c      	adds	r7, #12
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bc80      	pop	{r7}
 80011ca:	4770      	bx	lr
 80011cc:	40010400 	.word	0x40010400

080011d0 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 80011d8:	2300      	movs	r3, #0
 80011da:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	791b      	ldrb	r3, [r3, #4]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d065      	beq.n	80012b0 <LL_EXTI_Init+0xe0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d06b      	beq.n	80012c4 <LL_EXTI_Init+0xf4>
    {
      switch (EXTI_InitStruct->Mode)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	795b      	ldrb	r3, [r3, #5]
 80011f0:	2b02      	cmp	r3, #2
 80011f2:	d01c      	beq.n	800122e <LL_EXTI_Init+0x5e>
 80011f4:	2b02      	cmp	r3, #2
 80011f6:	dc25      	bgt.n	8001244 <LL_EXTI_Init+0x74>
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d002      	beq.n	8001202 <LL_EXTI_Init+0x32>
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	d00b      	beq.n	8001218 <LL_EXTI_Init+0x48>
 8001200:	e020      	b.n	8001244 <LL_EXTI_Init+0x74>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4618      	mov	r0, r3
 8001208:	f7ff ff88 	bl	800111c <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff ff4d 	bl	80010b0 <LL_EXTI_EnableIT_0_31>
          break;
 8001216:	e018      	b.n	800124a <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff ff59 	bl	80010d4 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4618      	mov	r0, r3
 8001228:	f7ff ff66 	bl	80010f8 <LL_EXTI_EnableEvent_0_31>
          break;
 800122c:	e00d      	b.n	800124a <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4618      	mov	r0, r3
 8001234:	f7ff ff3c 	bl	80010b0 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4618      	mov	r0, r3
 800123e:	f7ff ff5b 	bl	80010f8 <LL_EXTI_EnableEvent_0_31>
          break;
 8001242:	e002      	b.n	800124a <LL_EXTI_Init+0x7a>
        default:
          status = ERROR;
 8001244:	2301      	movs	r3, #1
 8001246:	73fb      	strb	r3, [r7, #15]
          break;
 8001248:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	799b      	ldrb	r3, [r3, #6]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d038      	beq.n	80012c4 <LL_EXTI_Init+0xf4>
      {
        switch (EXTI_InitStruct->Trigger)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	799b      	ldrb	r3, [r3, #6]
 8001256:	2b03      	cmp	r3, #3
 8001258:	d01c      	beq.n	8001294 <LL_EXTI_Init+0xc4>
 800125a:	2b03      	cmp	r3, #3
 800125c:	dc25      	bgt.n	80012aa <LL_EXTI_Init+0xda>
 800125e:	2b01      	cmp	r3, #1
 8001260:	d002      	beq.n	8001268 <LL_EXTI_Init+0x98>
 8001262:	2b02      	cmp	r3, #2
 8001264:	d00b      	beq.n	800127e <LL_EXTI_Init+0xae>
 8001266:	e020      	b.n	80012aa <LL_EXTI_Init+0xda>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff ff9d 	bl	80011ac <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff ff62 	bl	8001140 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 800127c:	e022      	b.n	80012c4 <LL_EXTI_Init+0xf4>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4618      	mov	r0, r3
 8001284:	f7ff ff6e 	bl	8001164 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff ff7b 	bl	8001188 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8001292:	e017      	b.n	80012c4 <LL_EXTI_Init+0xf4>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff ff51 	bl	8001140 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4618      	mov	r0, r3
 80012a4:	f7ff ff70 	bl	8001188 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80012a8:	e00c      	b.n	80012c4 <LL_EXTI_Init+0xf4>
          default:
            status = ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	73fb      	strb	r3, [r7, #15]
            break;
 80012ae:	e009      	b.n	80012c4 <LL_EXTI_Init+0xf4>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff ff0d 	bl	80010d4 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4618      	mov	r0, r3
 80012c0:	f7ff ff2c 	bl	800111c <LL_EXTI_DisableEvent_0_31>
  }
  return status;
 80012c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3710      	adds	r7, #16
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}

080012ce <LL_GPIO_SetPinMode>:
{
 80012ce:	b490      	push	{r4, r7}
 80012d0:	b088      	sub	sp, #32
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	60f8      	str	r0, [r7, #12]
 80012d6:	60b9      	str	r1, [r7, #8]
 80012d8:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	461a      	mov	r2, r3
 80012de:	68bb      	ldr	r3, [r7, #8]
 80012e0:	0e1b      	lsrs	r3, r3, #24
 80012e2:	4413      	add	r3, r2
 80012e4:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 80012e6:	6822      	ldr	r2, [r4, #0]
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	fa93 f3a3 	rbit	r3, r3
 80012f2:	613b      	str	r3, [r7, #16]
  return result;
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	fab3 f383 	clz	r3, r3
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	210f      	movs	r1, #15
 8001300:	fa01 f303 	lsl.w	r3, r1, r3
 8001304:	43db      	mvns	r3, r3
 8001306:	401a      	ands	r2, r3
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800130c:	69fb      	ldr	r3, [r7, #28]
 800130e:	fa93 f3a3 	rbit	r3, r3
 8001312:	61bb      	str	r3, [r7, #24]
  return result;
 8001314:	69bb      	ldr	r3, [r7, #24]
 8001316:	fab3 f383 	clz	r3, r3
 800131a:	b2db      	uxtb	r3, r3
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	6879      	ldr	r1, [r7, #4]
 8001320:	fa01 f303 	lsl.w	r3, r1, r3
 8001324:	4313      	orrs	r3, r2
 8001326:	6023      	str	r3, [r4, #0]
}
 8001328:	bf00      	nop
 800132a:	3720      	adds	r7, #32
 800132c:	46bd      	mov	sp, r7
 800132e:	bc90      	pop	{r4, r7}
 8001330:	4770      	bx	lr

08001332 <LL_GPIO_SetPinSpeed>:
{
 8001332:	b490      	push	{r4, r7}
 8001334:	b088      	sub	sp, #32
 8001336:	af00      	add	r7, sp, #0
 8001338:	60f8      	str	r0, [r7, #12]
 800133a:	60b9      	str	r1, [r7, #8]
 800133c:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	461a      	mov	r2, r3
 8001342:	68bb      	ldr	r3, [r7, #8]
 8001344:	0e1b      	lsrs	r3, r3, #24
 8001346:	4413      	add	r3, r2
 8001348:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 800134a:	6822      	ldr	r2, [r4, #0]
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	fa93 f3a3 	rbit	r3, r3
 8001356:	613b      	str	r3, [r7, #16]
  return result;
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	fab3 f383 	clz	r3, r3
 800135e:	b2db      	uxtb	r3, r3
 8001360:	009b      	lsls	r3, r3, #2
 8001362:	2103      	movs	r1, #3
 8001364:	fa01 f303 	lsl.w	r3, r1, r3
 8001368:	43db      	mvns	r3, r3
 800136a:	401a      	ands	r2, r3
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001370:	69fb      	ldr	r3, [r7, #28]
 8001372:	fa93 f3a3 	rbit	r3, r3
 8001376:	61bb      	str	r3, [r7, #24]
  return result;
 8001378:	69bb      	ldr	r3, [r7, #24]
 800137a:	fab3 f383 	clz	r3, r3
 800137e:	b2db      	uxtb	r3, r3
 8001380:	009b      	lsls	r3, r3, #2
 8001382:	6879      	ldr	r1, [r7, #4]
 8001384:	fa01 f303 	lsl.w	r3, r1, r3
 8001388:	4313      	orrs	r3, r2
 800138a:	6023      	str	r3, [r4, #0]
}
 800138c:	bf00      	nop
 800138e:	3720      	adds	r7, #32
 8001390:	46bd      	mov	sp, r7
 8001392:	bc90      	pop	{r4, r7}
 8001394:	4770      	bx	lr

08001396 <LL_GPIO_SetPinOutputType>:
{
 8001396:	b490      	push	{r4, r7}
 8001398:	b088      	sub	sp, #32
 800139a:	af00      	add	r7, sp, #0
 800139c:	60f8      	str	r0, [r7, #12]
 800139e:	60b9      	str	r1, [r7, #8]
 80013a0:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	461a      	mov	r2, r3
 80013a6:	68bb      	ldr	r3, [r7, #8]
 80013a8:	0e1b      	lsrs	r3, r3, #24
 80013aa:	4413      	add	r3, r2
 80013ac:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 80013ae:	6822      	ldr	r2, [r4, #0]
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	fa93 f3a3 	rbit	r3, r3
 80013ba:	613b      	str	r3, [r7, #16]
  return result;
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	fab3 f383 	clz	r3, r3
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	2104      	movs	r1, #4
 80013c8:	fa01 f303 	lsl.w	r3, r1, r3
 80013cc:	43db      	mvns	r3, r3
 80013ce:	401a      	ands	r2, r3
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	fa93 f3a3 	rbit	r3, r3
 80013da:	61bb      	str	r3, [r7, #24]
  return result;
 80013dc:	69bb      	ldr	r3, [r7, #24]
 80013de:	fab3 f383 	clz	r3, r3
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	6879      	ldr	r1, [r7, #4]
 80013e8:	fa01 f303 	lsl.w	r3, r1, r3
 80013ec:	4313      	orrs	r3, r2
 80013ee:	6023      	str	r3, [r4, #0]
}
 80013f0:	bf00      	nop
 80013f2:	3720      	adds	r7, #32
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bc90      	pop	{r4, r7}
 80013f8:	4770      	bx	lr

080013fa <LL_GPIO_SetPinPull>:
{
 80013fa:	b480      	push	{r7}
 80013fc:	b087      	sub	sp, #28
 80013fe:	af00      	add	r7, sp, #0
 8001400:	60f8      	str	r0, [r7, #12]
 8001402:	60b9      	str	r1, [r7, #8]
 8001404:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	68da      	ldr	r2, [r3, #12]
 800140a:	68bb      	ldr	r3, [r7, #8]
 800140c:	0a1b      	lsrs	r3, r3, #8
 800140e:	43db      	mvns	r3, r3
 8001410:	401a      	ands	r2, r3
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	0a1b      	lsrs	r3, r3, #8
 8001416:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	fa93 f3a3 	rbit	r3, r3
 800141e:	613b      	str	r3, [r7, #16]
  return result;
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	fab3 f383 	clz	r3, r3
 8001426:	b2db      	uxtb	r3, r3
 8001428:	4619      	mov	r1, r3
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	408b      	lsls	r3, r1
 800142e:	431a      	orrs	r2, r3
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	60da      	str	r2, [r3, #12]
}
 8001434:	bf00      	nop
 8001436:	371c      	adds	r7, #28
 8001438:	46bd      	mov	sp, r7
 800143a:	bc80      	pop	{r7}
 800143c:	4770      	bx	lr

0800143e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800143e:	b580      	push	{r7, lr}
 8001440:	b088      	sub	sp, #32
 8001442:	af00      	add	r7, sp, #0
 8001444:	6078      	str	r0, [r7, #4]
 8001446:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	021b      	lsls	r3, r3, #8
 800144e:	0c1b      	lsrs	r3, r3, #16
 8001450:	617b      	str	r3, [r7, #20]
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	fa93 f3a3 	rbit	r3, r3
 800145c:	60fb      	str	r3, [r7, #12]
  return result;
 800145e:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 8001460:	fab3 f383 	clz	r3, r3
 8001464:	b2db      	uxtb	r3, r3
 8001466:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 8001468:	e044      	b.n	80014f4 <LL_GPIO_Init+0xb6>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 800146a:	2201      	movs	r2, #1
 800146c:	69fb      	ldr	r3, [r7, #28]
 800146e:	409a      	lsls	r2, r3
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	4013      	ands	r3, r2
 8001474:	2b00      	cmp	r3, #0
 8001476:	d03a      	beq.n	80014ee <LL_GPIO_Init+0xb0>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	2b07      	cmp	r3, #7
 800147c:	d806      	bhi.n	800148c <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 800147e:	f240 1201 	movw	r2, #257	; 0x101
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	fa02 f303 	lsl.w	r3, r2, r3
 8001488:	61bb      	str	r3, [r7, #24]
 800148a:	e008      	b.n	800149e <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	3b08      	subs	r3, #8
 8001490:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8001494:	fa02 f303 	lsl.w	r3, r2, r3
 8001498:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800149c:	61bb      	str	r3, [r7, #24]
      }

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_INPUT)
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	2b08      	cmp	r3, #8
 80014a4:	d106      	bne.n	80014b4 <LL_GPIO_Init+0x76>
      {
        /* Check The Pull parameter */
        assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

        /* Pull-up Pull-down resistor configuration*/
        LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	691b      	ldr	r3, [r3, #16]
 80014aa:	461a      	mov	r2, r3
 80014ac:	69b9      	ldr	r1, [r7, #24]
 80014ae:	6878      	ldr	r0, [r7, #4]
 80014b0:	f7ff ffa3 	bl	80013fa <LL_GPIO_SetPinPull>
      
      /* Check Pin Mode parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	461a      	mov	r2, r3
 80014ba:	69b9      	ldr	r1, [r7, #24]
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	f7ff ff06 	bl	80012ce <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	2b01      	cmp	r3, #1
 80014c8:	d003      	beq.n	80014d2 <LL_GPIO_Init+0x94>
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	2b09      	cmp	r3, #9
 80014d0:	d10d      	bne.n	80014ee <LL_GPIO_Init+0xb0>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	461a      	mov	r2, r3
 80014d8:	69b9      	ldr	r1, [r7, #24]
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	f7ff ff29 	bl	8001332 <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	461a      	mov	r2, r3
 80014e6:	69b9      	ldr	r1, [r7, #24]
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	f7ff ff54 	bl	8001396 <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	3301      	adds	r3, #1
 80014f2:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 80014f4:	697a      	ldr	r2, [r7, #20]
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	fa22 f303 	lsr.w	r3, r2, r3
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d1b4      	bne.n	800146a <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 8001500:	2300      	movs	r3, #0
}
 8001502:	4618      	mov	r0, r3
 8001504:	3720      	adds	r7, #32
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
	...

0800150c <LL_RCC_GetSysClkSource>:
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001510:	4b03      	ldr	r3, [pc, #12]	; (8001520 <LL_RCC_GetSysClkSource+0x14>)
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f003 030c 	and.w	r3, r3, #12
}
 8001518:	4618      	mov	r0, r3
 800151a:	46bd      	mov	sp, r7
 800151c:	bc80      	pop	{r7}
 800151e:	4770      	bx	lr
 8001520:	40021000 	.word	0x40021000

08001524 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001528:	4b03      	ldr	r3, [pc, #12]	; (8001538 <LL_RCC_GetAHBPrescaler+0x14>)
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001530:	4618      	mov	r0, r3
 8001532:	46bd      	mov	sp, r7
 8001534:	bc80      	pop	{r7}
 8001536:	4770      	bx	lr
 8001538:	40021000 	.word	0x40021000

0800153c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001540:	4b03      	ldr	r3, [pc, #12]	; (8001550 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8001548:	4618      	mov	r0, r3
 800154a:	46bd      	mov	sp, r7
 800154c:	bc80      	pop	{r7}
 800154e:	4770      	bx	lr
 8001550:	40021000 	.word	0x40021000

08001554 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001558:	4b03      	ldr	r3, [pc, #12]	; (8001568 <LL_RCC_GetAPB2Prescaler+0x14>)
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8001560:	4618      	mov	r0, r3
 8001562:	46bd      	mov	sp, r7
 8001564:	bc80      	pop	{r7}
 8001566:	4770      	bx	lr
 8001568:	40021000 	.word	0x40021000

0800156c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_PLL2 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t pllsrc = READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);
  uint32_t predivsrc = (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC) << 4U);
  return (uint32_t)(pllsrc | predivsrc);
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8001570:	4b03      	ldr	r3, [pc, #12]	; (8001580 <LL_RCC_PLL_GetMainSource+0x14>)
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
#endif /*RCC_CFGR2_PREDIV1SRC*/
}
 8001578:	4618      	mov	r0, r3
 800157a:	46bd      	mov	sp, r7
 800157c:	bc80      	pop	{r7}
 800157e:	4770      	bx	lr
 8001580:	40021000 	.word	0x40021000

08001584 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
 8001588:	4b03      	ldr	r3, [pc, #12]	; (8001598 <LL_RCC_PLL_GetMultiplicator+0x14>)
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 8001590:	4618      	mov	r0, r3
 8001592:	46bd      	mov	sp, r7
 8001594:	bc80      	pop	{r7}
 8001596:	4770      	bx	lr
 8001598:	40021000 	.word	0x40021000

0800159c <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1));
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos);
 80015a0:	4b04      	ldr	r3, [pc, #16]	; (80015b4 <LL_RCC_PLL_GetPrediv+0x18>)
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	0c5b      	lsrs	r3, r3, #17
 80015a6:	f003 0301 	and.w	r3, r3, #1
#endif /*RCC_CFGR2_PREDIV1*/
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bc80      	pop	{r7}
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	40021000 	.word	0x40021000

080015b8 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80015c0:	f000 f820 	bl	8001604 <RCC_GetSystemClockFreq>
 80015c4:	4602      	mov	r2, r0
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4618      	mov	r0, r3
 80015d0:	f000 f83e 	bl	8001650 <RCC_GetHCLKClockFreq>
 80015d4:	4602      	mov	r2, r0
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	4618      	mov	r0, r3
 80015e0:	f000 f84c 	bl	800167c <RCC_GetPCLK1ClockFreq>
 80015e4:	4602      	mov	r2, r0
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	4618      	mov	r0, r3
 80015f0:	f000 f858 	bl	80016a4 <RCC_GetPCLK2ClockFreq>
 80015f4:	4602      	mov	r2, r0
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	60da      	str	r2, [r3, #12]
}
 80015fa:	bf00      	nop
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
	...

08001604 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800160a:	2300      	movs	r3, #0
 800160c:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800160e:	f7ff ff7d 	bl	800150c <LL_RCC_GetSysClkSource>
 8001612:	4603      	mov	r3, r0
 8001614:	2b08      	cmp	r3, #8
 8001616:	d00c      	beq.n	8001632 <RCC_GetSystemClockFreq+0x2e>
 8001618:	2b08      	cmp	r3, #8
 800161a:	d80e      	bhi.n	800163a <RCC_GetSystemClockFreq+0x36>
 800161c:	2b00      	cmp	r3, #0
 800161e:	d002      	beq.n	8001626 <RCC_GetSystemClockFreq+0x22>
 8001620:	2b04      	cmp	r3, #4
 8001622:	d003      	beq.n	800162c <RCC_GetSystemClockFreq+0x28>
 8001624:	e009      	b.n	800163a <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8001626:	4b09      	ldr	r3, [pc, #36]	; (800164c <RCC_GetSystemClockFreq+0x48>)
 8001628:	607b      	str	r3, [r7, #4]
      break;
 800162a:	e009      	b.n	8001640 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800162c:	4b07      	ldr	r3, [pc, #28]	; (800164c <RCC_GetSystemClockFreq+0x48>)
 800162e:	607b      	str	r3, [r7, #4]
      break;
 8001630:	e006      	b.n	8001640 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8001632:	f000 f84b 	bl	80016cc <RCC_PLL_GetFreqDomain_SYS>
 8001636:	6078      	str	r0, [r7, #4]
      break;
 8001638:	e002      	b.n	8001640 <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 800163a:	4b04      	ldr	r3, [pc, #16]	; (800164c <RCC_GetSystemClockFreq+0x48>)
 800163c:	607b      	str	r3, [r7, #4]
      break;
 800163e:	bf00      	nop
  }

  return frequency;
 8001640:	687b      	ldr	r3, [r7, #4]
}
 8001642:	4618      	mov	r0, r3
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	007a1200 	.word	0x007a1200

08001650 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8001658:	f7ff ff64 	bl	8001524 <LL_RCC_GetAHBPrescaler>
 800165c:	4603      	mov	r3, r0
 800165e:	091b      	lsrs	r3, r3, #4
 8001660:	f003 030f 	and.w	r3, r3, #15
 8001664:	4a04      	ldr	r2, [pc, #16]	; (8001678 <RCC_GetHCLKClockFreq+0x28>)
 8001666:	5cd3      	ldrb	r3, [r2, r3]
 8001668:	461a      	mov	r2, r3
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	40d3      	lsrs	r3, r2
}
 800166e:	4618      	mov	r0, r3
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	08004058 	.word	0x08004058

0800167c <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8001684:	f7ff ff5a 	bl	800153c <LL_RCC_GetAPB1Prescaler>
 8001688:	4603      	mov	r3, r0
 800168a:	0a1b      	lsrs	r3, r3, #8
 800168c:	4a04      	ldr	r2, [pc, #16]	; (80016a0 <RCC_GetPCLK1ClockFreq+0x24>)
 800168e:	5cd3      	ldrb	r3, [r2, r3]
 8001690:	461a      	mov	r2, r3
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	40d3      	lsrs	r3, r2
}
 8001696:	4618      	mov	r0, r3
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	08004068 	.word	0x08004068

080016a4 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80016ac:	f7ff ff52 	bl	8001554 <LL_RCC_GetAPB2Prescaler>
 80016b0:	4603      	mov	r3, r0
 80016b2:	0adb      	lsrs	r3, r3, #11
 80016b4:	4a04      	ldr	r2, [pc, #16]	; (80016c8 <RCC_GetPCLK2ClockFreq+0x24>)
 80016b6:	5cd3      	ldrb	r3, [r2, r3]
 80016b8:	461a      	mov	r2, r3
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	40d3      	lsrs	r3, r2
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3708      	adds	r7, #8
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	08004068 	.word	0x08004068

080016cc <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 80016d2:	2300      	movs	r3, #0
 80016d4:	607b      	str	r3, [r7, #4]
 80016d6:	2300      	movs	r3, #0
 80016d8:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 80016da:	f7ff ff47 	bl	800156c <LL_RCC_PLL_GetMainSource>
 80016de:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d004      	beq.n	80016f0 <RCC_PLL_GetFreqDomain_SYS+0x24>
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016ec:	d003      	beq.n	80016f6 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 80016ee:	e00b      	b.n	8001708 <RCC_PLL_GetFreqDomain_SYS+0x3c>
  {
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 80016f0:	4b0d      	ldr	r3, [pc, #52]	; (8001728 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 80016f2:	607b      	str	r3, [r7, #4]
      break;
 80016f4:	e00b      	b.n	800170e <RCC_PLL_GetFreqDomain_SYS+0x42>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
 80016f6:	f7ff ff51 	bl	800159c <LL_RCC_PLL_GetPrediv>
 80016fa:	4603      	mov	r3, r0
 80016fc:	3301      	adds	r3, #1
 80016fe:	4a0b      	ldr	r2, [pc, #44]	; (800172c <RCC_PLL_GetFreqDomain_SYS+0x60>)
 8001700:	fbb2 f3f3 	udiv	r3, r2, r3
 8001704:	607b      	str	r3, [r7, #4]
      break;
 8001706:	e002      	b.n	800170e <RCC_PLL_GetFreqDomain_SYS+0x42>
      pllinputfreq = RCC_PLL2_GetFreqClockFreq() / (LL_RCC_PLL_GetPrediv() + 1U);
      break;
#endif /* RCC_PLL2_SUPPORT */

    default:
      pllinputfreq = HSI_VALUE / 2U;
 8001708:	4b07      	ldr	r3, [pc, #28]	; (8001728 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 800170a:	607b      	str	r3, [r7, #4]
      break;
 800170c:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
 800170e:	f7ff ff39 	bl	8001584 <LL_RCC_PLL_GetMultiplicator>
 8001712:	4603      	mov	r3, r0
 8001714:	0c9b      	lsrs	r3, r3, #18
 8001716:	3302      	adds	r3, #2
 8001718:	687a      	ldr	r2, [r7, #4]
 800171a:	fb02 f303 	mul.w	r3, r2, r3
}
 800171e:	4618      	mov	r0, r3
 8001720:	3708      	adds	r7, #8
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	003d0900 	.word	0x003d0900
 800172c:	007a1200 	.word	0x007a1200

08001730 <LL_USART_IsEnabled>:
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001740:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001744:	bf0c      	ite	eq
 8001746:	2301      	moveq	r3, #1
 8001748:	2300      	movne	r3, #0
 800174a:	b2db      	uxtb	r3, r3
}
 800174c:	4618      	mov	r0, r3
 800174e:	370c      	adds	r7, #12
 8001750:	46bd      	mov	sp, r7
 8001752:	bc80      	pop	{r7}
 8001754:	4770      	bx	lr

08001756 <LL_USART_SetStopBitsLength>:
{
 8001756:	b480      	push	{r7}
 8001758:	b083      	sub	sp, #12
 800175a:	af00      	add	r7, sp, #0
 800175c:	6078      	str	r0, [r7, #4]
 800175e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	691b      	ldr	r3, [r3, #16]
 8001764:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	431a      	orrs	r2, r3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	611a      	str	r2, [r3, #16]
}
 8001770:	bf00      	nop
 8001772:	370c      	adds	r7, #12
 8001774:	46bd      	mov	sp, r7
 8001776:	bc80      	pop	{r7}
 8001778:	4770      	bx	lr

0800177a <LL_USART_SetHWFlowCtrl>:
{
 800177a:	b480      	push	{r7}
 800177c:	b083      	sub	sp, #12
 800177e:	af00      	add	r7, sp, #0
 8001780:	6078      	str	r0, [r7, #4]
 8001782:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	695b      	ldr	r3, [r3, #20]
 8001788:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	431a      	orrs	r2, r3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	615a      	str	r2, [r3, #20]
}
 8001794:	bf00      	nop
 8001796:	370c      	adds	r7, #12
 8001798:	46bd      	mov	sp, r7
 800179a:	bc80      	pop	{r7}
 800179c:	4770      	bx	lr
	...

080017a0 <LL_USART_SetBaudRate>:
{
 80017a0:	b480      	push	{r7}
 80017a2:	b085      	sub	sp, #20
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	60f8      	str	r0, [r7, #12]
 80017a8:	60b9      	str	r1, [r7, #8]
 80017aa:	607a      	str	r2, [r7, #4]
  USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80017ac:	68ba      	ldr	r2, [r7, #8]
 80017ae:	4613      	mov	r3, r2
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	4413      	add	r3, r2
 80017b4:	009a      	lsls	r2, r3, #2
 80017b6:	441a      	add	r2, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80017c0:	4a25      	ldr	r2, [pc, #148]	; (8001858 <LL_USART_SetBaudRate+0xb8>)
 80017c2:	fba2 2303 	umull	r2, r3, r2, r3
 80017c6:	095b      	lsrs	r3, r3, #5
 80017c8:	b29b      	uxth	r3, r3
 80017ca:	011b      	lsls	r3, r3, #4
 80017cc:	b299      	uxth	r1, r3
 80017ce:	68ba      	ldr	r2, [r7, #8]
 80017d0:	4613      	mov	r3, r2
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	4413      	add	r3, r2
 80017d6:	009a      	lsls	r2, r3, #2
 80017d8:	441a      	add	r2, r3
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	fbb2 f2f3 	udiv	r2, r2, r3
 80017e2:	4b1d      	ldr	r3, [pc, #116]	; (8001858 <LL_USART_SetBaudRate+0xb8>)
 80017e4:	fba3 0302 	umull	r0, r3, r3, r2
 80017e8:	095b      	lsrs	r3, r3, #5
 80017ea:	2064      	movs	r0, #100	; 0x64
 80017ec:	fb00 f303 	mul.w	r3, r0, r3
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	011b      	lsls	r3, r3, #4
 80017f4:	3332      	adds	r3, #50	; 0x32
 80017f6:	4a18      	ldr	r2, [pc, #96]	; (8001858 <LL_USART_SetBaudRate+0xb8>)
 80017f8:	fba2 2303 	umull	r2, r3, r2, r3
 80017fc:	095b      	lsrs	r3, r3, #5
 80017fe:	b29b      	uxth	r3, r3
 8001800:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001804:	b29b      	uxth	r3, r3
 8001806:	440b      	add	r3, r1
 8001808:	b299      	uxth	r1, r3
 800180a:	68ba      	ldr	r2, [r7, #8]
 800180c:	4613      	mov	r3, r2
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	4413      	add	r3, r2
 8001812:	009a      	lsls	r2, r3, #2
 8001814:	441a      	add	r2, r3
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	fbb2 f2f3 	udiv	r2, r2, r3
 800181e:	4b0e      	ldr	r3, [pc, #56]	; (8001858 <LL_USART_SetBaudRate+0xb8>)
 8001820:	fba3 0302 	umull	r0, r3, r3, r2
 8001824:	095b      	lsrs	r3, r3, #5
 8001826:	2064      	movs	r0, #100	; 0x64
 8001828:	fb00 f303 	mul.w	r3, r0, r3
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	011b      	lsls	r3, r3, #4
 8001830:	3332      	adds	r3, #50	; 0x32
 8001832:	4a09      	ldr	r2, [pc, #36]	; (8001858 <LL_USART_SetBaudRate+0xb8>)
 8001834:	fba2 2303 	umull	r2, r3, r2, r3
 8001838:	095b      	lsrs	r3, r3, #5
 800183a:	b29b      	uxth	r3, r3
 800183c:	f003 030f 	and.w	r3, r3, #15
 8001840:	b29b      	uxth	r3, r3
 8001842:	440b      	add	r3, r1
 8001844:	b29b      	uxth	r3, r3
 8001846:	461a      	mov	r2, r3
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	609a      	str	r2, [r3, #8]
}
 800184c:	bf00      	nop
 800184e:	3714      	adds	r7, #20
 8001850:	46bd      	mov	sp, r7
 8001852:	bc80      	pop	{r7}
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	51eb851f 	.word	0x51eb851f

0800185c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b088      	sub	sp, #32
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800186a:	2300      	movs	r3, #0
 800186c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
#endif /* USART_OverSampling_Feature */

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f7ff ff5e 	bl	8001730 <LL_USART_IsEnabled>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d145      	bne.n	8001906 <LL_USART_Init+0xaa>
               (USART_CR1_M | USART_CR1_PCE | USART_CR1_PS |
                USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
               (USART_InitStruct->DataWidth | USART_InitStruct->Parity |
                USART_InitStruct->TransferDirection | USART_InitStruct->OverSampling));
#else
    MODIFY_REG(USARTx->CR1,
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	68db      	ldr	r3, [r3, #12]
 800187e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001882:	f023 030c 	bic.w	r3, r3, #12
 8001886:	683a      	ldr	r2, [r7, #0]
 8001888:	6851      	ldr	r1, [r2, #4]
 800188a:	683a      	ldr	r2, [r7, #0]
 800188c:	68d2      	ldr	r2, [r2, #12]
 800188e:	4311      	orrs	r1, r2
 8001890:	683a      	ldr	r2, [r7, #0]
 8001892:	6912      	ldr	r2, [r2, #16]
 8001894:	430a      	orrs	r2, r1
 8001896:	431a      	orrs	r2, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	4619      	mov	r1, r3
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f7ff ff57 	bl	8001756 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	695b      	ldr	r3, [r3, #20]
 80018ac:	4619      	mov	r1, r3
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	f7ff ff63 	bl	800177a <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 80018b4:	f107 0308 	add.w	r3, r7, #8
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7ff fe7d 	bl	80015b8 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4a13      	ldr	r2, [pc, #76]	; (8001910 <LL_USART_Init+0xb4>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d102      	bne.n	80018cc <LL_USART_Init+0x70>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	61bb      	str	r3, [r7, #24]
 80018ca:	e00c      	b.n	80018e6 <LL_USART_Init+0x8a>
    }
    else if (USARTx == USART2)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	4a11      	ldr	r2, [pc, #68]	; (8001914 <LL_USART_Init+0xb8>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d102      	bne.n	80018da <LL_USART_Init+0x7e>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	61bb      	str	r3, [r7, #24]
 80018d8:	e005      	b.n	80018e6 <LL_USART_Init+0x8a>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4a0e      	ldr	r2, [pc, #56]	; (8001918 <LL_USART_Init+0xbc>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d101      	bne.n	80018e6 <LL_USART_Init+0x8a>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80018e6:	69bb      	ldr	r3, [r7, #24]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d00c      	beq.n	8001906 <LL_USART_Init+0xaa>
        && (USART_InitStruct->BaudRate != 0U))
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d008      	beq.n	8001906 <LL_USART_Init+0xaa>
    {
      status = SUCCESS;
 80018f4:	2300      	movs	r3, #0
 80018f6:	77fb      	strb	r3, [r7, #31]
                           USART_InitStruct->OverSampling,
                           USART_InitStruct->BaudRate);
#else
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->BaudRate);
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 80018fc:	461a      	mov	r2, r3
 80018fe:	69b9      	ldr	r1, [r7, #24]
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	f7ff ff4d 	bl	80017a0 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8001906:	7ffb      	ldrb	r3, [r7, #31]
}
 8001908:	4618      	mov	r0, r3
 800190a:	3720      	adds	r7, #32
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	40013800 	.word	0x40013800
 8001914:	40004400 	.word	0x40004400
 8001918:	40004800 	.word	0x40004800

0800191c <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
 8001924:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	fbb2 f3f3 	udiv	r3, r2, r3
 800192e:	4a07      	ldr	r2, [pc, #28]	; (800194c <LL_InitTick+0x30>)
 8001930:	3b01      	subs	r3, #1
 8001932:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8001934:	4b05      	ldr	r3, [pc, #20]	; (800194c <LL_InitTick+0x30>)
 8001936:	2200      	movs	r2, #0
 8001938:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800193a:	4b04      	ldr	r3, [pc, #16]	; (800194c <LL_InitTick+0x30>)
 800193c:	2205      	movs	r2, #5
 800193e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8001940:	bf00      	nop
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	bc80      	pop	{r7}
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	e000e010 	.word	0xe000e010

08001950 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8001958:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	f7ff ffdd 	bl	800191c <LL_InitTick>
}
 8001962:	bf00      	nop
 8001964:	3708      	adds	r7, #8
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
	...

0800196c <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8001974:	4a03      	ldr	r2, [pc, #12]	; (8001984 <LL_SetSystemCoreClock+0x18>)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6013      	str	r3, [r2, #0]
}
 800197a:	bf00      	nop
 800197c:	370c      	adds	r7, #12
 800197e:	46bd      	mov	sp, r7
 8001980:	bc80      	pop	{r7}
 8001982:	4770      	bx	lr
 8001984:	20000000 	.word	0x20000000

08001988 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	f103 0208 	add.w	r2, r3, #8
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	f04f 32ff 	mov.w	r2, #4294967295
 80019a0:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	f103 0208 	add.w	r2, r3, #8
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	f103 0208 	add.w	r2, r3, #8
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2200      	movs	r2, #0
 80019ba:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80019bc:	bf00      	nop
 80019be:	370c      	adds	r7, #12
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bc80      	pop	{r7}
 80019c4:	4770      	bx	lr

080019c6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80019c6:	b480      	push	{r7}
 80019c8:	b083      	sub	sp, #12
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2200      	movs	r2, #0
 80019d2:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80019d4:	bf00      	nop
 80019d6:	370c      	adds	r7, #12
 80019d8:	46bd      	mov	sp, r7
 80019da:	bc80      	pop	{r7}
 80019dc:	4770      	bx	lr

080019de <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80019de:	b480      	push	{r7}
 80019e0:	b085      	sub	sp, #20
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
 80019e6:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019f4:	d103      	bne.n	80019fe <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	691b      	ldr	r3, [r3, #16]
 80019fa:	60fb      	str	r3, [r7, #12]
 80019fc:	e00c      	b.n	8001a18 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	3308      	adds	r3, #8
 8001a02:	60fb      	str	r3, [r7, #12]
 8001a04:	e002      	b.n	8001a0c <vListInsert+0x2e>
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	60fb      	str	r3, [r7, #12]
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	68ba      	ldr	r2, [r7, #8]
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d2f6      	bcs.n	8001a06 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	685a      	ldr	r2, [r3, #4]
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	683a      	ldr	r2, [r7, #0]
 8001a26:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	68fa      	ldr	r2, [r7, #12]
 8001a2c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	683a      	ldr	r2, [r7, #0]
 8001a32:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	1c5a      	adds	r2, r3, #1
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	601a      	str	r2, [r3, #0]
}
 8001a44:	bf00      	nop
 8001a46:	3714      	adds	r7, #20
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bc80      	pop	{r7}
 8001a4c:	4770      	bx	lr

08001a4e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001a4e:	b480      	push	{r7}
 8001a50:	b085      	sub	sp, #20
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	691b      	ldr	r3, [r3, #16]
 8001a5a:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	687a      	ldr	r2, [r7, #4]
 8001a62:	6892      	ldr	r2, [r2, #8]
 8001a64:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	687a      	ldr	r2, [r7, #4]
 8001a6c:	6852      	ldr	r2, [r2, #4]
 8001a6e:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	687a      	ldr	r2, [r7, #4]
 8001a76:	429a      	cmp	r2, r3
 8001a78:	d103      	bne.n	8001a82 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	689a      	ldr	r2, [r3, #8]
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2200      	movs	r2, #0
 8001a86:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	1e5a      	subs	r2, r3, #1
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3714      	adds	r7, #20
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bc80      	pop	{r7}
 8001a9e:	4770      	bx	lr

08001aa0 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	60bb      	str	r3, [r7, #8]

    configASSERT( pxQueue );

    if( ( pxQueue != NULL ) &&
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d05d      	beq.n	8001b74 <xQueueGenericReset+0xd4>
        ( pxQueue->uxLength >= 1U ) &&
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d059      	beq.n	8001b74 <xQueueGenericReset+0xd4>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ac8:	2100      	movs	r1, #0
 8001aca:	fba3 2302 	umull	r2, r3, r3, r2
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d000      	beq.n	8001ad4 <xQueueGenericReset+0x34>
 8001ad2:	2101      	movs	r1, #1
 8001ad4:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d14c      	bne.n	8001b74 <xQueueGenericReset+0xd4>
    {
        taskENTER_CRITICAL();
 8001ada:	f001 fbdf 	bl	800329c <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ae6:	68b9      	ldr	r1, [r7, #8]
 8001ae8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001aea:	fb01 f303 	mul.w	r3, r1, r3
 8001aee:	441a      	add	r2, r3
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	2200      	movs	r2, #0
 8001af8:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b0a:	3b01      	subs	r3, #1
 8001b0c:	68b9      	ldr	r1, [r7, #8]
 8001b0e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001b10:	fb01 f303 	mul.w	r3, r1, r3
 8001b14:	441a      	add	r2, r3
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	22ff      	movs	r2, #255	; 0xff
 8001b1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	22ff      	movs	r2, #255	; 0xff
 8001b26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d114      	bne.n	8001b5a <xQueueGenericReset+0xba>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	691b      	ldr	r3, [r3, #16]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d01a      	beq.n	8001b6e <xQueueGenericReset+0xce>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	3310      	adds	r3, #16
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f001 f839 	bl	8002bb4 <xTaskRemoveFromEventList>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d012      	beq.n	8001b6e <xQueueGenericReset+0xce>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8001b48:	4b0e      	ldr	r3, [pc, #56]	; (8001b84 <xQueueGenericReset+0xe4>)
 8001b4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b4e:	601a      	str	r2, [r3, #0]
 8001b50:	f3bf 8f4f 	dsb	sy
 8001b54:	f3bf 8f6f 	isb	sy
 8001b58:	e009      	b.n	8001b6e <xQueueGenericReset+0xce>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	3310      	adds	r3, #16
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7ff ff12 	bl	8001988 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	3324      	adds	r3, #36	; 0x24
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7ff ff0d 	bl	8001988 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8001b6e:	f001 fbaf 	bl	80032d0 <vPortExitCritical>
 8001b72:	e001      	b.n	8001b78 <xQueueGenericReset+0xd8>
    }
    else
    {
        xReturn = pdFAIL;
 8001b74:	2300      	movs	r3, #0
 8001b76:	60fb      	str	r3, [r7, #12]

    configASSERT( xReturn != pdFAIL );

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8001b78:	68fb      	ldr	r3, [r7, #12]
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3710      	adds	r7, #16
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	e000ed04 	.word	0xe000ed04

08001b88 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b08a      	sub	sp, #40	; 0x28
 8001b8c:	af02      	add	r7, sp, #8
 8001b8e:	60f8      	str	r0, [r7, #12]
 8001b90:	60b9      	str	r1, [r7, #8]
 8001b92:	4613      	mov	r3, r2
 8001b94:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8001b96:	2300      	movs	r3, #0
 8001b98:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d02d      	beq.n	8001bfc <xQueueGenericCreate+0x74>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8001ba0:	2100      	movs	r1, #0
 8001ba2:	68ba      	ldr	r2, [r7, #8]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	fba3 2302 	umull	r2, r3, r3, r2
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d000      	beq.n	8001bb0 <xQueueGenericCreate+0x28>
 8001bae:	2101      	movs	r1, #1
 8001bb0:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d122      	bne.n	8001bfc <xQueueGenericCreate+0x74>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	68ba      	ldr	r2, [r7, #8]
 8001bba:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8001bbe:	f113 0f49 	cmn.w	r3, #73	; 0x49
 8001bc2:	d81b      	bhi.n	8001bfc <xQueueGenericCreate+0x74>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	68ba      	ldr	r2, [r7, #8]
 8001bc8:	fb02 f303 	mul.w	r3, r2, r3
 8001bcc:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8001bce:	69bb      	ldr	r3, [r7, #24]
 8001bd0:	3348      	adds	r3, #72	; 0x48
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f001 fbfc 	bl	80033d0 <pvPortMalloc>
 8001bd8:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d00d      	beq.n	8001bfc <xQueueGenericCreate+0x74>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	3348      	adds	r3, #72	; 0x48
 8001be8:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001bea:	79fa      	ldrb	r2, [r7, #7]
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	9300      	str	r3, [sp, #0]
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	697a      	ldr	r2, [r7, #20]
 8001bf4:	68b9      	ldr	r1, [r7, #8]
 8001bf6:	68f8      	ldr	r0, [r7, #12]
 8001bf8:	f000 f805 	bl	8001c06 <prvInitialiseNewQueue>
        {
            configASSERT( pxNewQueue );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8001bfc:	69fb      	ldr	r3, [r7, #28]
    }
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3720      	adds	r7, #32
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8001c06:	b580      	push	{r7, lr}
 8001c08:	b084      	sub	sp, #16
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	60f8      	str	r0, [r7, #12]
 8001c0e:	60b9      	str	r1, [r7, #8]
 8001c10:	607a      	str	r2, [r7, #4]
 8001c12:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d103      	bne.n	8001c22 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001c1a:	69bb      	ldr	r3, [r7, #24]
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	601a      	str	r2, [r3, #0]
 8001c20:	e002      	b.n	8001c28 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001c22:	69bb      	ldr	r3, [r7, #24]
 8001c24:	687a      	ldr	r2, [r7, #4]
 8001c26:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8001c28:	69bb      	ldr	r3, [r7, #24]
 8001c2a:	68fa      	ldr	r2, [r7, #12]
 8001c2c:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8001c2e:	69bb      	ldr	r3, [r7, #24]
 8001c30:	68ba      	ldr	r2, [r7, #8]
 8001c32:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001c34:	2101      	movs	r1, #1
 8001c36:	69b8      	ldr	r0, [r7, #24]
 8001c38:	f7ff ff32 	bl	8001aa0 <xQueueGenericReset>
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8001c3c:	bf00      	nop
 8001c3e:	3710      	adds	r7, #16
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}

08001c44 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static void prvInitialiseMutex( Queue_t * pxNewQueue )
    {
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
        if( pxNewQueue != NULL )
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d00e      	beq.n	8001c70 <prvInitialiseMutex+0x2c>
        {
            /* The queue create function will set all the queue structure members
            * correctly for a generic queue, but this function is creating a
            * mutex.  Overwrite those members that need to be set differently -
            * in particular the information required for priority inheritance. */
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2200      	movs	r2, #0
 8001c56:	609a      	str	r2, [r3, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	601a      	str	r2, [r3, #0]

            /* In case this is a recursive mutex. */
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2200      	movs	r2, #0
 8001c62:	60da      	str	r2, [r3, #12]

            traceCREATE_MUTEX( pxNewQueue );

            /* Start with the semaphore in the expected state. */
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8001c64:	2300      	movs	r3, #0
 8001c66:	2200      	movs	r2, #0
 8001c68:	2100      	movs	r1, #0
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f000 f81c 	bl	8001ca8 <xQueueGenericSend>
        }
        else
        {
            traceCREATE_MUTEX_FAILED();
        }
    }
 8001c70:	bf00      	nop
 8001c72:	3708      	adds	r7, #8
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}

08001c78 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
    {
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b086      	sub	sp, #24
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	4603      	mov	r3, r0
 8001c80:	71fb      	strb	r3, [r7, #7]
        QueueHandle_t xNewQueue;
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8001c82:	2301      	movs	r3, #1
 8001c84:	617b      	str	r3, [r7, #20]
 8001c86:	2300      	movs	r3, #0
 8001c88:	613b      	str	r3, [r7, #16]

        xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8001c8a:	79fb      	ldrb	r3, [r7, #7]
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	6939      	ldr	r1, [r7, #16]
 8001c90:	6978      	ldr	r0, [r7, #20]
 8001c92:	f7ff ff79 	bl	8001b88 <xQueueGenericCreate>
 8001c96:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8001c98:	68f8      	ldr	r0, [r7, #12]
 8001c9a:	f7ff ffd3 	bl	8001c44 <prvInitialiseMutex>

        return xNewQueue;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
    }
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3718      	adds	r7, #24
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}

08001ca8 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b08a      	sub	sp, #40	; 0x28
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	60f8      	str	r0, [r7, #12]
 8001cb0:	60b9      	str	r1, [r7, #8]
 8001cb2:	607a      	str	r2, [r7, #4]
 8001cb4:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	623b      	str	r3, [r7, #32]
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8001cbe:	f001 faed 	bl	800329c <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001cc2:	6a3b      	ldr	r3, [r7, #32]
 8001cc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001cc6:	6a3b      	ldr	r3, [r7, #32]
 8001cc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d302      	bcc.n	8001cd4 <xQueueGenericSend+0x2c>
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	2b02      	cmp	r3, #2
 8001cd2:	d129      	bne.n	8001d28 <xQueueGenericSend+0x80>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001cd4:	683a      	ldr	r2, [r7, #0]
 8001cd6:	68b9      	ldr	r1, [r7, #8]
 8001cd8:	6a38      	ldr	r0, [r7, #32]
 8001cda:	f000 fa54 	bl	8002186 <prvCopyDataToQueue>
 8001cde:	61f8      	str	r0, [r7, #28]

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001ce0:	6a3b      	ldr	r3, [r7, #32]
 8001ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d010      	beq.n	8001d0a <xQueueGenericSend+0x62>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001ce8:	6a3b      	ldr	r3, [r7, #32]
 8001cea:	3324      	adds	r3, #36	; 0x24
 8001cec:	4618      	mov	r0, r3
 8001cee:	f000 ff61 	bl	8002bb4 <xTaskRemoveFromEventList>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d013      	beq.n	8001d20 <xQueueGenericSend+0x78>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 8001cf8:	4b3f      	ldr	r3, [pc, #252]	; (8001df8 <xQueueGenericSend+0x150>)
 8001cfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001cfe:	601a      	str	r2, [r3, #0]
 8001d00:	f3bf 8f4f 	dsb	sy
 8001d04:	f3bf 8f6f 	isb	sy
 8001d08:	e00a      	b.n	8001d20 <xQueueGenericSend+0x78>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d007      	beq.n	8001d20 <xQueueGenericSend+0x78>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 8001d10:	4b39      	ldr	r3, [pc, #228]	; (8001df8 <xQueueGenericSend+0x150>)
 8001d12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d16:	601a      	str	r2, [r3, #0]
 8001d18:	f3bf 8f4f 	dsb	sy
 8001d1c:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8001d20:	f001 fad6 	bl	80032d0 <vPortExitCritical>
                return pdPASS;
 8001d24:	2301      	movs	r3, #1
 8001d26:	e063      	b.n	8001df0 <xQueueGenericSend+0x148>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d103      	bne.n	8001d36 <xQueueGenericSend+0x8e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8001d2e:	f001 facf 	bl	80032d0 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8001d32:	2300      	movs	r3, #0
 8001d34:	e05c      	b.n	8001df0 <xQueueGenericSend+0x148>
                }
                else if( xEntryTimeSet == pdFALSE )
 8001d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d106      	bne.n	8001d4a <xQueueGenericSend+0xa2>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8001d3c:	f107 0314 	add.w	r3, r7, #20
 8001d40:	4618      	mov	r0, r3
 8001d42:	f000 ffff 	bl	8002d44 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8001d46:	2301      	movs	r3, #1
 8001d48:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8001d4a:	f001 fac1 	bl	80032d0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8001d4e:	f000 fccb 	bl	80026e8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8001d52:	f001 faa3 	bl	800329c <vPortEnterCritical>
 8001d56:	6a3b      	ldr	r3, [r7, #32]
 8001d58:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001d5c:	b25b      	sxtb	r3, r3
 8001d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d62:	d103      	bne.n	8001d6c <xQueueGenericSend+0xc4>
 8001d64:	6a3b      	ldr	r3, [r7, #32]
 8001d66:	2200      	movs	r2, #0
 8001d68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d6c:	6a3b      	ldr	r3, [r7, #32]
 8001d6e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001d72:	b25b      	sxtb	r3, r3
 8001d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d78:	d103      	bne.n	8001d82 <xQueueGenericSend+0xda>
 8001d7a:	6a3b      	ldr	r3, [r7, #32]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001d82:	f001 faa5 	bl	80032d0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001d86:	1d3a      	adds	r2, r7, #4
 8001d88:	f107 0314 	add.w	r3, r7, #20
 8001d8c:	4611      	mov	r1, r2
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f000 ffee 	bl	8002d70 <xTaskCheckForTimeOut>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d124      	bne.n	8001de4 <xQueueGenericSend+0x13c>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001d9a:	6a38      	ldr	r0, [r7, #32]
 8001d9c:	f000 faeb 	bl	8002376 <prvIsQueueFull>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d018      	beq.n	8001dd8 <xQueueGenericSend+0x130>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001da6:	6a3b      	ldr	r3, [r7, #32]
 8001da8:	3310      	adds	r3, #16
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	4611      	mov	r1, r2
 8001dae:	4618      	mov	r0, r3
 8001db0:	f000 feea 	bl	8002b88 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8001db4:	6a38      	ldr	r0, [r7, #32]
 8001db6:	f000 fa76 	bl	80022a6 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8001dba:	f000 fca3 	bl	8002704 <xTaskResumeAll>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	f47f af7c 	bne.w	8001cbe <xQueueGenericSend+0x16>
                {
                    portYIELD_WITHIN_API();
 8001dc6:	4b0c      	ldr	r3, [pc, #48]	; (8001df8 <xQueueGenericSend+0x150>)
 8001dc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001dcc:	601a      	str	r2, [r3, #0]
 8001dce:	f3bf 8f4f 	dsb	sy
 8001dd2:	f3bf 8f6f 	isb	sy
 8001dd6:	e772      	b.n	8001cbe <xQueueGenericSend+0x16>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8001dd8:	6a38      	ldr	r0, [r7, #32]
 8001dda:	f000 fa64 	bl	80022a6 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8001dde:	f000 fc91 	bl	8002704 <xTaskResumeAll>
 8001de2:	e76c      	b.n	8001cbe <xQueueGenericSend+0x16>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8001de4:	6a38      	ldr	r0, [r7, #32]
 8001de6:	f000 fa5e 	bl	80022a6 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8001dea:	f000 fc8b 	bl	8002704 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8001dee:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3728      	adds	r7, #40	; 0x28
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	e000ed04 	.word	0xe000ed04

08001dfc <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b08e      	sub	sp, #56	; 0x38
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	60f8      	str	r0, [r7, #12]
 8001e04:	60b9      	str	r1, [r7, #8]
 8001e06:	607a      	str	r2, [r7, #4]
 8001e08:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	633b      	str	r3, [r7, #48]	; 0x30

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8001e0e:	f3ef 8211 	mrs	r2, BASEPRI
 8001e12:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8001e16:	f383 8811 	msr	BASEPRI, r3
 8001e1a:	f3bf 8f6f 	isb	sy
 8001e1e:	f3bf 8f4f 	dsb	sy
 8001e22:	61fa      	str	r2, [r7, #28]
 8001e24:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8001e26:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001e28:	62fb      	str	r3, [r7, #44]	; 0x2c
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d302      	bcc.n	8001e3c <xQueueGenericSendFromISR+0x40>
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	d137      	bne.n	8001eac <xQueueGenericSendFromISR+0xb0>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8001e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e3e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001e42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e4a:	627b      	str	r3, [r7, #36]	; 0x24
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001e4c:	683a      	ldr	r2, [r7, #0]
 8001e4e:	68b9      	ldr	r1, [r7, #8]
 8001e50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001e52:	f000 f998 	bl	8002186 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8001e56:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8001e5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e5e:	d112      	bne.n	8001e86 <xQueueGenericSendFromISR+0x8a>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d01e      	beq.n	8001ea6 <xQueueGenericSendFromISR+0xaa>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e6a:	3324      	adds	r3, #36	; 0x24
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f000 fea1 	bl	8002bb4 <xTaskRemoveFromEventList>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d016      	beq.n	8001ea6 <xQueueGenericSendFromISR+0xaa>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d013      	beq.n	8001ea6 <xQueueGenericSendFromISR+0xaa>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2201      	movs	r2, #1
 8001e82:	601a      	str	r2, [r3, #0]
 8001e84:	e00f      	b.n	8001ea6 <xQueueGenericSendFromISR+0xaa>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 8001e86:	f000 fd29 	bl	80028dc <uxTaskGetNumberOfTasks>
 8001e8a:	6238      	str	r0, [r7, #32]
 8001e8c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8001e90:	6a3a      	ldr	r2, [r7, #32]
 8001e92:	429a      	cmp	r2, r3
 8001e94:	d907      	bls.n	8001ea6 <xQueueGenericSendFromISR+0xaa>
 8001e96:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001e9a:	3301      	adds	r3, #1
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	b25a      	sxtb	r2, r3
 8001ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ea2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	637b      	str	r3, [r7, #52]	; 0x34
        {
 8001eaa:	e001      	b.n	8001eb0 <xQueueGenericSendFromISR+0xb4>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8001eac:	2300      	movs	r3, #0
 8001eae:	637b      	str	r3, [r7, #52]	; 0x34
 8001eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eb2:	617b      	str	r3, [r7, #20]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8001eba:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8001ebc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3738      	adds	r7, #56	; 0x38
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}

08001ec6 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue,
                              BaseType_t * const pxHigherPriorityTaskWoken )
{
 8001ec6:	b580      	push	{r7, lr}
 8001ec8:	b08c      	sub	sp, #48	; 0x30
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	6078      	str	r0, [r7, #4]
 8001ece:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	62bb      	str	r3, [r7, #40]	; 0x28
        __asm volatile
 8001ed4:	f3ef 8211 	mrs	r2, BASEPRI
 8001ed8:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8001edc:	f383 8811 	msr	BASEPRI, r3
 8001ee0:	f3bf 8f6f 	isb	sy
 8001ee4:	f3bf 8f4f 	dsb	sy
 8001ee8:	617a      	str	r2, [r7, #20]
 8001eea:	613b      	str	r3, [r7, #16]
        return ulOriginalBASEPRI;
 8001eec:	697b      	ldr	r3, [r7, #20]
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001eee:	627b      	str	r3, [r7, #36]	; 0x24
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ef4:	623b      	str	r3, [r7, #32]

        /* When the queue is used to implement a semaphore no data is ever
         * moved through the queue but it is still valid to see if the queue 'has
         * space'. */
        if( uxMessagesWaiting < pxQueue->uxLength )
 8001ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ef8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001efa:	6a3a      	ldr	r2, [r7, #32]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d231      	bcs.n	8001f64 <xQueueGiveFromISR+0x9e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8001f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f02:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001f06:	77fb      	strb	r3, [r7, #31]
             * holder - and if there is a mutex holder then the mutex cannot be
             * given from an ISR.  As this is the ISR version of the function it
             * can be assumed there is no mutex holder and no need to determine if
             * priority disinheritance is needed.  Simply increase the count of
             * messages (semaphores) available. */
            pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001f08:	6a3b      	ldr	r3, [r7, #32]
 8001f0a:	1c5a      	adds	r2, r3, #1
 8001f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f0e:	639a      	str	r2, [r3, #56]	; 0x38

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8001f10:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f18:	d112      	bne.n	8001f40 <xQueueGiveFromISR+0x7a>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d01d      	beq.n	8001f5e <xQueueGiveFromISR+0x98>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f24:	3324      	adds	r3, #36	; 0x24
 8001f26:	4618      	mov	r0, r3
 8001f28:	f000 fe44 	bl	8002bb4 <xTaskRemoveFromEventList>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d015      	beq.n	8001f5e <xQueueGiveFromISR+0x98>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d012      	beq.n	8001f5e <xQueueGiveFromISR+0x98>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	601a      	str	r2, [r3, #0]
 8001f3e:	e00e      	b.n	8001f5e <xQueueGiveFromISR+0x98>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 8001f40:	f000 fccc 	bl	80028dc <uxTaskGetNumberOfTasks>
 8001f44:	61b8      	str	r0, [r7, #24]
 8001f46:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001f4a:	69ba      	ldr	r2, [r7, #24]
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d906      	bls.n	8001f5e <xQueueGiveFromISR+0x98>
 8001f50:	7ffb      	ldrb	r3, [r7, #31]
 8001f52:	3301      	adds	r3, #1
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	b25a      	sxtb	r2, r3
 8001f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f62:	e001      	b.n	8001f68 <xQueueGiveFromISR+0xa2>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8001f64:	2300      	movs	r3, #0
 8001f66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6a:	60fb      	str	r3, [r7, #12]
        __asm volatile
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	f383 8811 	msr	BASEPRI, r3
    }
 8001f72:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8001f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3730      	adds	r7, #48	; 0x30
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
	...

08001f80 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b08a      	sub	sp, #40	; 0x28
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	60f8      	str	r0, [r7, #12]
 8001f88:	60b9      	str	r1, [r7, #8]
 8001f8a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	623b      	str	r3, [r7, #32]
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8001f94:	f001 f982 	bl	800329c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001f98:	6a3b      	ldr	r3, [r7, #32]
 8001f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f9c:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d01f      	beq.n	8001fe4 <xQueueReceive+0x64>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001fa4:	68b9      	ldr	r1, [r7, #8]
 8001fa6:	6a38      	ldr	r0, [r7, #32]
 8001fa8:	f000 f957 	bl	800225a <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	1e5a      	subs	r2, r3, #1
 8001fb0:	6a3b      	ldr	r3, [r7, #32]
 8001fb2:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001fb4:	6a3b      	ldr	r3, [r7, #32]
 8001fb6:	691b      	ldr	r3, [r3, #16]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d00f      	beq.n	8001fdc <xQueueReceive+0x5c>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001fbc:	6a3b      	ldr	r3, [r7, #32]
 8001fbe:	3310      	adds	r3, #16
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f000 fdf7 	bl	8002bb4 <xTaskRemoveFromEventList>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d007      	beq.n	8001fdc <xQueueReceive+0x5c>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8001fcc:	4b3c      	ldr	r3, [pc, #240]	; (80020c0 <xQueueReceive+0x140>)
 8001fce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001fd2:	601a      	str	r2, [r3, #0]
 8001fd4:	f3bf 8f4f 	dsb	sy
 8001fd8:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8001fdc:	f001 f978 	bl	80032d0 <vPortExitCritical>
                return pdPASS;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e069      	b.n	80020b8 <xQueueReceive+0x138>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d103      	bne.n	8001ff2 <xQueueReceive+0x72>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8001fea:	f001 f971 	bl	80032d0 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	e062      	b.n	80020b8 <xQueueReceive+0x138>
                }
                else if( xEntryTimeSet == pdFALSE )
 8001ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d106      	bne.n	8002006 <xQueueReceive+0x86>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8001ff8:	f107 0314 	add.w	r3, r7, #20
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f000 fea1 	bl	8002d44 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002002:	2301      	movs	r3, #1
 8002004:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002006:	f001 f963 	bl	80032d0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800200a:	f000 fb6d 	bl	80026e8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800200e:	f001 f945 	bl	800329c <vPortEnterCritical>
 8002012:	6a3b      	ldr	r3, [r7, #32]
 8002014:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002018:	b25b      	sxtb	r3, r3
 800201a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800201e:	d103      	bne.n	8002028 <xQueueReceive+0xa8>
 8002020:	6a3b      	ldr	r3, [r7, #32]
 8002022:	2200      	movs	r2, #0
 8002024:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002028:	6a3b      	ldr	r3, [r7, #32]
 800202a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800202e:	b25b      	sxtb	r3, r3
 8002030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002034:	d103      	bne.n	800203e <xQueueReceive+0xbe>
 8002036:	6a3b      	ldr	r3, [r7, #32]
 8002038:	2200      	movs	r2, #0
 800203a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800203e:	f001 f947 	bl	80032d0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002042:	1d3a      	adds	r2, r7, #4
 8002044:	f107 0314 	add.w	r3, r7, #20
 8002048:	4611      	mov	r1, r2
 800204a:	4618      	mov	r0, r3
 800204c:	f000 fe90 	bl	8002d70 <xTaskCheckForTimeOut>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d123      	bne.n	800209e <xQueueReceive+0x11e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002056:	6a38      	ldr	r0, [r7, #32]
 8002058:	f000 f977 	bl	800234a <prvIsQueueEmpty>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d017      	beq.n	8002092 <xQueueReceive+0x112>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002062:	6a3b      	ldr	r3, [r7, #32]
 8002064:	3324      	adds	r3, #36	; 0x24
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	4611      	mov	r1, r2
 800206a:	4618      	mov	r0, r3
 800206c:	f000 fd8c 	bl	8002b88 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002070:	6a38      	ldr	r0, [r7, #32]
 8002072:	f000 f918 	bl	80022a6 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002076:	f000 fb45 	bl	8002704 <xTaskResumeAll>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d189      	bne.n	8001f94 <xQueueReceive+0x14>
                {
                    portYIELD_WITHIN_API();
 8002080:	4b0f      	ldr	r3, [pc, #60]	; (80020c0 <xQueueReceive+0x140>)
 8002082:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002086:	601a      	str	r2, [r3, #0]
 8002088:	f3bf 8f4f 	dsb	sy
 800208c:	f3bf 8f6f 	isb	sy
 8002090:	e780      	b.n	8001f94 <xQueueReceive+0x14>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002092:	6a38      	ldr	r0, [r7, #32]
 8002094:	f000 f907 	bl	80022a6 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002098:	f000 fb34 	bl	8002704 <xTaskResumeAll>
 800209c:	e77a      	b.n	8001f94 <xQueueReceive+0x14>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800209e:	6a38      	ldr	r0, [r7, #32]
 80020a0:	f000 f901 	bl	80022a6 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80020a4:	f000 fb2e 	bl	8002704 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80020a8:	6a38      	ldr	r0, [r7, #32]
 80020aa:	f000 f94e 	bl	800234a <prvIsQueueEmpty>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	f43f af6f 	beq.w	8001f94 <xQueueReceive+0x14>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80020b6:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3728      	adds	r7, #40	; 0x28
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	e000ed04 	.word	0xe000ed04

080020c4 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b08e      	sub	sp, #56	; 0x38
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	60f8      	str	r0, [r7, #12]
 80020cc:	60b9      	str	r1, [r7, #8]
 80020ce:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	633b      	str	r3, [r7, #48]	; 0x30
        __asm volatile
 80020d4:	f3ef 8211 	mrs	r2, BASEPRI
 80020d8:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80020dc:	f383 8811 	msr	BASEPRI, r3
 80020e0:	f3bf 8f6f 	isb	sy
 80020e4:	f3bf 8f4f 	dsb	sy
 80020e8:	61fa      	str	r2, [r7, #28]
 80020ea:	61bb      	str	r3, [r7, #24]
        return ulOriginalBASEPRI;
 80020ec:	69fb      	ldr	r3, [r7, #28]
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80020ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80020f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020f4:	62bb      	str	r3, [r7, #40]	; 0x28

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80020f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d037      	beq.n	800216c <xQueueReceiveFromISR+0xa8>
        {
            const int8_t cRxLock = pxQueue->cRxLock;
 80020fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002102:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

            prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002106:	68b9      	ldr	r1, [r7, #8]
 8002108:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800210a:	f000 f8a6 	bl	800225a <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800210e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002110:	1e5a      	subs	r2, r3, #1
 8002112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002114:	639a      	str	r2, [r3, #56]	; 0x38

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
 8002116:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800211a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800211e:	d112      	bne.n	8002146 <xQueueReceiveFromISR+0x82>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002122:	691b      	ldr	r3, [r3, #16]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d01e      	beq.n	8002166 <xQueueReceiveFromISR+0xa2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800212a:	3310      	adds	r3, #16
 800212c:	4618      	mov	r0, r3
 800212e:	f000 fd41 	bl	8002bb4 <xTaskRemoveFromEventList>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d016      	beq.n	8002166 <xQueueReceiveFromISR+0xa2>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d013      	beq.n	8002166 <xQueueReceiveFromISR+0xa2>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2201      	movs	r2, #1
 8002142:	601a      	str	r2, [r3, #0]
 8002144:	e00f      	b.n	8002166 <xQueueReceiveFromISR+0xa2>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                prvIncrementQueueRxLock( pxQueue, cRxLock );
 8002146:	f000 fbc9 	bl	80028dc <uxTaskGetNumberOfTasks>
 800214a:	6238      	str	r0, [r7, #32]
 800214c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002150:	6a3a      	ldr	r2, [r7, #32]
 8002152:	429a      	cmp	r2, r3
 8002154:	d907      	bls.n	8002166 <xQueueReceiveFromISR+0xa2>
 8002156:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800215a:	3301      	adds	r3, #1
 800215c:	b2db      	uxtb	r3, r3
 800215e:	b25a      	sxtb	r2, r3
 8002160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002162:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            }

            xReturn = pdPASS;
 8002166:	2301      	movs	r3, #1
 8002168:	637b      	str	r3, [r7, #52]	; 0x34
 800216a:	e001      	b.n	8002170 <xQueueReceiveFromISR+0xac>
        }
        else
        {
            xReturn = pdFAIL;
 800216c:	2300      	movs	r3, #0
 800216e:	637b      	str	r3, [r7, #52]	; 0x34
 8002170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002172:	617b      	str	r3, [r7, #20]
        __asm volatile
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	f383 8811 	msr	BASEPRI, r3
    }
 800217a:	bf00      	nop
            traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800217c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800217e:	4618      	mov	r0, r3
 8002180:	3738      	adds	r7, #56	; 0x38
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}

08002186 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002186:	b580      	push	{r7, lr}
 8002188:	b086      	sub	sp, #24
 800218a:	af00      	add	r7, sp, #0
 800218c:	60f8      	str	r0, [r7, #12]
 800218e:	60b9      	str	r1, [r7, #8]
 8002190:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002192:	2300      	movs	r3, #0
 8002194:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800219a:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d10d      	bne.n	80021c0 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d14d      	bne.n	8002248 <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	4618      	mov	r0, r3
 80021b2:	f000 fee3 	bl	8002f7c <xTaskPriorityDisinherit>
 80021b6:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2200      	movs	r2, #0
 80021bc:	609a      	str	r2, [r3, #8]
 80021be:	e043      	b.n	8002248 <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d119      	bne.n	80021fa <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	6858      	ldr	r0, [r3, #4]
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ce:	461a      	mov	r2, r3
 80021d0:	68b9      	ldr	r1, [r7, #8]
 80021d2:	f001 fef1 	bl	8003fb8 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	685a      	ldr	r2, [r3, #4]
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021de:	441a      	add	r2, r3
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	685a      	ldr	r2, [r3, #4]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d32b      	bcc.n	8002248 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	605a      	str	r2, [r3, #4]
 80021f8:	e026      	b.n	8002248 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	68d8      	ldr	r0, [r3, #12]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002202:	461a      	mov	r2, r3
 8002204:	68b9      	ldr	r1, [r7, #8]
 8002206:	f001 fed7 	bl	8003fb8 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	68da      	ldr	r2, [r3, #12]
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002212:	425b      	negs	r3, r3
 8002214:	441a      	add	r2, r3
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	68da      	ldr	r2, [r3, #12]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	429a      	cmp	r2, r3
 8002224:	d207      	bcs.n	8002236 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	689a      	ldr	r2, [r3, #8]
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222e:	425b      	negs	r3, r3
 8002230:	441a      	add	r2, r3
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2b02      	cmp	r3, #2
 800223a:	d105      	bne.n	8002248 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d002      	beq.n	8002248 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	3b01      	subs	r3, #1
 8002246:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	1c5a      	adds	r2, r3, #1
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8002250:	697b      	ldr	r3, [r7, #20]
}
 8002252:	4618      	mov	r0, r3
 8002254:	3718      	adds	r7, #24
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}

0800225a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800225a:	b580      	push	{r7, lr}
 800225c:	b082      	sub	sp, #8
 800225e:	af00      	add	r7, sp, #0
 8002260:	6078      	str	r0, [r7, #4]
 8002262:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002268:	2b00      	cmp	r3, #0
 800226a:	d018      	beq.n	800229e <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	68da      	ldr	r2, [r3, #12]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002274:	441a      	add	r2, r3
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	68da      	ldr	r2, [r3, #12]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	429a      	cmp	r2, r3
 8002284:	d303      	bcc.n	800228e <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	68d9      	ldr	r1, [r3, #12]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002296:	461a      	mov	r2, r3
 8002298:	6838      	ldr	r0, [r7, #0]
 800229a:	f001 fe8d 	bl	8003fb8 <memcpy>
    }
}
 800229e:	bf00      	nop
 80022a0:	3708      	adds	r7, #8
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}

080022a6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80022a6:	b580      	push	{r7, lr}
 80022a8:	b084      	sub	sp, #16
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80022ae:	f000 fff5 	bl	800329c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80022b8:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80022ba:	e011      	b.n	80022e0 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d012      	beq.n	80022ea <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	3324      	adds	r3, #36	; 0x24
 80022c8:	4618      	mov	r0, r3
 80022ca:	f000 fc73 	bl	8002bb4 <xTaskRemoveFromEventList>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d001      	beq.n	80022d8 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 80022d4:	f000 fd96 	bl	8002e04 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80022d8:	7bfb      	ldrb	r3, [r7, #15]
 80022da:	3b01      	subs	r3, #1
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80022e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	dce9      	bgt.n	80022bc <prvUnlockQueue+0x16>
 80022e8:	e000      	b.n	80022ec <prvUnlockQueue+0x46>
                    break;
 80022ea:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	22ff      	movs	r2, #255	; 0xff
 80022f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 80022f4:	f000 ffec 	bl	80032d0 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80022f8:	f000 ffd0 	bl	800329c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002302:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002304:	e011      	b.n	800232a <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	691b      	ldr	r3, [r3, #16]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d012      	beq.n	8002334 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	3310      	adds	r3, #16
 8002312:	4618      	mov	r0, r3
 8002314:	f000 fc4e 	bl	8002bb4 <xTaskRemoveFromEventList>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d001      	beq.n	8002322 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800231e:	f000 fd71 	bl	8002e04 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002322:	7bbb      	ldrb	r3, [r7, #14]
 8002324:	3b01      	subs	r3, #1
 8002326:	b2db      	uxtb	r3, r3
 8002328:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800232a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800232e:	2b00      	cmp	r3, #0
 8002330:	dce9      	bgt.n	8002306 <prvUnlockQueue+0x60>
 8002332:	e000      	b.n	8002336 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002334:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	22ff      	movs	r2, #255	; 0xff
 800233a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 800233e:	f000 ffc7 	bl	80032d0 <vPortExitCritical>
}
 8002342:	bf00      	nop
 8002344:	3710      	adds	r7, #16
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}

0800234a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800234a:	b580      	push	{r7, lr}
 800234c:	b084      	sub	sp, #16
 800234e:	af00      	add	r7, sp, #0
 8002350:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002352:	f000 ffa3 	bl	800329c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800235a:	2b00      	cmp	r3, #0
 800235c:	d102      	bne.n	8002364 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800235e:	2301      	movs	r3, #1
 8002360:	60fb      	str	r3, [r7, #12]
 8002362:	e001      	b.n	8002368 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002364:	2300      	movs	r3, #0
 8002366:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002368:	f000 ffb2 	bl	80032d0 <vPortExitCritical>

    return xReturn;
 800236c:	68fb      	ldr	r3, [r7, #12]
}
 800236e:	4618      	mov	r0, r3
 8002370:	3710      	adds	r7, #16
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}

08002376 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8002376:	b580      	push	{r7, lr}
 8002378:	b084      	sub	sp, #16
 800237a:	af00      	add	r7, sp, #0
 800237c:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800237e:	f000 ff8d 	bl	800329c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800238a:	429a      	cmp	r2, r3
 800238c:	d102      	bne.n	8002394 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 800238e:	2301      	movs	r3, #1
 8002390:	60fb      	str	r3, [r7, #12]
 8002392:	e001      	b.n	8002398 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8002394:	2300      	movs	r3, #0
 8002396:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002398:	f000 ff9a 	bl	80032d0 <vPortExitCritical>

    return xReturn;
 800239c:	68fb      	ldr	r3, [r7, #12]
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3710      	adds	r7, #16
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}

080023a6 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80023a6:	b580      	push	{r7, lr}
 80023a8:	b08c      	sub	sp, #48	; 0x30
 80023aa:	af04      	add	r7, sp, #16
 80023ac:	60f8      	str	r0, [r7, #12]
 80023ae:	60b9      	str	r1, [r7, #8]
 80023b0:	603b      	str	r3, [r7, #0]
 80023b2:	4613      	mov	r3, r2
 80023b4:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80023b6:	88fb      	ldrh	r3, [r7, #6]
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	4618      	mov	r0, r3
 80023bc:	f001 f808 	bl	80033d0 <pvPortMalloc>
 80023c0:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d013      	beq.n	80023f0 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80023c8:	2054      	movs	r0, #84	; 0x54
 80023ca:	f001 f801 	bl	80033d0 <pvPortMalloc>
 80023ce:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d008      	beq.n	80023e8 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80023d6:	2254      	movs	r2, #84	; 0x54
 80023d8:	2100      	movs	r1, #0
 80023da:	69f8      	ldr	r0, [r7, #28]
 80023dc:	f001 fdc0 	bl	8003f60 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	697a      	ldr	r2, [r7, #20]
 80023e4:	631a      	str	r2, [r3, #48]	; 0x30
 80023e6:	e005      	b.n	80023f4 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80023e8:	6978      	ldr	r0, [r7, #20]
 80023ea:	f001 f88f 	bl	800350c <vPortFree>
 80023ee:	e001      	b.n	80023f4 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80023f0:	2300      	movs	r3, #0
 80023f2:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d013      	beq.n	8002422 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80023fa:	88fa      	ldrh	r2, [r7, #6]
 80023fc:	2300      	movs	r3, #0
 80023fe:	9303      	str	r3, [sp, #12]
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	9302      	str	r3, [sp, #8]
 8002404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002406:	9301      	str	r3, [sp, #4]
 8002408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800240a:	9300      	str	r3, [sp, #0]
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	68b9      	ldr	r1, [r7, #8]
 8002410:	68f8      	ldr	r0, [r7, #12]
 8002412:	f000 f80e 	bl	8002432 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002416:	69f8      	ldr	r0, [r7, #28]
 8002418:	f000 f874 	bl	8002504 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800241c:	2301      	movs	r3, #1
 800241e:	61bb      	str	r3, [r7, #24]
 8002420:	e002      	b.n	8002428 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002422:	f04f 33ff 	mov.w	r3, #4294967295
 8002426:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002428:	69bb      	ldr	r3, [r7, #24]
    }
 800242a:	4618      	mov	r0, r3
 800242c:	3720      	adds	r7, #32
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}

08002432 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002432:	b580      	push	{r7, lr}
 8002434:	b086      	sub	sp, #24
 8002436:	af00      	add	r7, sp, #0
 8002438:	60f8      	str	r0, [r7, #12]
 800243a:	60b9      	str	r1, [r7, #8]
 800243c:	607a      	str	r2, [r7, #4]
 800243e:	603b      	str	r3, [r7, #0]
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002442:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800244a:	3b01      	subs	r3, #1
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	4413      	add	r3, r2
 8002450:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	f023 0307 	bic.w	r3, r3, #7
 8002458:	613b      	str	r3, [r7, #16]
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d01e      	beq.n	800249e <prvInitialiseNewTask+0x6c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002460:	2300      	movs	r3, #0
 8002462:	617b      	str	r3, [r7, #20]
 8002464:	e012      	b.n	800248c <prvInitialiseNewTask+0x5a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002466:	68ba      	ldr	r2, [r7, #8]
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	4413      	add	r3, r2
 800246c:	7819      	ldrb	r1, [r3, #0]
 800246e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	4413      	add	r3, r2
 8002474:	3334      	adds	r3, #52	; 0x34
 8002476:	460a      	mov	r2, r1
 8002478:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800247a:	68ba      	ldr	r2, [r7, #8]
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	4413      	add	r3, r2
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d006      	beq.n	8002494 <prvInitialiseNewTask+0x62>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	3301      	adds	r3, #1
 800248a:	617b      	str	r3, [r7, #20]
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	2b0f      	cmp	r3, #15
 8002490:	d9e9      	bls.n	8002466 <prvInitialiseNewTask+0x34>
 8002492:	e000      	b.n	8002496 <prvInitialiseNewTask+0x64>
            {
                break;
 8002494:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002498:	2200      	movs	r2, #0
 800249a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800249e:	6a3b      	ldr	r3, [r7, #32]
 80024a0:	2b04      	cmp	r3, #4
 80024a2:	d901      	bls.n	80024a8 <prvInitialiseNewTask+0x76>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80024a4:	2304      	movs	r3, #4
 80024a6:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80024a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024aa:	6a3a      	ldr	r2, [r7, #32]
 80024ac:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 80024ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024b0:	6a3a      	ldr	r2, [r7, #32]
 80024b2:	645a      	str	r2, [r3, #68]	; 0x44
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80024b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024b6:	3304      	adds	r3, #4
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7ff fa84 	bl	80019c6 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80024be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024c0:	3318      	adds	r3, #24
 80024c2:	4618      	mov	r0, r3
 80024c4:	f7ff fa7f 	bl	80019c6 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80024c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80024cc:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80024ce:	6a3b      	ldr	r3, [r7, #32]
 80024d0:	f1c3 0205 	rsb	r2, r3, #5
 80024d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024d6:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80024d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80024dc:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80024de:	683a      	ldr	r2, [r7, #0]
 80024e0:	68f9      	ldr	r1, [r7, #12]
 80024e2:	6938      	ldr	r0, [r7, #16]
 80024e4:	f000 fe4c 	bl	8003180 <pxPortInitialiseStack>
 80024e8:	4602      	mov	r2, r0
 80024ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024ec:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80024ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d002      	beq.n	80024fa <prvInitialiseNewTask+0xc8>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80024f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80024f8:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80024fa:	bf00      	nop
 80024fc:	3718      	adds	r7, #24
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
	...

08002504 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b084      	sub	sp, #16
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800250c:	f000 fec6 	bl	800329c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002510:	4b3e      	ldr	r3, [pc, #248]	; (800260c <prvAddNewTaskToReadyList+0x108>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	3301      	adds	r3, #1
 8002516:	4a3d      	ldr	r2, [pc, #244]	; (800260c <prvAddNewTaskToReadyList+0x108>)
 8002518:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800251a:	4b3d      	ldr	r3, [pc, #244]	; (8002610 <prvAddNewTaskToReadyList+0x10c>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d109      	bne.n	8002536 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002522:	4a3b      	ldr	r2, [pc, #236]	; (8002610 <prvAddNewTaskToReadyList+0x10c>)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002528:	4b38      	ldr	r3, [pc, #224]	; (800260c <prvAddNewTaskToReadyList+0x108>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	2b01      	cmp	r3, #1
 800252e:	d110      	bne.n	8002552 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002530:	f000 fc8c 	bl	8002e4c <prvInitialiseTaskLists>
 8002534:	e00d      	b.n	8002552 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002536:	4b37      	ldr	r3, [pc, #220]	; (8002614 <prvAddNewTaskToReadyList+0x110>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d109      	bne.n	8002552 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800253e:	4b34      	ldr	r3, [pc, #208]	; (8002610 <prvAddNewTaskToReadyList+0x10c>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002548:	429a      	cmp	r2, r3
 800254a:	d802      	bhi.n	8002552 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800254c:	4a30      	ldr	r2, [pc, #192]	; (8002610 <prvAddNewTaskToReadyList+0x10c>)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002552:	4b31      	ldr	r3, [pc, #196]	; (8002618 <prvAddNewTaskToReadyList+0x114>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	3301      	adds	r3, #1
 8002558:	4a2f      	ldr	r2, [pc, #188]	; (8002618 <prvAddNewTaskToReadyList+0x114>)
 800255a:	6013      	str	r3, [r2, #0]
            pxNewTCB->uxTCBNumber = uxTaskNumber;
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002560:	2201      	movs	r2, #1
 8002562:	409a      	lsls	r2, r3
 8002564:	4b2d      	ldr	r3, [pc, #180]	; (800261c <prvAddNewTaskToReadyList+0x118>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4313      	orrs	r3, r2
 800256a:	4a2c      	ldr	r2, [pc, #176]	; (800261c <prvAddNewTaskToReadyList+0x118>)
 800256c:	6013      	str	r3, [r2, #0]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002572:	492b      	ldr	r1, [pc, #172]	; (8002620 <prvAddNewTaskToReadyList+0x11c>)
 8002574:	4613      	mov	r3, r2
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	4413      	add	r3, r2
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	440b      	add	r3, r1
 800257e:	3304      	adds	r3, #4
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	60fb      	str	r3, [r7, #12]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	68fa      	ldr	r2, [r7, #12]
 8002588:	609a      	str	r2, [r3, #8]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	689a      	ldr	r2, [r3, #8]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	60da      	str	r2, [r3, #12]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	3204      	adds	r2, #4
 800259a:	605a      	str	r2, [r3, #4]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	1d1a      	adds	r2, r3, #4
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	609a      	str	r2, [r3, #8]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025a8:	4613      	mov	r3, r2
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	4413      	add	r3, r2
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	4a1b      	ldr	r2, [pc, #108]	; (8002620 <prvAddNewTaskToReadyList+0x11c>)
 80025b2:	441a      	add	r2, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	615a      	str	r2, [r3, #20]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025bc:	4918      	ldr	r1, [pc, #96]	; (8002620 <prvAddNewTaskToReadyList+0x11c>)
 80025be:	4613      	mov	r3, r2
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	4413      	add	r3, r2
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	440b      	add	r3, r1
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	1c59      	adds	r1, r3, #1
 80025cc:	4814      	ldr	r0, [pc, #80]	; (8002620 <prvAddNewTaskToReadyList+0x11c>)
 80025ce:	4613      	mov	r3, r2
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	4413      	add	r3, r2
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	4403      	add	r3, r0
 80025d8:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80025da:	f000 fe79 	bl	80032d0 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80025de:	4b0d      	ldr	r3, [pc, #52]	; (8002614 <prvAddNewTaskToReadyList+0x110>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d00e      	beq.n	8002604 <prvAddNewTaskToReadyList+0x100>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80025e6:	4b0a      	ldr	r3, [pc, #40]	; (8002610 <prvAddNewTaskToReadyList+0x10c>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d207      	bcs.n	8002604 <prvAddNewTaskToReadyList+0x100>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80025f4:	4b0b      	ldr	r3, [pc, #44]	; (8002624 <prvAddNewTaskToReadyList+0x120>)
 80025f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025fa:	601a      	str	r2, [r3, #0]
 80025fc:	f3bf 8f4f 	dsb	sy
 8002600:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002604:	bf00      	nop
 8002606:	3710      	adds	r7, #16
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}
 800260c:	20000124 	.word	0x20000124
 8002610:	2000004c 	.word	0x2000004c
 8002614:	20000130 	.word	0x20000130
 8002618:	20000140 	.word	0x20000140
 800261c:	2000012c 	.word	0x2000012c
 8002620:	20000050 	.word	0x20000050
 8002624:	e000ed04 	.word	0xe000ed04

08002628 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8002628:	b580      	push	{r7, lr}
 800262a:	b084      	sub	sp, #16
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8002630:	2300      	movs	r3, #0
 8002632:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d008      	beq.n	800264c <vTaskDelay+0x24>
        {
            configASSERT( uxSchedulerSuspended == 0 );
            vTaskSuspendAll();
 800263a:	f000 f855 	bl	80026e8 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800263e:	2100      	movs	r1, #0
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	f000 fd1d 	bl	8003080 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8002646:	f000 f85d 	bl	8002704 <xTaskResumeAll>
 800264a:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d107      	bne.n	8002662 <vTaskDelay+0x3a>
        {
            portYIELD_WITHIN_API();
 8002652:	4b06      	ldr	r3, [pc, #24]	; (800266c <vTaskDelay+0x44>)
 8002654:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002658:	601a      	str	r2, [r3, #0]
 800265a:	f3bf 8f4f 	dsb	sy
 800265e:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002662:	bf00      	nop
 8002664:	3710      	adds	r7, #16
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	e000ed04 	.word	0xe000ed04

08002670 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b084      	sub	sp, #16
 8002674:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8002676:	4b15      	ldr	r3, [pc, #84]	; (80026cc <vTaskStartScheduler+0x5c>)
 8002678:	9301      	str	r3, [sp, #4]
 800267a:	2300      	movs	r3, #0
 800267c:	9300      	str	r3, [sp, #0]
 800267e:	2300      	movs	r3, #0
 8002680:	2280      	movs	r2, #128	; 0x80
 8002682:	4913      	ldr	r1, [pc, #76]	; (80026d0 <vTaskStartScheduler+0x60>)
 8002684:	4813      	ldr	r0, [pc, #76]	; (80026d4 <vTaskStartScheduler+0x64>)
 8002686:	f7ff fe8e 	bl	80023a6 <xTaskCreate>
 800268a:	6078      	str	r0, [r7, #4]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2b01      	cmp	r3, #1
 8002690:	d115      	bne.n	80026be <vTaskStartScheduler+0x4e>
        __asm volatile
 8002692:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8002696:	f383 8811 	msr	BASEPRI, r3
 800269a:	f3bf 8f6f 	isb	sy
 800269e:	f3bf 8f4f 	dsb	sy
 80026a2:	603b      	str	r3, [r7, #0]
    }
 80026a4:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 80026a6:	4b0c      	ldr	r3, [pc, #48]	; (80026d8 <vTaskStartScheduler+0x68>)
 80026a8:	f04f 32ff 	mov.w	r2, #4294967295
 80026ac:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80026ae:	4b0b      	ldr	r3, [pc, #44]	; (80026dc <vTaskStartScheduler+0x6c>)
 80026b0:	2201      	movs	r2, #1
 80026b2:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80026b4:	4b0a      	ldr	r3, [pc, #40]	; (80026e0 <vTaskStartScheduler+0x70>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 80026ba:	f000 fdcf 	bl	800325c <xPortStartScheduler>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80026be:	4b09      	ldr	r3, [pc, #36]	; (80026e4 <vTaskStartScheduler+0x74>)
 80026c0:	681b      	ldr	r3, [r3, #0]
}
 80026c2:	bf00      	nop
 80026c4:	3708      	adds	r7, #8
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	20000148 	.word	0x20000148
 80026d0:	08004028 	.word	0x08004028
 80026d4:	08002e1d 	.word	0x08002e1d
 80026d8:	20000144 	.word	0x20000144
 80026dc:	20000130 	.word	0x20000130
 80026e0:	20000128 	.word	0x20000128
 80026e4:	20000004 	.word	0x20000004

080026e8 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80026e8:	b480      	push	{r7}
 80026ea:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80026ec:	4b04      	ldr	r3, [pc, #16]	; (8002700 <vTaskSuspendAll+0x18>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	3301      	adds	r3, #1
 80026f2:	4a03      	ldr	r2, [pc, #12]	; (8002700 <vTaskSuspendAll+0x18>)
 80026f4:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80026f6:	bf00      	nop
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bc80      	pop	{r7}
 80026fc:	4770      	bx	lr
 80026fe:	bf00      	nop
 8002700:	2000014c 	.word	0x2000014c

08002704 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b086      	sub	sp, #24
 8002708:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800270a:	2300      	movs	r3, #0
 800270c:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 800270e:	2300      	movs	r3, #0
 8002710:	613b      	str	r3, [r7, #16]
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002712:	f000 fdc3 	bl	800329c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002716:	4b68      	ldr	r3, [pc, #416]	; (80028b8 <xTaskResumeAll+0x1b4>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	3b01      	subs	r3, #1
 800271c:	4a66      	ldr	r2, [pc, #408]	; (80028b8 <xTaskResumeAll+0x1b4>)
 800271e:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002720:	4b65      	ldr	r3, [pc, #404]	; (80028b8 <xTaskResumeAll+0x1b4>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	2b00      	cmp	r3, #0
 8002726:	f040 80c0 	bne.w	80028aa <xTaskResumeAll+0x1a6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800272a:	4b64      	ldr	r3, [pc, #400]	; (80028bc <xTaskResumeAll+0x1b8>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	2b00      	cmp	r3, #0
 8002730:	f000 80bb 	beq.w	80028aa <xTaskResumeAll+0x1a6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002734:	e08a      	b.n	800284c <xTaskResumeAll+0x148>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002736:	4b62      	ldr	r3, [pc, #392]	; (80028c0 <xTaskResumeAll+0x1bc>)
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002742:	60bb      	str	r3, [r7, #8]
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	69db      	ldr	r3, [r3, #28]
 8002748:	697a      	ldr	r2, [r7, #20]
 800274a:	6a12      	ldr	r2, [r2, #32]
 800274c:	609a      	str	r2, [r3, #8]
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	6a1b      	ldr	r3, [r3, #32]
 8002752:	697a      	ldr	r2, [r7, #20]
 8002754:	69d2      	ldr	r2, [r2, #28]
 8002756:	605a      	str	r2, [r3, #4]
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	685a      	ldr	r2, [r3, #4]
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	3318      	adds	r3, #24
 8002760:	429a      	cmp	r2, r3
 8002762:	d103      	bne.n	800276c <xTaskResumeAll+0x68>
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	6a1a      	ldr	r2, [r3, #32]
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	605a      	str	r2, [r3, #4]
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	2200      	movs	r2, #0
 8002770:	629a      	str	r2, [r3, #40]	; 0x28
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	1e5a      	subs	r2, r3, #1
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	695b      	ldr	r3, [r3, #20]
 8002780:	607b      	str	r3, [r7, #4]
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	697a      	ldr	r2, [r7, #20]
 8002788:	68d2      	ldr	r2, [r2, #12]
 800278a:	609a      	str	r2, [r3, #8]
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	697a      	ldr	r2, [r7, #20]
 8002792:	6892      	ldr	r2, [r2, #8]
 8002794:	605a      	str	r2, [r3, #4]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	685a      	ldr	r2, [r3, #4]
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	3304      	adds	r3, #4
 800279e:	429a      	cmp	r2, r3
 80027a0:	d103      	bne.n	80027aa <xTaskResumeAll+0xa6>
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	68da      	ldr	r2, [r3, #12]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	605a      	str	r2, [r3, #4]
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	2200      	movs	r2, #0
 80027ae:	615a      	str	r2, [r3, #20]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	1e5a      	subs	r2, r3, #1
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027be:	2201      	movs	r2, #1
 80027c0:	409a      	lsls	r2, r3
 80027c2:	4b40      	ldr	r3, [pc, #256]	; (80028c4 <xTaskResumeAll+0x1c0>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	4a3e      	ldr	r2, [pc, #248]	; (80028c4 <xTaskResumeAll+0x1c0>)
 80027ca:	6013      	str	r3, [r2, #0]
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027d0:	493d      	ldr	r1, [pc, #244]	; (80028c8 <xTaskResumeAll+0x1c4>)
 80027d2:	4613      	mov	r3, r2
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	4413      	add	r3, r2
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	440b      	add	r3, r1
 80027dc:	3304      	adds	r3, #4
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	603b      	str	r3, [r7, #0]
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	683a      	ldr	r2, [r7, #0]
 80027e6:	609a      	str	r2, [r3, #8]
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	689a      	ldr	r2, [r3, #8]
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	60da      	str	r2, [r3, #12]
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	697a      	ldr	r2, [r7, #20]
 80027f6:	3204      	adds	r2, #4
 80027f8:	605a      	str	r2, [r3, #4]
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	1d1a      	adds	r2, r3, #4
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	609a      	str	r2, [r3, #8]
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002806:	4613      	mov	r3, r2
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	4413      	add	r3, r2
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	4a2e      	ldr	r2, [pc, #184]	; (80028c8 <xTaskResumeAll+0x1c4>)
 8002810:	441a      	add	r2, r3
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	615a      	str	r2, [r3, #20]
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800281a:	492b      	ldr	r1, [pc, #172]	; (80028c8 <xTaskResumeAll+0x1c4>)
 800281c:	4613      	mov	r3, r2
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	4413      	add	r3, r2
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	440b      	add	r3, r1
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	1c59      	adds	r1, r3, #1
 800282a:	4827      	ldr	r0, [pc, #156]	; (80028c8 <xTaskResumeAll+0x1c4>)
 800282c:	4613      	mov	r3, r2
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	4413      	add	r3, r2
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	4403      	add	r3, r0
 8002836:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800283c:	4b23      	ldr	r3, [pc, #140]	; (80028cc <xTaskResumeAll+0x1c8>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002842:	429a      	cmp	r2, r3
 8002844:	d302      	bcc.n	800284c <xTaskResumeAll+0x148>
                    {
                        xYieldPending = pdTRUE;
 8002846:	4b22      	ldr	r3, [pc, #136]	; (80028d0 <xTaskResumeAll+0x1cc>)
 8002848:	2201      	movs	r2, #1
 800284a:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800284c:	4b1c      	ldr	r3, [pc, #112]	; (80028c0 <xTaskResumeAll+0x1bc>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	2b00      	cmp	r3, #0
 8002852:	f47f af70 	bne.w	8002736 <xTaskResumeAll+0x32>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d001      	beq.n	8002860 <xTaskResumeAll+0x15c>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800285c:	f000 fb74 	bl	8002f48 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002860:	4b1c      	ldr	r3, [pc, #112]	; (80028d4 <xTaskResumeAll+0x1d0>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d010      	beq.n	800288e <xTaskResumeAll+0x18a>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800286c:	f000 f840 	bl	80028f0 <xTaskIncrementTick>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d002      	beq.n	800287c <xTaskResumeAll+0x178>
                            {
                                xYieldPending = pdTRUE;
 8002876:	4b16      	ldr	r3, [pc, #88]	; (80028d0 <xTaskResumeAll+0x1cc>)
 8002878:	2201      	movs	r2, #1
 800287a:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	3b01      	subs	r3, #1
 8002880:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d1f1      	bne.n	800286c <xTaskResumeAll+0x168>

                        xPendedTicks = 0;
 8002888:	4b12      	ldr	r3, [pc, #72]	; (80028d4 <xTaskResumeAll+0x1d0>)
 800288a:	2200      	movs	r2, #0
 800288c:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800288e:	4b10      	ldr	r3, [pc, #64]	; (80028d0 <xTaskResumeAll+0x1cc>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d009      	beq.n	80028aa <xTaskResumeAll+0x1a6>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8002896:	2301      	movs	r3, #1
 8002898:	613b      	str	r3, [r7, #16]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800289a:	4b0f      	ldr	r3, [pc, #60]	; (80028d8 <xTaskResumeAll+0x1d4>)
 800289c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028a0:	601a      	str	r2, [r3, #0]
 80028a2:	f3bf 8f4f 	dsb	sy
 80028a6:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80028aa:	f000 fd11 	bl	80032d0 <vPortExitCritical>

    return xAlreadyYielded;
 80028ae:	693b      	ldr	r3, [r7, #16]
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3718      	adds	r7, #24
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	2000014c 	.word	0x2000014c
 80028bc:	20000124 	.word	0x20000124
 80028c0:	200000e4 	.word	0x200000e4
 80028c4:	2000012c 	.word	0x2000012c
 80028c8:	20000050 	.word	0x20000050
 80028cc:	2000004c 	.word	0x2000004c
 80028d0:	20000138 	.word	0x20000138
 80028d4:	20000134 	.word	0x20000134
 80028d8:	e000ed04 	.word	0xe000ed04

080028dc <uxTaskGetNumberOfTasks>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 80028dc:	b480      	push	{r7}
 80028de:	af00      	add	r7, sp, #0
    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    return uxCurrentNumberOfTasks;
 80028e0:	4b02      	ldr	r3, [pc, #8]	; (80028ec <uxTaskGetNumberOfTasks+0x10>)
 80028e2:	681b      	ldr	r3, [r3, #0]
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bc80      	pop	{r7}
 80028ea:	4770      	bx	lr
 80028ec:	20000124 	.word	0x20000124

080028f0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b088      	sub	sp, #32
 80028f4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80028f6:	2300      	movs	r3, #0
 80028f8:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80028fa:	4b75      	ldr	r3, [pc, #468]	; (8002ad0 <xTaskIncrementTick+0x1e0>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	f040 80dc 	bne.w	8002abc <xTaskIncrementTick+0x1cc>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002904:	4b73      	ldr	r3, [pc, #460]	; (8002ad4 <xTaskIncrementTick+0x1e4>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	3301      	adds	r3, #1
 800290a:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800290c:	4a71      	ldr	r2, [pc, #452]	; (8002ad4 <xTaskIncrementTick+0x1e4>)
 800290e:	69bb      	ldr	r3, [r7, #24]
 8002910:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d110      	bne.n	800293a <xTaskIncrementTick+0x4a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002918:	4b6f      	ldr	r3, [pc, #444]	; (8002ad8 <xTaskIncrementTick+0x1e8>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	617b      	str	r3, [r7, #20]
 800291e:	4b6f      	ldr	r3, [pc, #444]	; (8002adc <xTaskIncrementTick+0x1ec>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a6d      	ldr	r2, [pc, #436]	; (8002ad8 <xTaskIncrementTick+0x1e8>)
 8002924:	6013      	str	r3, [r2, #0]
 8002926:	4a6d      	ldr	r2, [pc, #436]	; (8002adc <xTaskIncrementTick+0x1ec>)
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	6013      	str	r3, [r2, #0]
 800292c:	4b6c      	ldr	r3, [pc, #432]	; (8002ae0 <xTaskIncrementTick+0x1f0>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	3301      	adds	r3, #1
 8002932:	4a6b      	ldr	r2, [pc, #428]	; (8002ae0 <xTaskIncrementTick+0x1f0>)
 8002934:	6013      	str	r3, [r2, #0]
 8002936:	f000 fb07 	bl	8002f48 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800293a:	4b6a      	ldr	r3, [pc, #424]	; (8002ae4 <xTaskIncrementTick+0x1f4>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	69ba      	ldr	r2, [r7, #24]
 8002940:	429a      	cmp	r2, r3
 8002942:	f0c0 80a6 	bcc.w	8002a92 <xTaskIncrementTick+0x1a2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002946:	4b64      	ldr	r3, [pc, #400]	; (8002ad8 <xTaskIncrementTick+0x1e8>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d104      	bne.n	800295a <xTaskIncrementTick+0x6a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002950:	4b64      	ldr	r3, [pc, #400]	; (8002ae4 <xTaskIncrementTick+0x1f4>)
 8002952:	f04f 32ff 	mov.w	r2, #4294967295
 8002956:	601a      	str	r2, [r3, #0]
                    break;
 8002958:	e09b      	b.n	8002a92 <xTaskIncrementTick+0x1a2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800295a:	4b5f      	ldr	r3, [pc, #380]	; (8002ad8 <xTaskIncrementTick+0x1e8>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 800296a:	69ba      	ldr	r2, [r7, #24]
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	429a      	cmp	r2, r3
 8002970:	d203      	bcs.n	800297a <xTaskIncrementTick+0x8a>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002972:	4a5c      	ldr	r2, [pc, #368]	; (8002ae4 <xTaskIncrementTick+0x1f4>)
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8002978:	e08b      	b.n	8002a92 <xTaskIncrementTick+0x1a2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	695b      	ldr	r3, [r3, #20]
 800297e:	60bb      	str	r3, [r7, #8]
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	693a      	ldr	r2, [r7, #16]
 8002986:	68d2      	ldr	r2, [r2, #12]
 8002988:	609a      	str	r2, [r3, #8]
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	693a      	ldr	r2, [r7, #16]
 8002990:	6892      	ldr	r2, [r2, #8]
 8002992:	605a      	str	r2, [r3, #4]
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	685a      	ldr	r2, [r3, #4]
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	3304      	adds	r3, #4
 800299c:	429a      	cmp	r2, r3
 800299e:	d103      	bne.n	80029a8 <xTaskIncrementTick+0xb8>
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	68da      	ldr	r2, [r3, #12]
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	605a      	str	r2, [r3, #4]
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	2200      	movs	r2, #0
 80029ac:	615a      	str	r2, [r3, #20]
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	1e5a      	subs	r2, r3, #1
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d01e      	beq.n	80029fe <xTaskIncrementTick+0x10e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029c4:	607b      	str	r3, [r7, #4]
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	69db      	ldr	r3, [r3, #28]
 80029ca:	693a      	ldr	r2, [r7, #16]
 80029cc:	6a12      	ldr	r2, [r2, #32]
 80029ce:	609a      	str	r2, [r3, #8]
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	6a1b      	ldr	r3, [r3, #32]
 80029d4:	693a      	ldr	r2, [r7, #16]
 80029d6:	69d2      	ldr	r2, [r2, #28]
 80029d8:	605a      	str	r2, [r3, #4]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	685a      	ldr	r2, [r3, #4]
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	3318      	adds	r3, #24
 80029e2:	429a      	cmp	r2, r3
 80029e4:	d103      	bne.n	80029ee <xTaskIncrementTick+0xfe>
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	6a1a      	ldr	r2, [r3, #32]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	605a      	str	r2, [r3, #4]
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	2200      	movs	r2, #0
 80029f2:	629a      	str	r2, [r3, #40]	; 0x28
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	1e5a      	subs	r2, r3, #1
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a02:	2201      	movs	r2, #1
 8002a04:	409a      	lsls	r2, r3
 8002a06:	4b38      	ldr	r3, [pc, #224]	; (8002ae8 <xTaskIncrementTick+0x1f8>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	4a36      	ldr	r2, [pc, #216]	; (8002ae8 <xTaskIncrementTick+0x1f8>)
 8002a0e:	6013      	str	r3, [r2, #0]
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a14:	4935      	ldr	r1, [pc, #212]	; (8002aec <xTaskIncrementTick+0x1fc>)
 8002a16:	4613      	mov	r3, r2
 8002a18:	009b      	lsls	r3, r3, #2
 8002a1a:	4413      	add	r3, r2
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	440b      	add	r3, r1
 8002a20:	3304      	adds	r3, #4
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	603b      	str	r3, [r7, #0]
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	683a      	ldr	r2, [r7, #0]
 8002a2a:	609a      	str	r2, [r3, #8]
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	689a      	ldr	r2, [r3, #8]
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	60da      	str	r2, [r3, #12]
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	693a      	ldr	r2, [r7, #16]
 8002a3a:	3204      	adds	r2, #4
 8002a3c:	605a      	str	r2, [r3, #4]
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	1d1a      	adds	r2, r3, #4
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	609a      	str	r2, [r3, #8]
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	4413      	add	r3, r2
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	4a26      	ldr	r2, [pc, #152]	; (8002aec <xTaskIncrementTick+0x1fc>)
 8002a54:	441a      	add	r2, r3
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	615a      	str	r2, [r3, #20]
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a5e:	4923      	ldr	r1, [pc, #140]	; (8002aec <xTaskIncrementTick+0x1fc>)
 8002a60:	4613      	mov	r3, r2
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	4413      	add	r3, r2
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	440b      	add	r3, r1
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	1c59      	adds	r1, r3, #1
 8002a6e:	481f      	ldr	r0, [pc, #124]	; (8002aec <xTaskIncrementTick+0x1fc>)
 8002a70:	4613      	mov	r3, r2
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	4413      	add	r3, r2
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	4403      	add	r3, r0
 8002a7a:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a80:	4b1b      	ldr	r3, [pc, #108]	; (8002af0 <xTaskIncrementTick+0x200>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a86:	429a      	cmp	r2, r3
 8002a88:	f67f af5d 	bls.w	8002946 <xTaskIncrementTick+0x56>
                        {
                            xSwitchRequired = pdTRUE;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002a90:	e759      	b.n	8002946 <xTaskIncrementTick+0x56>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002a92:	4b17      	ldr	r3, [pc, #92]	; (8002af0 <xTaskIncrementTick+0x200>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a98:	4914      	ldr	r1, [pc, #80]	; (8002aec <xTaskIncrementTick+0x1fc>)
 8002a9a:	4613      	mov	r3, r2
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	4413      	add	r3, r2
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	440b      	add	r3, r1
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d901      	bls.n	8002aae <xTaskIncrementTick+0x1be>
            {
                xSwitchRequired = pdTRUE;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	61fb      	str	r3, [r7, #28]
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8002aae:	4b11      	ldr	r3, [pc, #68]	; (8002af4 <xTaskIncrementTick+0x204>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d007      	beq.n	8002ac6 <xTaskIncrementTick+0x1d6>
            {
                xSwitchRequired = pdTRUE;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	61fb      	str	r3, [r7, #28]
 8002aba:	e004      	b.n	8002ac6 <xTaskIncrementTick+0x1d6>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002abc:	4b0e      	ldr	r3, [pc, #56]	; (8002af8 <xTaskIncrementTick+0x208>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	3301      	adds	r3, #1
 8002ac2:	4a0d      	ldr	r2, [pc, #52]	; (8002af8 <xTaskIncrementTick+0x208>)
 8002ac4:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8002ac6:	69fb      	ldr	r3, [r7, #28]
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3720      	adds	r7, #32
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	2000014c 	.word	0x2000014c
 8002ad4:	20000128 	.word	0x20000128
 8002ad8:	200000dc 	.word	0x200000dc
 8002adc:	200000e0 	.word	0x200000e0
 8002ae0:	2000013c 	.word	0x2000013c
 8002ae4:	20000144 	.word	0x20000144
 8002ae8:	2000012c 	.word	0x2000012c
 8002aec:	20000050 	.word	0x20000050
 8002af0:	2000004c 	.word	0x2000004c
 8002af4:	20000138 	.word	0x20000138
 8002af8:	20000134 	.word	0x20000134

08002afc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002afc:	b480      	push	{r7}
 8002afe:	b085      	sub	sp, #20
 8002b00:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002b02:	4b1c      	ldr	r3, [pc, #112]	; (8002b74 <vTaskSwitchContext+0x78>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d003      	beq.n	8002b12 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002b0a:	4b1b      	ldr	r3, [pc, #108]	; (8002b78 <vTaskSwitchContext+0x7c>)
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8002b10:	e02a      	b.n	8002b68 <vTaskSwitchContext+0x6c>
        xYieldPending = pdFALSE;
 8002b12:	4b19      	ldr	r3, [pc, #100]	; (8002b78 <vTaskSwitchContext+0x7c>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002b18:	4b18      	ldr	r3, [pc, #96]	; (8002b7c <vTaskSwitchContext+0x80>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	607b      	str	r3, [r7, #4]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	fab3 f383 	clz	r3, r3
 8002b24:	70fb      	strb	r3, [r7, #3]
            return ucReturn;
 8002b26:	78fb      	ldrb	r3, [r7, #3]
 8002b28:	f1c3 031f 	rsb	r3, r3, #31
 8002b2c:	60fb      	str	r3, [r7, #12]
 8002b2e:	68fa      	ldr	r2, [r7, #12]
 8002b30:	4613      	mov	r3, r2
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	4413      	add	r3, r2
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	4a11      	ldr	r2, [pc, #68]	; (8002b80 <vTaskSwitchContext+0x84>)
 8002b3a:	4413      	add	r3, r2
 8002b3c:	60bb      	str	r3, [r7, #8]
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	685a      	ldr	r2, [r3, #4]
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	605a      	str	r2, [r3, #4]
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	685a      	ldr	r2, [r3, #4]
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	3308      	adds	r3, #8
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d104      	bne.n	8002b5e <vTaskSwitchContext+0x62>
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	685a      	ldr	r2, [r3, #4]
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	605a      	str	r2, [r3, #4]
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	4a07      	ldr	r2, [pc, #28]	; (8002b84 <vTaskSwitchContext+0x88>)
 8002b66:	6013      	str	r3, [r2, #0]
}
 8002b68:	bf00      	nop
 8002b6a:	3714      	adds	r7, #20
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bc80      	pop	{r7}
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	2000014c 	.word	0x2000014c
 8002b78:	20000138 	.word	0x20000138
 8002b7c:	2000012c 	.word	0x2000012c
 8002b80:	20000050 	.word	0x20000050
 8002b84:	2000004c 	.word	0x2000004c

08002b88 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b082      	sub	sp, #8
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
 8002b90:	6039      	str	r1, [r7, #0]
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002b92:	4b07      	ldr	r3, [pc, #28]	; (8002bb0 <vTaskPlaceOnEventList+0x28>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	3318      	adds	r3, #24
 8002b98:	4619      	mov	r1, r3
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f7fe ff1f 	bl	80019de <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002ba0:	2101      	movs	r1, #1
 8002ba2:	6838      	ldr	r0, [r7, #0]
 8002ba4:	f000 fa6c 	bl	8003080 <prvAddCurrentTaskToDelayedList>
}
 8002ba8:	bf00      	nop
 8002baa:	3708      	adds	r7, #8
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	2000004c 	.word	0x2000004c

08002bb4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b089      	sub	sp, #36	; 0x24
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	68db      	ldr	r3, [r3, #12]
 8002bc2:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8002bc4:	69bb      	ldr	r3, [r7, #24]
 8002bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bc8:	617b      	str	r3, [r7, #20]
 8002bca:	69bb      	ldr	r3, [r7, #24]
 8002bcc:	69db      	ldr	r3, [r3, #28]
 8002bce:	69ba      	ldr	r2, [r7, #24]
 8002bd0:	6a12      	ldr	r2, [r2, #32]
 8002bd2:	609a      	str	r2, [r3, #8]
 8002bd4:	69bb      	ldr	r3, [r7, #24]
 8002bd6:	6a1b      	ldr	r3, [r3, #32]
 8002bd8:	69ba      	ldr	r2, [r7, #24]
 8002bda:	69d2      	ldr	r2, [r2, #28]
 8002bdc:	605a      	str	r2, [r3, #4]
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	685a      	ldr	r2, [r3, #4]
 8002be2:	69bb      	ldr	r3, [r7, #24]
 8002be4:	3318      	adds	r3, #24
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d103      	bne.n	8002bf2 <xTaskRemoveFromEventList+0x3e>
 8002bea:	69bb      	ldr	r3, [r7, #24]
 8002bec:	6a1a      	ldr	r2, [r3, #32]
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	605a      	str	r2, [r3, #4]
 8002bf2:	69bb      	ldr	r3, [r7, #24]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	629a      	str	r2, [r3, #40]	; 0x28
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	1e5a      	subs	r2, r3, #1
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002c02:	4b4a      	ldr	r3, [pc, #296]	; (8002d2c <xTaskRemoveFromEventList+0x178>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d15e      	bne.n	8002cc8 <xTaskRemoveFromEventList+0x114>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8002c0a:	69bb      	ldr	r3, [r7, #24]
 8002c0c:	695b      	ldr	r3, [r3, #20]
 8002c0e:	60fb      	str	r3, [r7, #12]
 8002c10:	69bb      	ldr	r3, [r7, #24]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	69ba      	ldr	r2, [r7, #24]
 8002c16:	68d2      	ldr	r2, [r2, #12]
 8002c18:	609a      	str	r2, [r3, #8]
 8002c1a:	69bb      	ldr	r3, [r7, #24]
 8002c1c:	68db      	ldr	r3, [r3, #12]
 8002c1e:	69ba      	ldr	r2, [r7, #24]
 8002c20:	6892      	ldr	r2, [r2, #8]
 8002c22:	605a      	str	r2, [r3, #4]
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	685a      	ldr	r2, [r3, #4]
 8002c28:	69bb      	ldr	r3, [r7, #24]
 8002c2a:	3304      	adds	r3, #4
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d103      	bne.n	8002c38 <xTaskRemoveFromEventList+0x84>
 8002c30:	69bb      	ldr	r3, [r7, #24]
 8002c32:	68da      	ldr	r2, [r3, #12]
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	605a      	str	r2, [r3, #4]
 8002c38:	69bb      	ldr	r3, [r7, #24]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	615a      	str	r2, [r3, #20]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	1e5a      	subs	r2, r3, #1
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8002c48:	69bb      	ldr	r3, [r7, #24]
 8002c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	409a      	lsls	r2, r3
 8002c50:	4b37      	ldr	r3, [pc, #220]	; (8002d30 <xTaskRemoveFromEventList+0x17c>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4313      	orrs	r3, r2
 8002c56:	4a36      	ldr	r2, [pc, #216]	; (8002d30 <xTaskRemoveFromEventList+0x17c>)
 8002c58:	6013      	str	r3, [r2, #0]
 8002c5a:	69bb      	ldr	r3, [r7, #24]
 8002c5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c5e:	4935      	ldr	r1, [pc, #212]	; (8002d34 <xTaskRemoveFromEventList+0x180>)
 8002c60:	4613      	mov	r3, r2
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	4413      	add	r3, r2
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	440b      	add	r3, r1
 8002c6a:	3304      	adds	r3, #4
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	60bb      	str	r3, [r7, #8]
 8002c70:	69bb      	ldr	r3, [r7, #24]
 8002c72:	68ba      	ldr	r2, [r7, #8]
 8002c74:	609a      	str	r2, [r3, #8]
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	689a      	ldr	r2, [r3, #8]
 8002c7a:	69bb      	ldr	r3, [r7, #24]
 8002c7c:	60da      	str	r2, [r3, #12]
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	69ba      	ldr	r2, [r7, #24]
 8002c84:	3204      	adds	r2, #4
 8002c86:	605a      	str	r2, [r3, #4]
 8002c88:	69bb      	ldr	r3, [r7, #24]
 8002c8a:	1d1a      	adds	r2, r3, #4
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	609a      	str	r2, [r3, #8]
 8002c90:	69bb      	ldr	r3, [r7, #24]
 8002c92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c94:	4613      	mov	r3, r2
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	4413      	add	r3, r2
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	4a25      	ldr	r2, [pc, #148]	; (8002d34 <xTaskRemoveFromEventList+0x180>)
 8002c9e:	441a      	add	r2, r3
 8002ca0:	69bb      	ldr	r3, [r7, #24]
 8002ca2:	615a      	str	r2, [r3, #20]
 8002ca4:	69bb      	ldr	r3, [r7, #24]
 8002ca6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ca8:	4922      	ldr	r1, [pc, #136]	; (8002d34 <xTaskRemoveFromEventList+0x180>)
 8002caa:	4613      	mov	r3, r2
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	4413      	add	r3, r2
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	440b      	add	r3, r1
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	1c59      	adds	r1, r3, #1
 8002cb8:	481e      	ldr	r0, [pc, #120]	; (8002d34 <xTaskRemoveFromEventList+0x180>)
 8002cba:	4613      	mov	r3, r2
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	4413      	add	r3, r2
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	4403      	add	r3, r0
 8002cc4:	6019      	str	r1, [r3, #0]
 8002cc6:	e01b      	b.n	8002d00 <xTaskRemoveFromEventList+0x14c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002cc8:	4b1b      	ldr	r3, [pc, #108]	; (8002d38 <xTaskRemoveFromEventList+0x184>)
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	613b      	str	r3, [r7, #16]
 8002cce:	69bb      	ldr	r3, [r7, #24]
 8002cd0:	693a      	ldr	r2, [r7, #16]
 8002cd2:	61da      	str	r2, [r3, #28]
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	689a      	ldr	r2, [r3, #8]
 8002cd8:	69bb      	ldr	r3, [r7, #24]
 8002cda:	621a      	str	r2, [r3, #32]
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	69ba      	ldr	r2, [r7, #24]
 8002ce2:	3218      	adds	r2, #24
 8002ce4:	605a      	str	r2, [r3, #4]
 8002ce6:	69bb      	ldr	r3, [r7, #24]
 8002ce8:	f103 0218 	add.w	r2, r3, #24
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	609a      	str	r2, [r3, #8]
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	4a11      	ldr	r2, [pc, #68]	; (8002d38 <xTaskRemoveFromEventList+0x184>)
 8002cf4:	629a      	str	r2, [r3, #40]	; 0x28
 8002cf6:	4b10      	ldr	r3, [pc, #64]	; (8002d38 <xTaskRemoveFromEventList+0x184>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	4a0e      	ldr	r2, [pc, #56]	; (8002d38 <xTaskRemoveFromEventList+0x184>)
 8002cfe:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002d00:	69bb      	ldr	r3, [r7, #24]
 8002d02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d04:	4b0d      	ldr	r3, [pc, #52]	; (8002d3c <xTaskRemoveFromEventList+0x188>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	d905      	bls.n	8002d1a <xTaskRemoveFromEventList+0x166>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	61fb      	str	r3, [r7, #28]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8002d12:	4b0b      	ldr	r3, [pc, #44]	; (8002d40 <xTaskRemoveFromEventList+0x18c>)
 8002d14:	2201      	movs	r2, #1
 8002d16:	601a      	str	r2, [r3, #0]
 8002d18:	e001      	b.n	8002d1e <xTaskRemoveFromEventList+0x16a>
    }
    else
    {
        xReturn = pdFALSE;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 8002d1e:	69fb      	ldr	r3, [r7, #28]
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3724      	adds	r7, #36	; 0x24
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bc80      	pop	{r7}
 8002d28:	4770      	bx	lr
 8002d2a:	bf00      	nop
 8002d2c:	2000014c 	.word	0x2000014c
 8002d30:	2000012c 	.word	0x2000012c
 8002d34:	20000050 	.word	0x20000050
 8002d38:	200000e4 	.word	0x200000e4
 8002d3c:	2000004c 	.word	0x2000004c
 8002d40:	20000138 	.word	0x20000138

08002d44 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002d4c:	4b06      	ldr	r3, [pc, #24]	; (8002d68 <vTaskInternalSetTimeOutState+0x24>)
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8002d54:	4b05      	ldr	r3, [pc, #20]	; (8002d6c <vTaskInternalSetTimeOutState+0x28>)
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	605a      	str	r2, [r3, #4]
}
 8002d5c:	bf00      	nop
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bc80      	pop	{r7}
 8002d64:	4770      	bx	lr
 8002d66:	bf00      	nop
 8002d68:	2000013c 	.word	0x2000013c
 8002d6c:	20000128 	.word	0x20000128

08002d70 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b086      	sub	sp, #24
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
    configASSERT( pxTicksToWait );

    taskENTER_CRITICAL();
 8002d7a:	f000 fa8f 	bl	800329c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8002d7e:	4b1f      	ldr	r3, [pc, #124]	; (8002dfc <xTaskCheckForTimeOut+0x8c>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	693a      	ldr	r2, [r7, #16]
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d96:	d102      	bne.n	8002d9e <xTaskCheckForTimeOut+0x2e>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	617b      	str	r3, [r7, #20]
 8002d9c:	e026      	b.n	8002dec <xTaskCheckForTimeOut+0x7c>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	4b17      	ldr	r3, [pc, #92]	; (8002e00 <xTaskCheckForTimeOut+0x90>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d00a      	beq.n	8002dc0 <xTaskCheckForTimeOut+0x50>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	693a      	ldr	r2, [r7, #16]
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d305      	bcc.n	8002dc0 <xTaskCheckForTimeOut+0x50>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8002db4:	2301      	movs	r3, #1
 8002db6:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	601a      	str	r2, [r3, #0]
 8002dbe:	e015      	b.n	8002dec <xTaskCheckForTimeOut+0x7c>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	68fa      	ldr	r2, [r7, #12]
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d20b      	bcs.n	8002de2 <xTaskCheckForTimeOut+0x72>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	1ad2      	subs	r2, r2, r3
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f7ff ffb4 	bl	8002d44 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	617b      	str	r3, [r7, #20]
 8002de0:	e004      	b.n	8002dec <xTaskCheckForTimeOut+0x7c>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	2200      	movs	r2, #0
 8002de6:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8002de8:	2301      	movs	r3, #1
 8002dea:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 8002dec:	f000 fa70 	bl	80032d0 <vPortExitCritical>

    return xReturn;
 8002df0:	697b      	ldr	r3, [r7, #20]
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3718      	adds	r7, #24
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	20000128 	.word	0x20000128
 8002e00:	2000013c 	.word	0x2000013c

08002e04 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002e04:	b480      	push	{r7}
 8002e06:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8002e08:	4b03      	ldr	r3, [pc, #12]	; (8002e18 <vTaskMissedYield+0x14>)
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	601a      	str	r2, [r3, #0]
}
 8002e0e:	bf00      	nop
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bc80      	pop	{r7}
 8002e14:	4770      	bx	lr
 8002e16:	bf00      	nop
 8002e18:	20000138 	.word	0x20000138

08002e1c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b082      	sub	sp, #8
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002e24:	f000 f852 	bl	8002ecc <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002e28:	4b06      	ldr	r3, [pc, #24]	; (8002e44 <prvIdleTask+0x28>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d9f9      	bls.n	8002e24 <prvIdleTask+0x8>
            {
                taskYIELD();
 8002e30:	4b05      	ldr	r3, [pc, #20]	; (8002e48 <prvIdleTask+0x2c>)
 8002e32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e36:	601a      	str	r2, [r3, #0]
 8002e38:	f3bf 8f4f 	dsb	sy
 8002e3c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002e40:	e7f0      	b.n	8002e24 <prvIdleTask+0x8>
 8002e42:	bf00      	nop
 8002e44:	20000050 	.word	0x20000050
 8002e48:	e000ed04 	.word	0xe000ed04

08002e4c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b082      	sub	sp, #8
 8002e50:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002e52:	2300      	movs	r3, #0
 8002e54:	607b      	str	r3, [r7, #4]
 8002e56:	e00c      	b.n	8002e72 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002e58:	687a      	ldr	r2, [r7, #4]
 8002e5a:	4613      	mov	r3, r2
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	4413      	add	r3, r2
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	4a12      	ldr	r2, [pc, #72]	; (8002eac <prvInitialiseTaskLists+0x60>)
 8002e64:	4413      	add	r3, r2
 8002e66:	4618      	mov	r0, r3
 8002e68:	f7fe fd8e 	bl	8001988 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	3301      	adds	r3, #1
 8002e70:	607b      	str	r3, [r7, #4]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2b04      	cmp	r3, #4
 8002e76:	d9ef      	bls.n	8002e58 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002e78:	480d      	ldr	r0, [pc, #52]	; (8002eb0 <prvInitialiseTaskLists+0x64>)
 8002e7a:	f7fe fd85 	bl	8001988 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002e7e:	480d      	ldr	r0, [pc, #52]	; (8002eb4 <prvInitialiseTaskLists+0x68>)
 8002e80:	f7fe fd82 	bl	8001988 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002e84:	480c      	ldr	r0, [pc, #48]	; (8002eb8 <prvInitialiseTaskLists+0x6c>)
 8002e86:	f7fe fd7f 	bl	8001988 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8002e8a:	480c      	ldr	r0, [pc, #48]	; (8002ebc <prvInitialiseTaskLists+0x70>)
 8002e8c:	f7fe fd7c 	bl	8001988 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8002e90:	480b      	ldr	r0, [pc, #44]	; (8002ec0 <prvInitialiseTaskLists+0x74>)
 8002e92:	f7fe fd79 	bl	8001988 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002e96:	4b0b      	ldr	r3, [pc, #44]	; (8002ec4 <prvInitialiseTaskLists+0x78>)
 8002e98:	4a05      	ldr	r2, [pc, #20]	; (8002eb0 <prvInitialiseTaskLists+0x64>)
 8002e9a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002e9c:	4b0a      	ldr	r3, [pc, #40]	; (8002ec8 <prvInitialiseTaskLists+0x7c>)
 8002e9e:	4a05      	ldr	r2, [pc, #20]	; (8002eb4 <prvInitialiseTaskLists+0x68>)
 8002ea0:	601a      	str	r2, [r3, #0]
}
 8002ea2:	bf00      	nop
 8002ea4:	3708      	adds	r7, #8
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	20000050 	.word	0x20000050
 8002eb0:	200000b4 	.word	0x200000b4
 8002eb4:	200000c8 	.word	0x200000c8
 8002eb8:	200000e4 	.word	0x200000e4
 8002ebc:	200000f8 	.word	0x200000f8
 8002ec0:	20000110 	.word	0x20000110
 8002ec4:	200000dc 	.word	0x200000dc
 8002ec8:	200000e0 	.word	0x200000e0

08002ecc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b082      	sub	sp, #8
 8002ed0:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002ed2:	e019      	b.n	8002f08 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8002ed4:	f000 f9e2 	bl	800329c <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ed8:	4b10      	ldr	r3, [pc, #64]	; (8002f1c <prvCheckTasksWaitingTermination+0x50>)
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	68db      	ldr	r3, [r3, #12]
 8002ede:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	3304      	adds	r3, #4
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f7fe fdb2 	bl	8001a4e <uxListRemove>
                --uxCurrentNumberOfTasks;
 8002eea:	4b0d      	ldr	r3, [pc, #52]	; (8002f20 <prvCheckTasksWaitingTermination+0x54>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	3b01      	subs	r3, #1
 8002ef0:	4a0b      	ldr	r2, [pc, #44]	; (8002f20 <prvCheckTasksWaitingTermination+0x54>)
 8002ef2:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8002ef4:	4b0b      	ldr	r3, [pc, #44]	; (8002f24 <prvCheckTasksWaitingTermination+0x58>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	3b01      	subs	r3, #1
 8002efa:	4a0a      	ldr	r2, [pc, #40]	; (8002f24 <prvCheckTasksWaitingTermination+0x58>)
 8002efc:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8002efe:	f000 f9e7 	bl	80032d0 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f000 f810 	bl	8002f28 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002f08:	4b06      	ldr	r3, [pc, #24]	; (8002f24 <prvCheckTasksWaitingTermination+0x58>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d1e1      	bne.n	8002ed4 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8002f10:	bf00      	nop
 8002f12:	bf00      	nop
 8002f14:	3708      	adds	r7, #8
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	200000f8 	.word	0x200000f8
 8002f20:	20000124 	.word	0x20000124
 8002f24:	2000010c 	.word	0x2000010c

08002f28 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f34:	4618      	mov	r0, r3
 8002f36:	f000 fae9 	bl	800350c <vPortFree>
            vPortFree( pxTCB );
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f000 fae6 	bl	800350c <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002f40:	bf00      	nop
 8002f42:	3708      	adds	r7, #8
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}

08002f48 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002f48:	b480      	push	{r7}
 8002f4a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002f4c:	4b09      	ldr	r3, [pc, #36]	; (8002f74 <prvResetNextTaskUnblockTime+0x2c>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d104      	bne.n	8002f60 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002f56:	4b08      	ldr	r3, [pc, #32]	; (8002f78 <prvResetNextTaskUnblockTime+0x30>)
 8002f58:	f04f 32ff 	mov.w	r2, #4294967295
 8002f5c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002f5e:	e005      	b.n	8002f6c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002f60:	4b04      	ldr	r3, [pc, #16]	; (8002f74 <prvResetNextTaskUnblockTime+0x2c>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a03      	ldr	r2, [pc, #12]	; (8002f78 <prvResetNextTaskUnblockTime+0x30>)
 8002f6a:	6013      	str	r3, [r2, #0]
}
 8002f6c:	bf00      	nop
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bc80      	pop	{r7}
 8002f72:	4770      	bx	lr
 8002f74:	200000dc 	.word	0x200000dc
 8002f78:	20000144 	.word	0x20000144

08002f7c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b086      	sub	sp, #24
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d06c      	beq.n	800306c <xTaskPriorityDisinherit+0xf0>
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
            configASSERT( pxTCB->uxMutexesHeld );
            ( pxTCB->uxMutexesHeld )--;
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f96:	1e5a      	subs	r2, r3, #1
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	649a      	str	r2, [r3, #72]	; 0x48

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d061      	beq.n	800306c <xTaskPriorityDisinherit+0xf0>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d15d      	bne.n	800306c <xTaskPriorityDisinherit+0xf0>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	3304      	adds	r3, #4
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f7fe fd4a 	bl	8001a4e <uxListRemove>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d10a      	bne.n	8002fd6 <xTaskPriorityDisinherit+0x5a>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fca:	43da      	mvns	r2, r3
 8002fcc:	4b2a      	ldr	r3, [pc, #168]	; (8003078 <xTaskPriorityDisinherit+0xfc>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	4a29      	ldr	r2, [pc, #164]	; (8003078 <xTaskPriorityDisinherit+0xfc>)
 8002fd4:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe2:	f1c3 0205 	rsb	r2, r3, #5
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fee:	2201      	movs	r2, #1
 8002ff0:	409a      	lsls	r2, r3
 8002ff2:	4b21      	ldr	r3, [pc, #132]	; (8003078 <xTaskPriorityDisinherit+0xfc>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	4a1f      	ldr	r2, [pc, #124]	; (8003078 <xTaskPriorityDisinherit+0xfc>)
 8002ffa:	6013      	str	r3, [r2, #0]
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003000:	491e      	ldr	r1, [pc, #120]	; (800307c <xTaskPriorityDisinherit+0x100>)
 8003002:	4613      	mov	r3, r2
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	4413      	add	r3, r2
 8003008:	009b      	lsls	r3, r3, #2
 800300a:	440b      	add	r3, r1
 800300c:	3304      	adds	r3, #4
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	60fb      	str	r3, [r7, #12]
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	68fa      	ldr	r2, [r7, #12]
 8003016:	609a      	str	r2, [r3, #8]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	689a      	ldr	r2, [r3, #8]
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	60da      	str	r2, [r3, #12]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	693a      	ldr	r2, [r7, #16]
 8003026:	3204      	adds	r2, #4
 8003028:	605a      	str	r2, [r3, #4]
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	1d1a      	adds	r2, r3, #4
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	609a      	str	r2, [r3, #8]
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003036:	4613      	mov	r3, r2
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	4413      	add	r3, r2
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	4a0f      	ldr	r2, [pc, #60]	; (800307c <xTaskPriorityDisinherit+0x100>)
 8003040:	441a      	add	r2, r3
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	615a      	str	r2, [r3, #20]
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800304a:	490c      	ldr	r1, [pc, #48]	; (800307c <xTaskPriorityDisinherit+0x100>)
 800304c:	4613      	mov	r3, r2
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	4413      	add	r3, r2
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	440b      	add	r3, r1
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	1c59      	adds	r1, r3, #1
 800305a:	4808      	ldr	r0, [pc, #32]	; (800307c <xTaskPriorityDisinherit+0x100>)
 800305c:	4613      	mov	r3, r2
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	4413      	add	r3, r2
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	4403      	add	r3, r0
 8003066:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8003068:	2301      	movs	r3, #1
 800306a:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800306c:	697b      	ldr	r3, [r7, #20]
    }
 800306e:	4618      	mov	r0, r3
 8003070:	3718      	adds	r7, #24
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	2000012c 	.word	0x2000012c
 800307c:	20000050 	.word	0x20000050

08003080 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b086      	sub	sp, #24
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
 8003088:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800308a:	4b36      	ldr	r3, [pc, #216]	; (8003164 <prvAddCurrentTaskToDelayedList+0xe4>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003090:	4b35      	ldr	r3, [pc, #212]	; (8003168 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	3304      	adds	r3, #4
 8003096:	4618      	mov	r0, r3
 8003098:	f7fe fcd9 	bl	8001a4e <uxListRemove>
 800309c:	4603      	mov	r3, r0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d10b      	bne.n	80030ba <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80030a2:	4b31      	ldr	r3, [pc, #196]	; (8003168 <prvAddCurrentTaskToDelayedList+0xe8>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a8:	2201      	movs	r2, #1
 80030aa:	fa02 f303 	lsl.w	r3, r2, r3
 80030ae:	43da      	mvns	r2, r3
 80030b0:	4b2e      	ldr	r3, [pc, #184]	; (800316c <prvAddCurrentTaskToDelayedList+0xec>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4013      	ands	r3, r2
 80030b6:	4a2d      	ldr	r2, [pc, #180]	; (800316c <prvAddCurrentTaskToDelayedList+0xec>)
 80030b8:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030c0:	d124      	bne.n	800310c <prvAddCurrentTaskToDelayedList+0x8c>
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d021      	beq.n	800310c <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80030c8:	4b29      	ldr	r3, [pc, #164]	; (8003170 <prvAddCurrentTaskToDelayedList+0xf0>)
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	613b      	str	r3, [r7, #16]
 80030ce:	4b26      	ldr	r3, [pc, #152]	; (8003168 <prvAddCurrentTaskToDelayedList+0xe8>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	693a      	ldr	r2, [r7, #16]
 80030d4:	609a      	str	r2, [r3, #8]
 80030d6:	4b24      	ldr	r3, [pc, #144]	; (8003168 <prvAddCurrentTaskToDelayedList+0xe8>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	693a      	ldr	r2, [r7, #16]
 80030dc:	6892      	ldr	r2, [r2, #8]
 80030de:	60da      	str	r2, [r3, #12]
 80030e0:	4b21      	ldr	r3, [pc, #132]	; (8003168 <prvAddCurrentTaskToDelayedList+0xe8>)
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	3204      	adds	r2, #4
 80030ea:	605a      	str	r2, [r3, #4]
 80030ec:	4b1e      	ldr	r3, [pc, #120]	; (8003168 <prvAddCurrentTaskToDelayedList+0xe8>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	1d1a      	adds	r2, r3, #4
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	609a      	str	r2, [r3, #8]
 80030f6:	4b1c      	ldr	r3, [pc, #112]	; (8003168 <prvAddCurrentTaskToDelayedList+0xe8>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a1d      	ldr	r2, [pc, #116]	; (8003170 <prvAddCurrentTaskToDelayedList+0xf0>)
 80030fc:	615a      	str	r2, [r3, #20]
 80030fe:	4b1c      	ldr	r3, [pc, #112]	; (8003170 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	3301      	adds	r3, #1
 8003104:	4a1a      	ldr	r2, [pc, #104]	; (8003170 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003106:	6013      	str	r3, [r2, #0]
 8003108:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800310a:	e026      	b.n	800315a <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 800310c:	697a      	ldr	r2, [r7, #20]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4413      	add	r3, r2
 8003112:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003114:	4b14      	ldr	r3, [pc, #80]	; (8003168 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	68fa      	ldr	r2, [r7, #12]
 800311a:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 800311c:	68fa      	ldr	r2, [r7, #12]
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	429a      	cmp	r2, r3
 8003122:	d209      	bcs.n	8003138 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003124:	4b13      	ldr	r3, [pc, #76]	; (8003174 <prvAddCurrentTaskToDelayedList+0xf4>)
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	4b0f      	ldr	r3, [pc, #60]	; (8003168 <prvAddCurrentTaskToDelayedList+0xe8>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	3304      	adds	r3, #4
 800312e:	4619      	mov	r1, r3
 8003130:	4610      	mov	r0, r2
 8003132:	f7fe fc54 	bl	80019de <vListInsert>
}
 8003136:	e010      	b.n	800315a <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003138:	4b0f      	ldr	r3, [pc, #60]	; (8003178 <prvAddCurrentTaskToDelayedList+0xf8>)
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	4b0a      	ldr	r3, [pc, #40]	; (8003168 <prvAddCurrentTaskToDelayedList+0xe8>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	3304      	adds	r3, #4
 8003142:	4619      	mov	r1, r3
 8003144:	4610      	mov	r0, r2
 8003146:	f7fe fc4a 	bl	80019de <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800314a:	4b0c      	ldr	r3, [pc, #48]	; (800317c <prvAddCurrentTaskToDelayedList+0xfc>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	68fa      	ldr	r2, [r7, #12]
 8003150:	429a      	cmp	r2, r3
 8003152:	d202      	bcs.n	800315a <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8003154:	4a09      	ldr	r2, [pc, #36]	; (800317c <prvAddCurrentTaskToDelayedList+0xfc>)
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	6013      	str	r3, [r2, #0]
}
 800315a:	bf00      	nop
 800315c:	3718      	adds	r7, #24
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}
 8003162:	bf00      	nop
 8003164:	20000128 	.word	0x20000128
 8003168:	2000004c 	.word	0x2000004c
 800316c:	2000012c 	.word	0x2000012c
 8003170:	20000110 	.word	0x20000110
 8003174:	200000e0 	.word	0x200000e0
 8003178:	200000dc 	.word	0x200000dc
 800317c:	20000144 	.word	0x20000144

08003180 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003180:	b480      	push	{r7}
 8003182:	b085      	sub	sp, #20
 8003184:	af00      	add	r7, sp, #0
 8003186:	60f8      	str	r0, [r7, #12]
 8003188:	60b9      	str	r1, [r7, #8]
 800318a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                                      /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	3b04      	subs	r3, #4
 8003190:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003198:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	3b04      	subs	r3, #4
 800319e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	f023 0201 	bic.w	r2, r3, #1
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	3b04      	subs	r3, #4
 80031ae:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80031b0:	4a08      	ldr	r2, [pc, #32]	; (80031d4 <pxPortInitialiseStack+0x54>)
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                                   /* R12, R3, R2 and R1. */
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	3b14      	subs	r3, #20
 80031ba:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 80031bc:	687a      	ldr	r2, [r7, #4]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                                   /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	3b20      	subs	r3, #32
 80031c6:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80031c8:	68fb      	ldr	r3, [r7, #12]
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3714      	adds	r7, #20
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bc80      	pop	{r7}
 80031d2:	4770      	bx	lr
 80031d4:	080031d9 	.word	0x080031d9

080031d8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80031d8:	b480      	push	{r7}
 80031da:	b083      	sub	sp, #12
 80031dc:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 80031de:	2300      	movs	r3, #0
 80031e0:	603b      	str	r3, [r7, #0]
        __asm volatile
 80031e2:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80031e6:	f383 8811 	msr	BASEPRI, r3
 80031ea:	f3bf 8f6f 	isb	sy
 80031ee:	f3bf 8f4f 	dsb	sy
 80031f2:	607b      	str	r3, [r7, #4]
    }
 80031f4:	bf00      	nop
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80031f6:	bf00      	nop
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d0fc      	beq.n	80031f8 <prvTaskExitError+0x20>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80031fe:	bf00      	nop
 8003200:	bf00      	nop
 8003202:	370c      	adds	r7, #12
 8003204:	46bd      	mov	sp, r7
 8003206:	bc80      	pop	{r7}
 8003208:	4770      	bx	lr
 800320a:	0000      	movs	r0, r0
 800320c:	0000      	movs	r0, r0
	...

08003210 <vPortSVCHandler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003210:	4b07      	ldr	r3, [pc, #28]	; (8003230 <pxCurrentTCBConst2>)
 8003212:	6819      	ldr	r1, [r3, #0]
 8003214:	6808      	ldr	r0, [r1, #0]
 8003216:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800321a:	f380 8809 	msr	PSP, r0
 800321e:	f3bf 8f6f 	isb	sy
 8003222:	f04f 0000 	mov.w	r0, #0
 8003226:	f380 8811 	msr	BASEPRI, r0
 800322a:	f04e 0e0d 	orr.w	lr, lr, #13
 800322e:	4770      	bx	lr

08003230 <pxCurrentTCBConst2>:
 8003230:	2000004c 	.word	0x2000004c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003234:	bf00      	nop
 8003236:	bf00      	nop

08003238 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
    __asm volatile (
 8003238:	4806      	ldr	r0, [pc, #24]	; (8003254 <prvPortStartFirstTask+0x1c>)
 800323a:	6800      	ldr	r0, [r0, #0]
 800323c:	6800      	ldr	r0, [r0, #0]
 800323e:	f380 8808 	msr	MSP, r0
 8003242:	b662      	cpsie	i
 8003244:	b661      	cpsie	f
 8003246:	f3bf 8f4f 	dsb	sy
 800324a:	f3bf 8f6f 	isb	sy
 800324e:	df00      	svc	0
 8003250:	bf00      	nop
 8003252:	0000      	.short	0x0000
 8003254:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003258:	bf00      	nop
 800325a:	bf00      	nop

0800325c <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800325c:	b580      	push	{r7, lr}
 800325e:	af00      	add	r7, sp, #0
        *pucFirstUserPriorityRegister = ulOriginalPriority;
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8003260:	4b0c      	ldr	r3, [pc, #48]	; (8003294 <xPortStartScheduler+0x38>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a0b      	ldr	r2, [pc, #44]	; (8003294 <xPortStartScheduler+0x38>)
 8003266:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800326a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800326c:	4b09      	ldr	r3, [pc, #36]	; (8003294 <xPortStartScheduler+0x38>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a08      	ldr	r2, [pc, #32]	; (8003294 <xPortStartScheduler+0x38>)
 8003272:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003276:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003278:	f000 f890 	bl	800339c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800327c:	4b06      	ldr	r3, [pc, #24]	; (8003298 <xPortStartScheduler+0x3c>)
 800327e:	2200      	movs	r2, #0
 8003280:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003282:	f7ff ffd9 	bl	8003238 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003286:	f7ff fc39 	bl	8002afc <vTaskSwitchContext>
    prvTaskExitError();
 800328a:	f7ff ffa5 	bl	80031d8 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800328e:	2300      	movs	r3, #0
}
 8003290:	4618      	mov	r0, r3
 8003292:	bd80      	pop	{r7, pc}
 8003294:	e000ed20 	.word	0xe000ed20
 8003298:	20000008 	.word	0x20000008

0800329c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800329c:	b480      	push	{r7}
 800329e:	b083      	sub	sp, #12
 80032a0:	af00      	add	r7, sp, #0
        __asm volatile
 80032a2:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80032a6:	f383 8811 	msr	BASEPRI, r3
 80032aa:	f3bf 8f6f 	isb	sy
 80032ae:	f3bf 8f4f 	dsb	sy
 80032b2:	607b      	str	r3, [r7, #4]
    }
 80032b4:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80032b6:	4b05      	ldr	r3, [pc, #20]	; (80032cc <vPortEnterCritical+0x30>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	3301      	adds	r3, #1
 80032bc:	4a03      	ldr	r2, [pc, #12]	; (80032cc <vPortEnterCritical+0x30>)
 80032be:	6013      	str	r3, [r2, #0]
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
    }
}
 80032c0:	bf00      	nop
 80032c2:	370c      	adds	r7, #12
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bc80      	pop	{r7}
 80032c8:	4770      	bx	lr
 80032ca:	bf00      	nop
 80032cc:	20000008 	.word	0x20000008

080032d0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80032d0:	b480      	push	{r7}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
    uxCriticalNesting--;
 80032d6:	4b0a      	ldr	r3, [pc, #40]	; (8003300 <vPortExitCritical+0x30>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	3b01      	subs	r3, #1
 80032dc:	4a08      	ldr	r2, [pc, #32]	; (8003300 <vPortExitCritical+0x30>)
 80032de:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80032e0:	4b07      	ldr	r3, [pc, #28]	; (8003300 <vPortExitCritical+0x30>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d105      	bne.n	80032f4 <vPortExitCritical+0x24>
 80032e8:	2300      	movs	r3, #0
 80032ea:	607b      	str	r3, [r7, #4]
        __asm volatile
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	f383 8811 	msr	BASEPRI, r3
    }
 80032f2:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80032f4:	bf00      	nop
 80032f6:	370c      	adds	r7, #12
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bc80      	pop	{r7}
 80032fc:	4770      	bx	lr
 80032fe:	bf00      	nop
 8003300:	20000008 	.word	0x20000008
	...

08003310 <xPortPendSVHandler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003310:	f3ef 8009 	mrs	r0, PSP
 8003314:	f3bf 8f6f 	isb	sy
 8003318:	4b0d      	ldr	r3, [pc, #52]	; (8003350 <pxCurrentTCBConst>)
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003320:	6010      	str	r0, [r2, #0]
 8003322:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003326:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 800332a:	f380 8811 	msr	BASEPRI, r0
 800332e:	f7ff fbe5 	bl	8002afc <vTaskSwitchContext>
 8003332:	f04f 0000 	mov.w	r0, #0
 8003336:	f380 8811 	msr	BASEPRI, r0
 800333a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800333e:	6819      	ldr	r1, [r3, #0]
 8003340:	6808      	ldr	r0, [r1, #0]
 8003342:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003346:	f380 8809 	msr	PSP, r0
 800334a:	f3bf 8f6f 	isb	sy
 800334e:	4770      	bx	lr

08003350 <pxCurrentTCBConst>:
 8003350:	2000004c 	.word	0x2000004c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003354:	bf00      	nop
 8003356:	bf00      	nop

08003358 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b082      	sub	sp, #8
 800335c:	af00      	add	r7, sp, #0
        __asm volatile
 800335e:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8003362:	f383 8811 	msr	BASEPRI, r3
 8003366:	f3bf 8f6f 	isb	sy
 800336a:	f3bf 8f4f 	dsb	sy
 800336e:	607b      	str	r3, [r7, #4]
    }
 8003370:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003372:	f7ff fabd 	bl	80028f0 <xTaskIncrementTick>
 8003376:	4603      	mov	r3, r0
 8003378:	2b00      	cmp	r3, #0
 800337a:	d003      	beq.n	8003384 <xPortSysTickHandler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800337c:	4b06      	ldr	r3, [pc, #24]	; (8003398 <xPortSysTickHandler+0x40>)
 800337e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003382:	601a      	str	r2, [r3, #0]
 8003384:	2300      	movs	r3, #0
 8003386:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	f383 8811 	msr	BASEPRI, r3
    }
 800338e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8003390:	bf00      	nop
 8003392:	3708      	adds	r7, #8
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}
 8003398:	e000ed04 	.word	0xe000ed04

0800339c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800339c:	b480      	push	{r7}
 800339e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80033a0:	4b08      	ldr	r3, [pc, #32]	; (80033c4 <vPortSetupTimerInterrupt+0x28>)
 80033a2:	2200      	movs	r2, #0
 80033a4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80033a6:	4b08      	ldr	r3, [pc, #32]	; (80033c8 <vPortSetupTimerInterrupt+0x2c>)
 80033a8:	2200      	movs	r2, #0
 80033aa:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80033ac:	4b07      	ldr	r3, [pc, #28]	; (80033cc <vPortSetupTimerInterrupt+0x30>)
 80033ae:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80033b2:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80033b4:	4b03      	ldr	r3, [pc, #12]	; (80033c4 <vPortSetupTimerInterrupt+0x28>)
 80033b6:	2207      	movs	r2, #7
 80033b8:	601a      	str	r2, [r3, #0]
}
 80033ba:	bf00      	nop
 80033bc:	46bd      	mov	sp, r7
 80033be:	bc80      	pop	{r7}
 80033c0:	4770      	bx	lr
 80033c2:	bf00      	nop
 80033c4:	e000e010 	.word	0xe000e010
 80033c8:	e000e018 	.word	0xe000e018
 80033cc:	e000e014 	.word	0xe000e014

080033d0 <pvPortMalloc>:
        pxIterator->pxNextFreeBlock = pxBlockToInsert;                                                                              \
    }
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b08a      	sub	sp, #40	; 0x28
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    PRIVILEGED_DATA static BaseType_t xHeapHasBeenInitialised = pdFALSE;
    void * pvReturn = NULL;
 80033d8:	2300      	movs	r3, #0
 80033da:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 80033dc:	f7ff f984 	bl	80026e8 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( xHeapHasBeenInitialised == pdFALSE )
 80033e0:	4b46      	ldr	r3, [pc, #280]	; (80034fc <pvPortMalloc+0x12c>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d104      	bne.n	80033f2 <pvPortMalloc+0x22>
        {
            prvHeapInit();
 80033e8:	f000 f8dc 	bl	80035a4 <prvHeapInit>
            xHeapHasBeenInitialised = pdTRUE;
 80033ec:	4b43      	ldr	r3, [pc, #268]	; (80034fc <pvPortMalloc+0x12c>)
 80033ee:	2201      	movs	r2, #1
 80033f0:	601a      	str	r2, [r3, #0]
        }

        if( xWantedSize > 0 )
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d013      	beq.n	8003420 <pvPortMalloc+0x50>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = heapSTRUCT_SIZE + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 80033f8:	2308      	movs	r3, #8
 80033fa:	461a      	mov	r2, r3
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	f003 0307 	and.w	r3, r3, #7
 8003402:	1ad3      	subs	r3, r2, r3
 8003404:	3308      	adds	r3, #8
 8003406:	617b      	str	r3, [r7, #20]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	43db      	mvns	r3, r3
 800340c:	687a      	ldr	r2, [r7, #4]
 800340e:	429a      	cmp	r2, r3
 8003410:	d804      	bhi.n	800341c <pvPortMalloc+0x4c>
            {
                xWantedSize += xAdditionalRequiredSize;
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	4413      	add	r3, r2
 8003418:	607b      	str	r3, [r7, #4]
 800341a:	e001      	b.n	8003420 <pvPortMalloc+0x50>
            }
            else
            {
                xWantedSize = 0;
 800341c:	2300      	movs	r3, #0
 800341e:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2b00      	cmp	r3, #0
 8003424:	db63      	blt.n	80034ee <pvPortMalloc+0x11e>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d060      	beq.n	80034ee <pvPortMalloc+0x11e>
 800342c:	4b34      	ldr	r3, [pc, #208]	; (8003500 <pvPortMalloc+0x130>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	687a      	ldr	r2, [r7, #4]
 8003432:	429a      	cmp	r2, r3
 8003434:	d85b      	bhi.n	80034ee <pvPortMalloc+0x11e>
            {
                /* Blocks are stored in byte order - traverse the list from the start
                 * (smallest) block until one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003436:	4b33      	ldr	r3, [pc, #204]	; (8003504 <pvPortMalloc+0x134>)
 8003438:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800343a:	4b32      	ldr	r3, [pc, #200]	; (8003504 <pvPortMalloc+0x134>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003440:	e004      	b.n	800344c <pvPortMalloc+0x7c>
                {
                    pxPreviousBlock = pxBlock;
 8003442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003444:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8003446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800344c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	429a      	cmp	r2, r3
 8003454:	d903      	bls.n	800345e <pvPortMalloc+0x8e>
 8003456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d1f1      	bne.n	8003442 <pvPortMalloc+0x72>
                }

                /* If we found the end marker then a block of adequate size was not found. */
                if( pxBlock != &xEnd )
 800345e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003460:	4a29      	ldr	r2, [pc, #164]	; (8003508 <pvPortMalloc+0x138>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d043      	beq.n	80034ee <pvPortMalloc+0x11e>
                {
                    /* Return the memory space - jumping over the BlockLink_t structure
                     * at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
 8003466:	6a3b      	ldr	r3, [r7, #32]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	2208      	movs	r2, #8
 800346c:	4413      	add	r3, r2
 800346e:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out of the
                     * list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	6a3b      	ldr	r3, [r7, #32]
 8003476:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347a:	685a      	ldr	r2, [r3, #4]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	2208      	movs	r2, #8
 8003482:	0052      	lsls	r2, r2, #1
 8003484:	4293      	cmp	r3, r2
 8003486:	d922      	bls.n	80034ce <pvPortMalloc+0xfe>
                    {
                        /* This block is to be split into two.  Create a new block
                         * following the number of bytes requested. The void cast is
                         * used to prevent byte alignment warnings from the compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003488:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4413      	add	r3, r2
 800348e:	613b      	str	r3, [r7, #16]

                        /* Calculate the sizes of two blocks split from the single
                         * block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003492:	685a      	ldr	r2, [r3, #4]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	1ad2      	subs	r2, r2, r3
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800349c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	60fb      	str	r3, [r7, #12]
 80034a8:	4b16      	ldr	r3, [pc, #88]	; (8003504 <pvPortMalloc+0x134>)
 80034aa:	61bb      	str	r3, [r7, #24]
 80034ac:	e002      	b.n	80034b4 <pvPortMalloc+0xe4>
 80034ae:	69bb      	ldr	r3, [r7, #24]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	61bb      	str	r3, [r7, #24]
 80034b4:	69bb      	ldr	r3, [r7, #24]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	68fa      	ldr	r2, [r7, #12]
 80034bc:	429a      	cmp	r2, r3
 80034be:	d8f6      	bhi.n	80034ae <pvPortMalloc+0xde>
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	601a      	str	r2, [r3, #0]
 80034c8:	69bb      	ldr	r3, [r7, #24]
 80034ca:	693a      	ldr	r2, [r7, #16]
 80034cc:	601a      	str	r2, [r3, #0]
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80034ce:	4b0c      	ldr	r3, [pc, #48]	; (8003500 <pvPortMalloc+0x130>)
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	1ad3      	subs	r3, r2, r3
 80034d8:	4a09      	ldr	r2, [pc, #36]	; (8003500 <pvPortMalloc+0x130>)
 80034da:	6013      	str	r3, [r2, #0]

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 80034dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80034e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e6:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80034e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ea:	2200      	movs	r2, #0
 80034ec:	601a      	str	r2, [r3, #0]
            }
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80034ee:	f7ff f909 	bl	8002704 <xTaskResumeAll>
            vApplicationMallocFailedHook();
        }
    }
    #endif

    return pvReturn;
 80034f2:	69fb      	ldr	r3, [r7, #28]
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3728      	adds	r7, #40	; 0x28
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}
 80034fc:	20004560 	.word	0x20004560
 8003500:	2000000c 	.word	0x2000000c
 8003504:	20004550 	.word	0x20004550
 8003508:	20004558 	.word	0x20004558

0800350c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b086      	sub	sp, #24
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	613b      	str	r3, [r7, #16]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d039      	beq.n	8003592 <vPortFree+0x86>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= heapSTRUCT_SIZE;
 800351e:	2308      	movs	r3, #8
 8003520:	425b      	negs	r3, r3
 8003522:	693a      	ldr	r2, [r7, #16]
 8003524:	4413      	add	r3, r2
 8003526:	613b      	str	r3, [r7, #16]

        /* This unexpected casting is to keep some compilers from issuing
         * byte alignment warnings. */
        pxLink = ( void * ) puc;
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	60fb      	str	r3, [r7, #12]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	0fdb      	lsrs	r3, r3, #31
 8003532:	f003 0301 	and.w	r3, r3, #1
 8003536:	b2db      	uxtb	r3, r3
 8003538:	2b00      	cmp	r3, #0
 800353a:	d02a      	beq.n	8003592 <vPortFree+0x86>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d126      	bne.n	8003592 <vPortFree+0x86>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + heapSTRUCT_SIZE, 0, pxLink->xBlockSize - heapSTRUCT_SIZE );
                }
                #endif

                vTaskSuspendAll();
 8003550:	f7ff f8ca 	bl	80026e8 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	60bb      	str	r3, [r7, #8]
 800355a:	4b10      	ldr	r3, [pc, #64]	; (800359c <vPortFree+0x90>)
 800355c:	617b      	str	r3, [r7, #20]
 800355e:	e002      	b.n	8003566 <vPortFree+0x5a>
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	617b      	str	r3, [r7, #20]
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	68ba      	ldr	r2, [r7, #8]
 800356e:	429a      	cmp	r2, r3
 8003570:	d8f6      	bhi.n	8003560 <vPortFree+0x54>
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	601a      	str	r2, [r3, #0]
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	68fa      	ldr	r2, [r7, #12]
 800357e:	601a      	str	r2, [r3, #0]
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	685a      	ldr	r2, [r3, #4]
 8003584:	4b06      	ldr	r3, [pc, #24]	; (80035a0 <vPortFree+0x94>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4413      	add	r3, r2
 800358a:	4a05      	ldr	r2, [pc, #20]	; (80035a0 <vPortFree+0x94>)
 800358c:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                }
                ( void ) xTaskResumeAll();
 800358e:	f7ff f8b9 	bl	8002704 <xTaskResumeAll>
            }
        }
    }
}
 8003592:	bf00      	nop
 8003594:	3718      	adds	r7, #24
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	20004550 	.word	0x20004550
 80035a0:	2000000c 	.word	0x2000000c

080035a4 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80035a4:	b480      	push	{r7}
 80035a6:	b083      	sub	sp, #12
 80035a8:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;

    /* Ensure the heap starts on a correctly aligned boundary. */
    pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 80035aa:	4b0f      	ldr	r3, [pc, #60]	; (80035e8 <prvHeapInit+0x44>)
 80035ac:	f023 0307 	bic.w	r3, r3, #7
 80035b0:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80035b2:	4a0e      	ldr	r2, [pc, #56]	; (80035ec <prvHeapInit+0x48>)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80035b8:	4b0c      	ldr	r3, [pc, #48]	; (80035ec <prvHeapInit+0x48>)
 80035ba:	2200      	movs	r2, #0
 80035bc:	605a      	str	r2, [r3, #4]

    /* xEnd is used to mark the end of the list of free blocks. */
    xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
 80035be:	4b0c      	ldr	r3, [pc, #48]	; (80035f0 <prvHeapInit+0x4c>)
 80035c0:	f244 32f8 	movw	r2, #17400	; 0x43f8
 80035c4:	605a      	str	r2, [r3, #4]
    xEnd.pxNextFreeBlock = NULL;
 80035c6:	4b0a      	ldr	r3, [pc, #40]	; (80035f0 <prvHeapInit+0x4c>)
 80035c8:	2200      	movs	r2, #0
 80035ca:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	f244 32f8 	movw	r2, #17400	; 0x43f8
 80035d6:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	4a05      	ldr	r2, [pc, #20]	; (80035f0 <prvHeapInit+0x4c>)
 80035dc:	601a      	str	r2, [r3, #0]
}
 80035de:	bf00      	nop
 80035e0:	370c      	adds	r7, #12
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bc80      	pop	{r7}
 80035e6:	4770      	bx	lr
 80035e8:	20000157 	.word	0x20000157
 80035ec:	20004550 	.word	0x20004550
 80035f0:	20004558 	.word	0x20004558

080035f4 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(const USART_TypeDef *USARTx)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b083      	sub	sp, #12
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003604:	2b80      	cmp	r3, #128	; 0x80
 8003606:	bf0c      	ite	eq
 8003608:	2301      	moveq	r3, #1
 800360a:	2300      	movne	r3, #0
 800360c:	b2db      	uxtb	r3, r3
}
 800360e:	4618      	mov	r0, r3
 8003610:	370c      	adds	r7, #12
 8003612:	46bd      	mov	sp, r7
 8003614:	bc80      	pop	{r7}
 8003616:	4770      	bx	lr

08003618 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8003618:	b480      	push	{r7}
 800361a:	b089      	sub	sp, #36	; 0x24
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	330c      	adds	r3, #12
 8003624:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	e853 3f00 	ldrex	r3, [r3]
 800362c:	60bb      	str	r3, [r7, #8]
   return(result);
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	f043 0320 	orr.w	r3, r3, #32
 8003634:	61fb      	str	r3, [r7, #28]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	330c      	adds	r3, #12
 800363a:	69fa      	ldr	r2, [r7, #28]
 800363c:	61ba      	str	r2, [r7, #24]
 800363e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003640:	6979      	ldr	r1, [r7, #20]
 8003642:	69ba      	ldr	r2, [r7, #24]
 8003644:	e841 2300 	strex	r3, r2, [r1]
 8003648:	613b      	str	r3, [r7, #16]
   return(result);
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d1e7      	bne.n	8003620 <LL_USART_EnableIT_RXNE+0x8>
}
 8003650:	bf00      	nop
 8003652:	bf00      	nop
 8003654:	3724      	adds	r7, #36	; 0x24
 8003656:	46bd      	mov	sp, r7
 8003658:	bc80      	pop	{r7}
 800365a:	4770      	bx	lr

0800365c <LL_USART_EnableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_EnableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TXE(USART_TypeDef *USARTx)
{
 800365c:	b480      	push	{r7}
 800365e:	b089      	sub	sp, #36	; 0x24
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	330c      	adds	r3, #12
 8003668:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	e853 3f00 	ldrex	r3, [r3]
 8003670:	60bb      	str	r3, [r7, #8]
   return(result);
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003678:	61fb      	str	r3, [r7, #28]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	330c      	adds	r3, #12
 800367e:	69fa      	ldr	r2, [r7, #28]
 8003680:	61ba      	str	r2, [r7, #24]
 8003682:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003684:	6979      	ldr	r1, [r7, #20]
 8003686:	69ba      	ldr	r2, [r7, #24]
 8003688:	e841 2300 	strex	r3, r2, [r1]
 800368c:	613b      	str	r3, [r7, #16]
   return(result);
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d1e7      	bne.n	8003664 <LL_USART_EnableIT_TXE+0x8>
}
 8003694:	bf00      	nop
 8003696:	bf00      	nop
 8003698:	3724      	adds	r7, #36	; 0x24
 800369a:	46bd      	mov	sp, r7
 800369c:	bc80      	pop	{r7}
 800369e:	4770      	bx	lr

080036a0 <LL_USART_DisableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_DisableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_RXNE(USART_TypeDef *USARTx)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b089      	sub	sp, #36	; 0x24
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	330c      	adds	r3, #12
 80036ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	e853 3f00 	ldrex	r3, [r3]
 80036b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	f023 0320 	bic.w	r3, r3, #32
 80036bc:	61fb      	str	r3, [r7, #28]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	330c      	adds	r3, #12
 80036c2:	69fa      	ldr	r2, [r7, #28]
 80036c4:	61ba      	str	r2, [r7, #24]
 80036c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036c8:	6979      	ldr	r1, [r7, #20]
 80036ca:	69ba      	ldr	r2, [r7, #24]
 80036cc:	e841 2300 	strex	r3, r2, [r1]
 80036d0:	613b      	str	r3, [r7, #16]
   return(result);
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d1e7      	bne.n	80036a8 <LL_USART_DisableIT_RXNE+0x8>
}
 80036d8:	bf00      	nop
 80036da:	bf00      	nop
 80036dc:	3724      	adds	r7, #36	; 0x24
 80036de:	46bd      	mov	sp, r7
 80036e0:	bc80      	pop	{r7}
 80036e2:	4770      	bx	lr

080036e4 <LL_USART_DisableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_DisableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_TXE(USART_TypeDef *USARTx)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b089      	sub	sp, #36	; 0x24
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	330c      	adds	r3, #12
 80036f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	e853 3f00 	ldrex	r3, [r3]
 80036f8:	60bb      	str	r3, [r7, #8]
   return(result);
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003700:	61fb      	str	r3, [r7, #28]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	330c      	adds	r3, #12
 8003706:	69fa      	ldr	r2, [r7, #28]
 8003708:	61ba      	str	r2, [r7, #24]
 800370a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800370c:	6979      	ldr	r1, [r7, #20]
 800370e:	69ba      	ldr	r2, [r7, #24]
 8003710:	e841 2300 	strex	r3, r2, [r1]
 8003714:	613b      	str	r3, [r7, #16]
   return(result);
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d1e7      	bne.n	80036ec <LL_USART_DisableIT_TXE+0x8>
}
 800371c:	bf00      	nop
 800371e:	bf00      	nop
 8003720:	3724      	adds	r7, #36	; 0x24
 8003722:	46bd      	mov	sp, r7
 8003724:	bc80      	pop	{r7}
 8003726:	4770      	bx	lr

08003728 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8003728:	b480      	push	{r7}
 800372a:	b083      	sub	sp, #12
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	460b      	mov	r3, r1
 8003732:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8003734:	78fa      	ldrb	r2, [r7, #3]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	605a      	str	r2, [r3, #4]
}
 800373a:	bf00      	nop
 800373c:	370c      	adds	r7, #12
 800373e:	46bd      	mov	sp, r7
 8003740:	bc80      	pop	{r7}
 8003742:	4770      	bx	lr

08003744 <IsBufferFull>:
//*****************************************************************************
#ifdef UART_BUFFERED
static bool
IsBufferFull(volatile uint32_t *pui32Read,
             volatile uint32_t *pui32Write, uint32_t ui32Size)
{
 8003744:	b480      	push	{r7}
 8003746:	b087      	sub	sp, #28
 8003748:	af00      	add	r7, sp, #0
 800374a:	60f8      	str	r0, [r7, #12]
 800374c:	60b9      	str	r1, [r7, #8]
 800374e:	607a      	str	r2, [r7, #4]
    uint32_t ui32Write;
    uint32_t ui32Read;

    ui32Write = *pui32Write;
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	617b      	str	r3, [r7, #20]
    ui32Read = *pui32Read;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	613b      	str	r3, [r7, #16]

    return((((ui32Write + 1) % ui32Size) == ui32Read) ? true : false);
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	3301      	adds	r3, #1
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	fbb3 f2f2 	udiv	r2, r3, r2
 8003766:	6879      	ldr	r1, [r7, #4]
 8003768:	fb01 f202 	mul.w	r2, r1, r2
 800376c:	1a9b      	subs	r3, r3, r2
 800376e:	693a      	ldr	r2, [r7, #16]
 8003770:	429a      	cmp	r2, r3
 8003772:	bf0c      	ite	eq
 8003774:	2301      	moveq	r3, #1
 8003776:	2300      	movne	r3, #0
 8003778:	b2db      	uxtb	r3, r3
}
 800377a:	4618      	mov	r0, r3
 800377c:	371c      	adds	r7, #28
 800377e:	46bd      	mov	sp, r7
 8003780:	bc80      	pop	{r7}
 8003782:	4770      	bx	lr

08003784 <IsBufferEmpty>:
//*****************************************************************************
#ifdef UART_BUFFERED
static bool
IsBufferEmpty(volatile uint32_t *pui32Read,
              volatile uint32_t *pui32Write)
{
 8003784:	b480      	push	{r7}
 8003786:	b085      	sub	sp, #20
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
 800378c:	6039      	str	r1, [r7, #0]
    uint32_t ui32Write;
    uint32_t ui32Read;

    ui32Write = *pui32Write;
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	60fb      	str	r3, [r7, #12]
    ui32Read = *pui32Read;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	60bb      	str	r3, [r7, #8]

    return((ui32Write == ui32Read) ? true : false);
 800379a:	68fa      	ldr	r2, [r7, #12]
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	429a      	cmp	r2, r3
 80037a0:	bf0c      	ite	eq
 80037a2:	2301      	moveq	r3, #1
 80037a4:	2300      	movne	r3, #0
 80037a6:	b2db      	uxtb	r3, r3
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3714      	adds	r7, #20
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bc80      	pop	{r7}
 80037b0:	4770      	bx	lr
	...

080037b4 <UARTPrimeTransmit>:
//
//*****************************************************************************
#ifdef UART_BUFFERED
static void
UARTPrimeTransmit(USART_TypeDef *stdUsart)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b082      	sub	sp, #8
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
    //
    // Do we have any data to transmit?
    //
    if(!TX_BUFFER_EMPTY)
 80037bc:	4914      	ldr	r1, [pc, #80]	; (8003810 <UARTPrimeTransmit+0x5c>)
 80037be:	4815      	ldr	r0, [pc, #84]	; (8003814 <UARTPrimeTransmit+0x60>)
 80037c0:	f7ff ffe0 	bl	8003784 <IsBufferEmpty>
 80037c4:	4603      	mov	r3, r0
 80037c6:	f083 0301 	eor.w	r3, r3, #1
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d01a      	beq.n	8003806 <UARTPrimeTransmit+0x52>
    {
        //
        // Disable the UART interrupt.  If we don't do this there is a race
        // condition which can cause the read index to be corrupted.
        //
    	LL_USART_DisableIT_TXE(stdUsart);
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	f7ff ff87 	bl	80036e4 <LL_USART_DisableIT_TXE>

        //
        // Yes - take some characters out of the transmit buffer and feed
        // them to the UART transmit FIFO.
        //
    	if (LL_USART_IsActiveFlag_TXE(stdUsart))
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f7ff ff0c 	bl	80035f4 <LL_USART_IsActiveFlag_TXE>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d00e      	beq.n	8003800 <UARTPrimeTransmit+0x4c>
    	{
        	LL_USART_TransmitData8(stdUsart,
 80037e2:	4b0c      	ldr	r3, [pc, #48]	; (8003814 <UARTPrimeTransmit+0x60>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a0c      	ldr	r2, [pc, #48]	; (8003818 <UARTPrimeTransmit+0x64>)
 80037e8:	5cd3      	ldrb	r3, [r2, r3]
 80037ea:	4619      	mov	r1, r3
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	f7ff ff9b 	bl	8003728 <LL_USART_TransmitData8>
                                      g_pcUARTTxBuffer[g_ui32UARTTxReadIndex]);
            ADVANCE_TX_BUFFER_INDEX(g_ui32UARTTxReadIndex);
 80037f2:	4b08      	ldr	r3, [pc, #32]	; (8003814 <UARTPrimeTransmit+0x60>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	3301      	adds	r3, #1
 80037f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037fc:	4a05      	ldr	r2, [pc, #20]	; (8003814 <UARTPrimeTransmit+0x60>)
 80037fe:	6013      	str	r3, [r2, #0]
    	}
        //
        // Reenable the UART interrupt.
        //
        LL_USART_EnableIT_TXE(stdUsart);
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	f7ff ff2b 	bl	800365c <LL_USART_EnableIT_TXE>
    }
}
 8003806:	bf00      	nop
 8003808:	3708      	adds	r7, #8
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
 800380e:	bf00      	nop
 8003810:	20004968 	.word	0x20004968
 8003814:	2000496c 	.word	0x2000496c
 8003818:	20004568 	.word	0x20004568

0800381c <UARTStdioConfig>:
//! \return None.
//
//*****************************************************************************
void
UARTStdioConfig(USART_TypeDef *Usart, bool bDisableEcho)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b082      	sub	sp, #8
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	460b      	mov	r3, r1
 8003826:	70fb      	strb	r3, [r7, #3]

    stdUsart = Usart;
 8003828:	4a09      	ldr	r2, [pc, #36]	; (8003850 <UARTStdioConfig+0x34>)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6013      	str	r3, [r2, #0]
    g_bDisableEcho = bDisableEcho;
 800382e:	4a09      	ldr	r2, [pc, #36]	; (8003854 <UARTStdioConfig+0x38>)
 8003830:	78fb      	ldrb	r3, [r7, #3]
 8003832:	7013      	strb	r3, [r2, #0]


    //
    // Flush both the buffers.
    //
    UARTFlushRx();
 8003834:	f000 fa82 	bl	8003d3c <UARTFlushRx>
    UARTFlushTx(true);
 8003838:	2001      	movs	r0, #1
 800383a:	f000 fa99 	bl	8003d70 <UARTFlushTx>
    // We are configured for buffered output so enable the master interrupt
    // for this UART and the receive interrupts.  We don't actually enable the
    // transmit interrupt in the UART itself until some data has been placed
    // in the transmit buffer.
    //
    LL_USART_EnableIT_RXNE(stdUsart);
 800383e:	4b04      	ldr	r3, [pc, #16]	; (8003850 <UARTStdioConfig+0x34>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4618      	mov	r0, r3
 8003844:	f7ff fee8 	bl	8003618 <LL_USART_EnableIT_RXNE>

#endif

}
 8003848:	bf00      	nop
 800384a:	3708      	adds	r7, #8
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}
 8003850:	200049f8 	.word	0x200049f8
 8003854:	20004564 	.word	0x20004564

08003858 <UARTwrite>:
//! \return Returns the count of characters written.
//
//*****************************************************************************
int
UARTwrite(const char *pcBuf, uint32_t ui32Len)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b084      	sub	sp, #16
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	6039      	str	r1, [r7, #0]
    //
    // Check for valid arguments.
    //
    assert_param(pcBuf != 0);

    LL_USART_DisableIT_TXE(stdUsart);
 8003862:	4b2f      	ldr	r3, [pc, #188]	; (8003920 <UARTwrite+0xc8>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4618      	mov	r0, r3
 8003868:	f7ff ff3c 	bl	80036e4 <LL_USART_DisableIT_TXE>
    //
    // Send the characters
    //
    for(uIdx = 0; uIdx < ui32Len; uIdx++)
 800386c:	2300      	movs	r3, #0
 800386e:	60fb      	str	r3, [r7, #12]
 8003870:	e042      	b.n	80038f8 <UARTwrite+0xa0>
    {
        //
        // If the character to the UART is \n, then add a \r before it so that
        // \n is translated to \n\r in the output.
        //
        if(pcBuf[uIdx] == '\n')
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	4413      	add	r3, r2
 8003878:	781b      	ldrb	r3, [r3, #0]
 800387a:	2b0a      	cmp	r3, #10
 800387c:	d118      	bne.n	80038b0 <UARTwrite+0x58>
        {
            if(!TX_BUFFER_FULL)
 800387e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003882:	4928      	ldr	r1, [pc, #160]	; (8003924 <UARTwrite+0xcc>)
 8003884:	4828      	ldr	r0, [pc, #160]	; (8003928 <UARTwrite+0xd0>)
 8003886:	f7ff ff5d 	bl	8003744 <IsBufferFull>
 800388a:	4603      	mov	r3, r0
 800388c:	f083 0301 	eor.w	r3, r3, #1
 8003890:	b2db      	uxtb	r3, r3
 8003892:	2b00      	cmp	r3, #0
 8003894:	d035      	beq.n	8003902 <UARTwrite+0xaa>
            {
                g_pcUARTTxBuffer[g_ui32UARTTxWriteIndex] = '\r';
 8003896:	4b23      	ldr	r3, [pc, #140]	; (8003924 <UARTwrite+0xcc>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a24      	ldr	r2, [pc, #144]	; (800392c <UARTwrite+0xd4>)
 800389c:	210d      	movs	r1, #13
 800389e:	54d1      	strb	r1, [r2, r3]
                ADVANCE_TX_BUFFER_INDEX(g_ui32UARTTxWriteIndex);
 80038a0:	4b20      	ldr	r3, [pc, #128]	; (8003924 <UARTwrite+0xcc>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	3301      	adds	r3, #1
 80038a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038aa:	4a1e      	ldr	r2, [pc, #120]	; (8003924 <UARTwrite+0xcc>)
 80038ac:	6013      	str	r3, [r2, #0]
 80038ae:	e005      	b.n	80038bc <UARTwrite+0x64>
                // Buffer is full - discard remaining characters and return.
                //
                break;
            }
        }
        else if(pcBuf[uIdx] == 0)
 80038b0:	687a      	ldr	r2, [r7, #4]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	4413      	add	r3, r2
 80038b6:	781b      	ldrb	r3, [r3, #0]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d024      	beq.n	8003906 <UARTwrite+0xae>
		}

        //
        // Send the character to the UART output.
        //
        if(!TX_BUFFER_FULL)
 80038bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80038c0:	4918      	ldr	r1, [pc, #96]	; (8003924 <UARTwrite+0xcc>)
 80038c2:	4819      	ldr	r0, [pc, #100]	; (8003928 <UARTwrite+0xd0>)
 80038c4:	f7ff ff3e 	bl	8003744 <IsBufferFull>
 80038c8:	4603      	mov	r3, r0
 80038ca:	f083 0301 	eor.w	r3, r3, #1
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d01a      	beq.n	800390a <UARTwrite+0xb2>
        {
            g_pcUARTTxBuffer[g_ui32UARTTxWriteIndex] = pcBuf[uIdx];
 80038d4:	687a      	ldr	r2, [r7, #4]
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	441a      	add	r2, r3
 80038da:	4b12      	ldr	r3, [pc, #72]	; (8003924 <UARTwrite+0xcc>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	7811      	ldrb	r1, [r2, #0]
 80038e0:	4a12      	ldr	r2, [pc, #72]	; (800392c <UARTwrite+0xd4>)
 80038e2:	54d1      	strb	r1, [r2, r3]
            ADVANCE_TX_BUFFER_INDEX(g_ui32UARTTxWriteIndex);
 80038e4:	4b0f      	ldr	r3, [pc, #60]	; (8003924 <UARTwrite+0xcc>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	3301      	adds	r3, #1
 80038ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038ee:	4a0d      	ldr	r2, [pc, #52]	; (8003924 <UARTwrite+0xcc>)
 80038f0:	6013      	str	r3, [r2, #0]
    for(uIdx = 0; uIdx < ui32Len; uIdx++)
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	3301      	adds	r3, #1
 80038f6:	60fb      	str	r3, [r7, #12]
 80038f8:	68fa      	ldr	r2, [r7, #12]
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d3b8      	bcc.n	8003872 <UARTwrite+0x1a>
 8003900:	e004      	b.n	800390c <UARTwrite+0xb4>
                break;
 8003902:	bf00      	nop
 8003904:	e002      	b.n	800390c <UARTwrite+0xb4>
        	break;
 8003906:	bf00      	nop
 8003908:	e000      	b.n	800390c <UARTwrite+0xb4>
        else
        {
            //
            // Buffer is full - discard remaining characters and return.
            //
            break;
 800390a:	bf00      	nop
    //
    // If we have anything in the buffer, make sure that the UART is set
    // up to transmit it.
    //

        UARTPrimeTransmit(stdUsart);
 800390c:	4b04      	ldr	r3, [pc, #16]	; (8003920 <UARTwrite+0xc8>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4618      	mov	r0, r3
 8003912:	f7ff ff4f 	bl	80037b4 <UARTPrimeTransmit>

    //
    // Return the number of characters written.
    //
    return(uIdx);
 8003916:	68fb      	ldr	r3, [r7, #12]
    //
    // Return the number of characters written.
    //
    return(uIdx);
#endif
}
 8003918:	4618      	mov	r0, r3
 800391a:	3710      	adds	r7, #16
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}
 8003920:	200049f8 	.word	0x200049f8
 8003924:	20004968 	.word	0x20004968
 8003928:	2000496c 	.word	0x2000496c
 800392c:	20004568 	.word	0x20004568

08003930 <UARTvprintf>:
//! \return None.
//
//*****************************************************************************
void
UARTvprintf(const char *pcString, va_list vaArgP)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b08e      	sub	sp, #56	; 0x38
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	6039      	str	r1, [r7, #0]
    assert_param(pcString != 0);

    //
    // Loop while there are more characters in the string.
    //
    while(*pcString)
 800393a:	e1dc      	b.n	8003cf6 <UARTvprintf+0x3c6>
    {
        //
        // Find the first non-% character, or the end of the string.
        //
        for(ui32Idx = 0;
 800393c:	2300      	movs	r3, #0
 800393e:	637b      	str	r3, [r7, #52]	; 0x34
 8003940:	e002      	b.n	8003948 <UARTvprintf+0x18>
            (pcString[ui32Idx] != '%') && (pcString[ui32Idx] != '\0');
            ui32Idx++)
 8003942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003944:	3301      	adds	r3, #1
 8003946:	637b      	str	r3, [r7, #52]	; 0x34
            (pcString[ui32Idx] != '%') && (pcString[ui32Idx] != '\0');
 8003948:	687a      	ldr	r2, [r7, #4]
 800394a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800394c:	4413      	add	r3, r2
 800394e:	781b      	ldrb	r3, [r3, #0]
 8003950:	2b25      	cmp	r3, #37	; 0x25
 8003952:	d005      	beq.n	8003960 <UARTvprintf+0x30>
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003958:	4413      	add	r3, r2
 800395a:	781b      	ldrb	r3, [r3, #0]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d1f0      	bne.n	8003942 <UARTvprintf+0x12>
        }

        //
        // Write this portion of the string.
        //
        UARTwrite(pcString, ui32Idx);
 8003960:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f7ff ff78 	bl	8003858 <UARTwrite>

        //
        // Skip the portion of the string that was written.
        //
        pcString += ui32Idx;
 8003968:	687a      	ldr	r2, [r7, #4]
 800396a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800396c:	4413      	add	r3, r2
 800396e:	607b      	str	r3, [r7, #4]

        //
        // See if the next character is a %.
        //
        if(*pcString == '%')
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	781b      	ldrb	r3, [r3, #0]
 8003974:	2b25      	cmp	r3, #37	; 0x25
 8003976:	f040 81be 	bne.w	8003cf6 <UARTvprintf+0x3c6>
        {
            //
            // Skip the %.
            //
            pcString++;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	3301      	adds	r3, #1
 800397e:	607b      	str	r3, [r7, #4]

            //
            // Set the digit count to zero, and the fill character to space
            // (in other words, to the defaults).
            //
            ui32Count = 0;
 8003980:	2300      	movs	r3, #0
 8003982:	62fb      	str	r3, [r7, #44]	; 0x2c
            cFill = ' ';
 8003984:	2320      	movs	r3, #32
 8003986:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
again:

            //
            // Determine how to handle the next character.
            //
            switch(*pcString++)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	1c5a      	adds	r2, r3, #1
 800398e:	607a      	str	r2, [r7, #4]
 8003990:	781b      	ldrb	r3, [r3, #0]
 8003992:	3b25      	subs	r3, #37	; 0x25
 8003994:	2b53      	cmp	r3, #83	; 0x53
 8003996:	f200 81a9 	bhi.w	8003cec <UARTvprintf+0x3bc>
 800399a:	a201      	add	r2, pc, #4	; (adr r2, 80039a0 <UARTvprintf+0x70>)
 800399c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039a0:	08003cdf 	.word	0x08003cdf
 80039a4:	08003ced 	.word	0x08003ced
 80039a8:	08003ced 	.word	0x08003ced
 80039ac:	08003ced 	.word	0x08003ced
 80039b0:	08003ced 	.word	0x08003ced
 80039b4:	08003ced 	.word	0x08003ced
 80039b8:	08003ced 	.word	0x08003ced
 80039bc:	08003ced 	.word	0x08003ced
 80039c0:	08003ced 	.word	0x08003ced
 80039c4:	08003ced 	.word	0x08003ced
 80039c8:	08003ced 	.word	0x08003ced
 80039cc:	08003af1 	.word	0x08003af1
 80039d0:	08003af1 	.word	0x08003af1
 80039d4:	08003af1 	.word	0x08003af1
 80039d8:	08003af1 	.word	0x08003af1
 80039dc:	08003af1 	.word	0x08003af1
 80039e0:	08003af1 	.word	0x08003af1
 80039e4:	08003af1 	.word	0x08003af1
 80039e8:	08003af1 	.word	0x08003af1
 80039ec:	08003af1 	.word	0x08003af1
 80039f0:	08003af1 	.word	0x08003af1
 80039f4:	08003ced 	.word	0x08003ced
 80039f8:	08003ced 	.word	0x08003ced
 80039fc:	08003ced 	.word	0x08003ced
 8003a00:	08003ced 	.word	0x08003ced
 8003a04:	08003ced 	.word	0x08003ced
 8003a08:	08003ced 	.word	0x08003ced
 8003a0c:	08003ced 	.word	0x08003ced
 8003a10:	08003ced 	.word	0x08003ced
 8003a14:	08003ced 	.word	0x08003ced
 8003a18:	08003ced 	.word	0x08003ced
 8003a1c:	08003ced 	.word	0x08003ced
 8003a20:	08003ced 	.word	0x08003ced
 8003a24:	08003ced 	.word	0x08003ced
 8003a28:	08003ced 	.word	0x08003ced
 8003a2c:	08003ced 	.word	0x08003ced
 8003a30:	08003ced 	.word	0x08003ced
 8003a34:	08003ced 	.word	0x08003ced
 8003a38:	08003ced 	.word	0x08003ced
 8003a3c:	08003ced 	.word	0x08003ced
 8003a40:	08003ced 	.word	0x08003ced
 8003a44:	08003ced 	.word	0x08003ced
 8003a48:	08003ced 	.word	0x08003ced
 8003a4c:	08003ced 	.word	0x08003ced
 8003a50:	08003ced 	.word	0x08003ced
 8003a54:	08003ced 	.word	0x08003ced
 8003a58:	08003ced 	.word	0x08003ced
 8003a5c:	08003ced 	.word	0x08003ced
 8003a60:	08003ced 	.word	0x08003ced
 8003a64:	08003ced 	.word	0x08003ced
 8003a68:	08003ced 	.word	0x08003ced
 8003a6c:	08003bd1 	.word	0x08003bd1
 8003a70:	08003ced 	.word	0x08003ced
 8003a74:	08003ced 	.word	0x08003ced
 8003a78:	08003ced 	.word	0x08003ced
 8003a7c:	08003ced 	.word	0x08003ced
 8003a80:	08003ced 	.word	0x08003ced
 8003a84:	08003ced 	.word	0x08003ced
 8003a88:	08003ced 	.word	0x08003ced
 8003a8c:	08003ced 	.word	0x08003ced
 8003a90:	08003ced 	.word	0x08003ced
 8003a94:	08003ced 	.word	0x08003ced
 8003a98:	08003b25 	.word	0x08003b25
 8003a9c:	08003b3d 	.word	0x08003b3d
 8003aa0:	08003ced 	.word	0x08003ced
 8003aa4:	08003ced 	.word	0x08003ced
 8003aa8:	08003ced 	.word	0x08003ced
 8003aac:	08003ced 	.word	0x08003ced
 8003ab0:	08003b3d 	.word	0x08003b3d
 8003ab4:	08003ced 	.word	0x08003ced
 8003ab8:	08003ced 	.word	0x08003ced
 8003abc:	08003ced 	.word	0x08003ced
 8003ac0:	08003ced 	.word	0x08003ced
 8003ac4:	08003ced 	.word	0x08003ced
 8003ac8:	08003ced 	.word	0x08003ced
 8003acc:	08003bd1 	.word	0x08003bd1
 8003ad0:	08003ced 	.word	0x08003ced
 8003ad4:	08003ced 	.word	0x08003ced
 8003ad8:	08003b67 	.word	0x08003b67
 8003adc:	08003ced 	.word	0x08003ced
 8003ae0:	08003bb9 	.word	0x08003bb9
 8003ae4:	08003ced 	.word	0x08003ced
 8003ae8:	08003ced 	.word	0x08003ced
 8003aec:	08003bd1 	.word	0x08003bd1
                {
                    //
                    // If this is a zero, and it is the first digit, then the
                    // fill character is a zero instead of a space.
                    //
                    if((pcString[-1] == '0') && (ui32Count == 0))
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	3b01      	subs	r3, #1
 8003af4:	781b      	ldrb	r3, [r3, #0]
 8003af6:	2b30      	cmp	r3, #48	; 0x30
 8003af8:	d105      	bne.n	8003b06 <UARTvprintf+0x1d6>
 8003afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d102      	bne.n	8003b06 <UARTvprintf+0x1d6>
                    {
                        cFill = '0';
 8003b00:	2330      	movs	r3, #48	; 0x30
 8003b02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                    }

                    //
                    // Update the digit count.
                    //
                    ui32Count *= 10;
 8003b06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b08:	4613      	mov	r3, r2
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	4413      	add	r3, r2
 8003b0e:	005b      	lsls	r3, r3, #1
 8003b10:	62fb      	str	r3, [r7, #44]	; 0x2c
                    ui32Count += pcString[-1] - '0';
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	3b01      	subs	r3, #1
 8003b16:	781b      	ldrb	r3, [r3, #0]
 8003b18:	461a      	mov	r2, r3
 8003b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b1c:	4413      	add	r3, r2
 8003b1e:	3b30      	subs	r3, #48	; 0x30
 8003b20:	62fb      	str	r3, [r7, #44]	; 0x2c

                    //
                    // Get the next character.
                    //
                    goto again;
 8003b22:	e732      	b.n	800398a <UARTvprintf+0x5a>
                case 'c':
                {
                    //
                    // Get the value from the varargs.
                    //
                    ui32Value = va_arg(vaArgP, uint32_t);
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	1d1a      	adds	r2, r3, #4
 8003b28:	603a      	str	r2, [r7, #0]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	61bb      	str	r3, [r7, #24]

                    //
                    // Print out the character.
                    //
                    UARTwrite((char *)&ui32Value, 1);
 8003b2e:	f107 0318 	add.w	r3, r7, #24
 8003b32:	2101      	movs	r1, #1
 8003b34:	4618      	mov	r0, r3
 8003b36:	f7ff fe8f 	bl	8003858 <UARTwrite>

                    //
                    // This command has been handled.
                    //
                    break;
 8003b3a:	e0dc      	b.n	8003cf6 <UARTvprintf+0x3c6>
                case 'i':
                {
                    //
                    // Get the value from the varargs.
                    //
                    ui32Value = va_arg(vaArgP, uint32_t);
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	1d1a      	adds	r2, r3, #4
 8003b40:	603a      	str	r2, [r7, #0]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	61bb      	str	r3, [r7, #24]

                    //
                    // Reset the buffer position.
                    //
                    ui32Pos = 0;
 8003b46:	2300      	movs	r3, #0
 8003b48:	633b      	str	r3, [r7, #48]	; 0x30

                    //
                    // If the value is negative, make it positive and indicate
                    // that a minus sign is needed.
                    //
                    if((int32_t)ui32Value < 0)
 8003b4a:	69bb      	ldr	r3, [r7, #24]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	da05      	bge.n	8003b5c <UARTvprintf+0x22c>
                    {
                        //
                        // Make the value positive.
                        //
                        ui32Value = -(int32_t)ui32Value;
 8003b50:	69bb      	ldr	r3, [r7, #24]
 8003b52:	425b      	negs	r3, r3
 8003b54:	61bb      	str	r3, [r7, #24]

                        //
                        // Indicate that the value is negative.
                        //
                        ui32Neg = 1;
 8003b56:	2301      	movs	r3, #1
 8003b58:	627b      	str	r3, [r7, #36]	; 0x24
 8003b5a:	e001      	b.n	8003b60 <UARTvprintf+0x230>
                    {
                        //
                        // Indicate that the value is positive so that a minus
                        // sign isn't inserted.
                        //
                        ui32Neg = 0;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	627b      	str	r3, [r7, #36]	; 0x24
                    }

                    //
                    // Set the base to 10.
                    //
                    ui32Base = 10;
 8003b60:	230a      	movs	r3, #10
 8003b62:	62bb      	str	r3, [r7, #40]	; 0x28

                    //
                    // Convert the value to ASCII.
                    //
                    goto convert;
 8003b64:	e03f      	b.n	8003be6 <UARTvprintf+0x2b6>
                case 's':
                {
                    //
                    // Get the string pointer from the varargs.
                    //
                    pcStr = va_arg(vaArgP, char *);
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	1d1a      	adds	r2, r3, #4
 8003b6a:	603a      	str	r2, [r7, #0]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	61fb      	str	r3, [r7, #28]

                    //
                    // Determine the length of the string.
                    //
                    for(ui32Idx = 0; pcStr[ui32Idx] != '\0'; ui32Idx++)
 8003b70:	2300      	movs	r3, #0
 8003b72:	637b      	str	r3, [r7, #52]	; 0x34
 8003b74:	e002      	b.n	8003b7c <UARTvprintf+0x24c>
 8003b76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b78:	3301      	adds	r3, #1
 8003b7a:	637b      	str	r3, [r7, #52]	; 0x34
 8003b7c:	69fa      	ldr	r2, [r7, #28]
 8003b7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b80:	4413      	add	r3, r2
 8003b82:	781b      	ldrb	r3, [r3, #0]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d1f6      	bne.n	8003b76 <UARTvprintf+0x246>
                    }

                    //
                    // Write the string.
                    //
                    UARTwrite(pcStr, ui32Idx);
 8003b88:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003b8a:	69f8      	ldr	r0, [r7, #28]
 8003b8c:	f7ff fe64 	bl	8003858 <UARTwrite>

                    //
                    // Write any required padding spaces
                    //
                    if(ui32Count > ui32Idx)
 8003b90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b94:	429a      	cmp	r2, r3
 8003b96:	f240 80ae 	bls.w	8003cf6 <UARTvprintf+0x3c6>
                    {
                        ui32Count -= ui32Idx;
 8003b9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b9e:	1ad3      	subs	r3, r2, r3
 8003ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
                        while(ui32Count--)
 8003ba2:	e003      	b.n	8003bac <UARTvprintf+0x27c>
                        {
                            UARTwrite(" ", 1);
 8003ba4:	2101      	movs	r1, #1
 8003ba6:	4859      	ldr	r0, [pc, #356]	; (8003d0c <UARTvprintf+0x3dc>)
 8003ba8:	f7ff fe56 	bl	8003858 <UARTwrite>
                        while(ui32Count--)
 8003bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bae:	1e5a      	subs	r2, r3, #1
 8003bb0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d1f6      	bne.n	8003ba4 <UARTvprintf+0x274>
                    }

                    //
                    // This command has been handled.
                    //
                    break;
 8003bb6:	e09e      	b.n	8003cf6 <UARTvprintf+0x3c6>
                case 'u':
                {
                    //
                    // Get the value from the varargs.
                    //
                    ui32Value = va_arg(vaArgP, uint32_t);
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	1d1a      	adds	r2, r3, #4
 8003bbc:	603a      	str	r2, [r7, #0]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	61bb      	str	r3, [r7, #24]

                    //
                    // Reset the buffer position.
                    //
                    ui32Pos = 0;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	633b      	str	r3, [r7, #48]	; 0x30

                    //
                    // Set the base to 10.
                    //
                    ui32Base = 10;
 8003bc6:	230a      	movs	r3, #10
 8003bc8:	62bb      	str	r3, [r7, #40]	; 0x28

                    //
                    // Indicate that the value is positive so that a minus sign
                    // isn't inserted.
                    //
                    ui32Neg = 0;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	627b      	str	r3, [r7, #36]	; 0x24

                    //
                    // Convert the value to ASCII.
                    //
                    goto convert;
 8003bce:	e00a      	b.n	8003be6 <UARTvprintf+0x2b6>
                case 'p':
                {
                    //
                    // Get the value from the varargs.
                    //
                    ui32Value = va_arg(vaArgP, uint32_t);
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	1d1a      	adds	r2, r3, #4
 8003bd4:	603a      	str	r2, [r7, #0]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	61bb      	str	r3, [r7, #24]

                    //
                    // Reset the buffer position.
                    //
                    ui32Pos = 0;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	633b      	str	r3, [r7, #48]	; 0x30

                    //
                    // Set the base to 16.
                    //
                    ui32Base = 16;
 8003bde:	2310      	movs	r3, #16
 8003be0:	62bb      	str	r3, [r7, #40]	; 0x28

                    //
                    // Indicate that the value is positive so that a minus sign
                    // isn't inserted.
                    //
                    ui32Neg = 0;
 8003be2:	2300      	movs	r3, #0
 8003be4:	627b      	str	r3, [r7, #36]	; 0x24
                    //
                    // Determine the number of digits in the string version of
                    // the value.
                    //
convert:
                    for(ui32Idx = 1;
 8003be6:	2301      	movs	r3, #1
 8003be8:	637b      	str	r3, [r7, #52]	; 0x34
 8003bea:	e007      	b.n	8003bfc <UARTvprintf+0x2cc>
                        (((ui32Idx * ui32Base) <= ui32Value) &&
                         (((ui32Idx * ui32Base) / ui32Base) == ui32Idx));
                        ui32Idx *= ui32Base, ui32Count--)
 8003bec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bf0:	fb02 f303 	mul.w	r3, r2, r3
 8003bf4:	637b      	str	r3, [r7, #52]	; 0x34
 8003bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bf8:	3b01      	subs	r3, #1
 8003bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
                        (((ui32Idx * ui32Base) <= ui32Value) &&
 8003bfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bfe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c00:	fb03 f202 	mul.w	r2, r3, r2
 8003c04:	69bb      	ldr	r3, [r7, #24]
 8003c06:	429a      	cmp	r2, r3
 8003c08:	d809      	bhi.n	8003c1e <UARTvprintf+0x2ee>
                         (((ui32Idx * ui32Base) / ui32Base) == ui32Idx));
 8003c0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c0e:	fb03 f202 	mul.w	r2, r3, r2
 8003c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c14:	fbb2 f3f3 	udiv	r3, r2, r3
                        (((ui32Idx * ui32Base) <= ui32Value) &&
 8003c18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d0e6      	beq.n	8003bec <UARTvprintf+0x2bc>

                    //
                    // If the value is negative, reduce the count of padding
                    // characters needed.
                    //
                    if(ui32Neg)
 8003c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d002      	beq.n	8003c2a <UARTvprintf+0x2fa>
                    {
                        ui32Count--;
 8003c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c26:	3b01      	subs	r3, #1
 8003c28:	62fb      	str	r3, [r7, #44]	; 0x2c

                    //
                    // If the value is negative and the value is padded with
                    // zeros, then place the minus sign before the padding.
                    //
                    if(ui32Neg && (cFill == '0'))
 8003c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d00d      	beq.n	8003c4c <UARTvprintf+0x31c>
 8003c30:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003c34:	2b30      	cmp	r3, #48	; 0x30
 8003c36:	d109      	bne.n	8003c4c <UARTvprintf+0x31c>
                    {
                        //
                        // Place the minus sign in the output buffer.
                        //
                        pcBuf[ui32Pos++] = '-';
 8003c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c3a:	1c5a      	adds	r2, r3, #1
 8003c3c:	633a      	str	r2, [r7, #48]	; 0x30
 8003c3e:	3338      	adds	r3, #56	; 0x38
 8003c40:	443b      	add	r3, r7
 8003c42:	222d      	movs	r2, #45	; 0x2d
 8003c44:	f803 2c30 	strb.w	r2, [r3, #-48]

                        //
                        // The minus sign has been placed, so turn off the
                        // negative flag.
                        //
                        ui32Neg = 0;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	627b      	str	r3, [r7, #36]	; 0x24

                    //
                    // Provide additional padding at the beginning of the
                    // string conversion if needed.
                    //
                    if((ui32Count > 1) && (ui32Count < 16))
 8003c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d915      	bls.n	8003c7e <UARTvprintf+0x34e>
 8003c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c54:	2b0f      	cmp	r3, #15
 8003c56:	d812      	bhi.n	8003c7e <UARTvprintf+0x34e>
                    {
                        for(ui32Count--; ui32Count; ui32Count--)
 8003c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c5a:	3b01      	subs	r3, #1
 8003c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c5e:	e00b      	b.n	8003c78 <UARTvprintf+0x348>
                        {
                            pcBuf[ui32Pos++] = cFill;
 8003c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c62:	1c5a      	adds	r2, r3, #1
 8003c64:	633a      	str	r2, [r7, #48]	; 0x30
 8003c66:	3338      	adds	r3, #56	; 0x38
 8003c68:	443b      	add	r3, r7
 8003c6a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8003c6e:	f803 2c30 	strb.w	r2, [r3, #-48]
                        for(ui32Count--; ui32Count; ui32Count--)
 8003c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c74:	3b01      	subs	r3, #1
 8003c76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d1f0      	bne.n	8003c60 <UARTvprintf+0x330>

                    //
                    // If the value is negative, then place the minus sign
                    // before the number.
                    //
                    if(ui32Neg)
 8003c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d022      	beq.n	8003cca <UARTvprintf+0x39a>
                    {
                        //
                        // Place the minus sign in the output buffer.
                        //
                        pcBuf[ui32Pos++] = '-';
 8003c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c86:	1c5a      	adds	r2, r3, #1
 8003c88:	633a      	str	r2, [r7, #48]	; 0x30
 8003c8a:	3338      	adds	r3, #56	; 0x38
 8003c8c:	443b      	add	r3, r7
 8003c8e:	222d      	movs	r2, #45	; 0x2d
 8003c90:	f803 2c30 	strb.w	r2, [r3, #-48]
                    }

                    //
                    // Convert the value into a string.
                    //
                    for(; ui32Idx; ui32Idx /= ui32Base)
 8003c94:	e019      	b.n	8003cca <UARTvprintf+0x39a>
                    {
                        pcBuf[ui32Pos++] =
                            g_pcHex[(ui32Value / ui32Idx) % ui32Base];
 8003c96:	481e      	ldr	r0, [pc, #120]	; (8003d10 <UARTvprintf+0x3e0>)
 8003c98:	69ba      	ldr	r2, [r7, #24]
 8003c9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ca0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ca2:	fbb3 f2f2 	udiv	r2, r3, r2
 8003ca6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ca8:	fb01 f202 	mul.w	r2, r1, r2
 8003cac:	1a9b      	subs	r3, r3, r2
 8003cae:	18c2      	adds	r2, r0, r3
                        pcBuf[ui32Pos++] =
 8003cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cb2:	1c59      	adds	r1, r3, #1
 8003cb4:	6339      	str	r1, [r7, #48]	; 0x30
                            g_pcHex[(ui32Value / ui32Idx) % ui32Base];
 8003cb6:	7812      	ldrb	r2, [r2, #0]
                        pcBuf[ui32Pos++] =
 8003cb8:	3338      	adds	r3, #56	; 0x38
 8003cba:	443b      	add	r3, r7
 8003cbc:	f803 2c30 	strb.w	r2, [r3, #-48]
                    for(; ui32Idx; ui32Idx /= ui32Base)
 8003cc0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cc8:	637b      	str	r3, [r7, #52]	; 0x34
 8003cca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d1e2      	bne.n	8003c96 <UARTvprintf+0x366>
                    }

                    //
                    // Write the string.
                    //
                    UARTwrite(pcBuf, ui32Pos);
 8003cd0:	f107 0308 	add.w	r3, r7, #8
 8003cd4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f7ff fdbe 	bl	8003858 <UARTwrite>

                    //
                    // This command has been handled.
                    //
                    break;
 8003cdc:	e00b      	b.n	8003cf6 <UARTvprintf+0x3c6>
                case '%':
                {
                    //
                    // Simply write a single %.
                    //
                    UARTwrite(pcString - 1, 1);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	3b01      	subs	r3, #1
 8003ce2:	2101      	movs	r1, #1
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f7ff fdb7 	bl	8003858 <UARTwrite>

                    //
                    // This command has been handled.
                    //
                    break;
 8003cea:	e004      	b.n	8003cf6 <UARTvprintf+0x3c6>
                default:
                {
                    //
                    // Indicate an error.
                    //
                    UARTwrite("ERROR", 5);
 8003cec:	2105      	movs	r1, #5
 8003cee:	4809      	ldr	r0, [pc, #36]	; (8003d14 <UARTvprintf+0x3e4>)
 8003cf0:	f7ff fdb2 	bl	8003858 <UARTwrite>

                    //
                    // This command has been handled.
                    //
                    break;
 8003cf4:	bf00      	nop
    while(*pcString)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	781b      	ldrb	r3, [r3, #0]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	f47f ae1e 	bne.w	800393c <UARTvprintf+0xc>
                }
            }
        }
    }
}
 8003d00:	bf00      	nop
 8003d02:	bf00      	nop
 8003d04:	3738      	adds	r7, #56	; 0x38
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	bf00      	nop
 8003d0c:	08004044 	.word	0x08004044
 8003d10:	08004030 	.word	0x08004030
 8003d14:	08004048 	.word	0x08004048

08003d18 <UARTprintf>:
//! \return None.
//
//*****************************************************************************
void
UARTprintf(const char *pcString, ...)
{
 8003d18:	b40f      	push	{r0, r1, r2, r3}
 8003d1a:	b580      	push	{r7, lr}
 8003d1c:	b082      	sub	sp, #8
 8003d1e:	af00      	add	r7, sp, #0
    va_list vaArgP;

    //
    // Start the varargs processing.
    //
    va_start(vaArgP, pcString);
 8003d20:	f107 0314 	add.w	r3, r7, #20
 8003d24:	607b      	str	r3, [r7, #4]

    UARTvprintf(pcString, vaArgP);
 8003d26:	6879      	ldr	r1, [r7, #4]
 8003d28:	6938      	ldr	r0, [r7, #16]
 8003d2a:	f7ff fe01 	bl	8003930 <UARTvprintf>

    //
    // We're finished with the varargs now.
    //
    va_end(vaArgP);
}
 8003d2e:	bf00      	nop
 8003d30:	3708      	adds	r7, #8
 8003d32:	46bd      	mov	sp, r7
 8003d34:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003d38:	b004      	add	sp, #16
 8003d3a:	4770      	bx	lr

08003d3c <UARTFlushRx>:
//
//*****************************************************************************
#if defined(UART_BUFFERED) || defined(DOXYGEN)
void
UARTFlushRx(void)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	af00      	add	r7, sp, #0


    //
    // Temporarily turn off interrupts.
    //
    LL_USART_DisableIT_RXNE(stdUsart);
 8003d40:	4b08      	ldr	r3, [pc, #32]	; (8003d64 <UARTFlushRx+0x28>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4618      	mov	r0, r3
 8003d46:	f7ff fcab 	bl	80036a0 <LL_USART_DisableIT_RXNE>

    //
    // Flush the receive buffer.
    //
    g_ui32UARTRxReadIndex = 0;
 8003d4a:	4b07      	ldr	r3, [pc, #28]	; (8003d68 <UARTFlushRx+0x2c>)
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	601a      	str	r2, [r3, #0]
    g_ui32UARTRxWriteIndex = 0;
 8003d50:	4b06      	ldr	r3, [pc, #24]	; (8003d6c <UARTFlushRx+0x30>)
 8003d52:	2200      	movs	r2, #0
 8003d54:	601a      	str	r2, [r3, #0]
    //
    // If interrupts were enabled when we turned them off, turn them
    // back on again.
    //

      LL_USART_EnableIT_RXNE(stdUsart);
 8003d56:	4b03      	ldr	r3, [pc, #12]	; (8003d64 <UARTFlushRx+0x28>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f7ff fc5c 	bl	8003618 <LL_USART_EnableIT_RXNE>

}
 8003d60:	bf00      	nop
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	200049f8 	.word	0x200049f8
 8003d68:	200049f4 	.word	0x200049f4
 8003d6c:	200049f0 	.word	0x200049f0

08003d70 <UARTFlushTx>:
//
//*****************************************************************************
#if defined(UART_BUFFERED) || defined(DOXYGEN)
void
UARTFlushTx(bool bDiscard)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b082      	sub	sp, #8
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	4603      	mov	r3, r0
 8003d78:	71fb      	strb	r3, [r7, #7]


    //
    // Should the remaining data be discarded or transmitted?
    //
    if(bDiscard)
 8003d7a:	79fb      	ldrb	r3, [r7, #7]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d00b      	beq.n	8003d98 <UARTFlushTx+0x28>
    {
        //
        // The remaining data should be discarded, so temporarily turn off
        // interrupts.
        //
         LL_USART_DisableIT_TXE(stdUsart);
 8003d80:	4b0d      	ldr	r3, [pc, #52]	; (8003db8 <UARTFlushTx+0x48>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4618      	mov	r0, r3
 8003d86:	f7ff fcad 	bl	80036e4 <LL_USART_DisableIT_TXE>

        //
        // Flush the transmit buffer.
        //

        g_ui32UARTTxReadIndex = 0;
 8003d8a:	4b0c      	ldr	r3, [pc, #48]	; (8003dbc <UARTFlushTx+0x4c>)
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	601a      	str	r2, [r3, #0]
        g_ui32UARTTxWriteIndex = 0;
 8003d90:	4b0b      	ldr	r3, [pc, #44]	; (8003dc0 <UARTFlushTx+0x50>)
 8003d92:	2200      	movs	r2, #0
 8003d94:	601a      	str	r2, [r3, #0]
        //
        while(!TX_BUFFER_EMPTY)
        {
        }
    }
}
 8003d96:	e00a      	b.n	8003dae <UARTFlushTx+0x3e>
        while(!TX_BUFFER_EMPTY)
 8003d98:	bf00      	nop
 8003d9a:	4909      	ldr	r1, [pc, #36]	; (8003dc0 <UARTFlushTx+0x50>)
 8003d9c:	4807      	ldr	r0, [pc, #28]	; (8003dbc <UARTFlushTx+0x4c>)
 8003d9e:	f7ff fcf1 	bl	8003784 <IsBufferEmpty>
 8003da2:	4603      	mov	r3, r0
 8003da4:	f083 0301 	eor.w	r3, r3, #1
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d1f5      	bne.n	8003d9a <UARTFlushTx+0x2a>
}
 8003dae:	bf00      	nop
 8003db0:	3708      	adds	r7, #8
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	bf00      	nop
 8003db8:	200049f8 	.word	0x200049f8
 8003dbc:	2000496c 	.word	0x2000496c
 8003dc0:	20004968 	.word	0x20004968

08003dc4 <UARTStdioIntHandler>:
//
//*****************************************************************************
#if defined(UART_BUFFERED) || defined(DOXYGEN)
void
UARTStdioIntHandler(void)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b084      	sub	sp, #16
 8003dc8:	af00      	add	r7, sp, #0
	static int8_t bLastWasCR = 0;
	  uint32_t isrflags   = READ_REG(stdUsart->SR);
 8003dca:	4b5a      	ldr	r3, [pc, #360]	; (8003f34 <UARTStdioIntHandler+0x170>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	60fb      	str	r3, [r7, #12]
	  uint32_t cr1its     = READ_REG(stdUsart->CR1);
 8003dd2:	4b58      	ldr	r3, [pc, #352]	; (8003f34 <UARTStdioIntHandler+0x170>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	60bb      	str	r3, [r7, #8]

	    /*If interrupt is caused due to Transmit Data Register Empty */
	    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d024      	beq.n	8003e2e <UARTStdioIntHandler+0x6a>
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d01f      	beq.n	8003e2e <UARTStdioIntHandler+0x6a>
	    {
	    	if(TX_BUFFER_EMPTY)
 8003dee:	4952      	ldr	r1, [pc, #328]	; (8003f38 <UARTStdioIntHandler+0x174>)
 8003df0:	4852      	ldr	r0, [pc, #328]	; (8003f3c <UARTStdioIntHandler+0x178>)
 8003df2:	f7ff fcc7 	bl	8003784 <IsBufferEmpty>
 8003df6:	4603      	mov	r3, r0
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d005      	beq.n	8003e08 <UARTStdioIntHandler+0x44>
	    	    {
	    	      // Buffer empty, so disable interrupts
	    	      LL_USART_DisableIT_TXE(stdUsart);
 8003dfc:	4b4d      	ldr	r3, [pc, #308]	; (8003f34 <UARTStdioIntHandler+0x170>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4618      	mov	r0, r3
 8003e02:	f7ff fc6f 	bl	80036e4 <LL_USART_DisableIT_TXE>
 8003e06:	e012      	b.n	8003e2e <UARTStdioIntHandler+0x6a>

	    	 else
	    	    {
	    	      // There is more data in the output buffer. Send the next byte

	    		 	 unsigned char c = g_pcUARTTxBuffer[g_ui32UARTTxReadIndex];
 8003e08:	4b4c      	ldr	r3, [pc, #304]	; (8003f3c <UARTStdioIntHandler+0x178>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a4c      	ldr	r2, [pc, #304]	; (8003f40 <UARTStdioIntHandler+0x17c>)
 8003e0e:	5cd3      	ldrb	r3, [r2, r3]
 8003e10:	71fb      	strb	r3, [r7, #7]
	    		 	 ADVANCE_TX_BUFFER_INDEX(g_ui32UARTTxReadIndex);
 8003e12:	4b4a      	ldr	r3, [pc, #296]	; (8003f3c <UARTStdioIntHandler+0x178>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	3301      	adds	r3, #1
 8003e18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e1c:	4a47      	ldr	r2, [pc, #284]	; (8003f3c <UARTStdioIntHandler+0x178>)
 8003e1e:	6013      	str	r3, [r2, #0]
	    	      *          USART_SR register followed by a write operation to USART_DR register.
	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

	    	      *********************/

	    	      stdUsart->SR;
 8003e20:	4b44      	ldr	r3, [pc, #272]	; (8003f34 <UARTStdioIntHandler+0x170>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681b      	ldr	r3, [r3, #0]
	    	      stdUsart->DR = c;
 8003e26:	4b43      	ldr	r3, [pc, #268]	; (8003f34 <UARTStdioIntHandler+0x170>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	79fa      	ldrb	r2, [r7, #7]
 8003e2c:	605a      	str	r2, [r3, #4]
	    }
    //
    // Are we being interrupted due to a received character?
    //
	    /* if DR is not empty and the Rx Int is enabled */
	if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	f003 0320 	and.w	r3, r3, #32
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d079      	beq.n	8003f2c <UARTStdioIntHandler+0x168>
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	f003 0320 	and.w	r3, r3, #32
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d074      	beq.n	8003f2c <UARTStdioIntHandler+0x168>

        {
            //
            // Read a character
            //
        	stdUsart->SR;
 8003e42:	4b3c      	ldr	r3, [pc, #240]	; (8003f34 <UARTStdioIntHandler+0x170>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681b      	ldr	r3, [r3, #0]
            unsigned char cChar = stdUsart->DR;
 8003e48:	4b3a      	ldr	r3, [pc, #232]	; (8003f34 <UARTStdioIntHandler+0x170>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	71bb      	strb	r3, [r7, #6]
            //
            // If echo is disabled, we skip the various text filtering
            // operations that would typically be required when supporting a
            // command line.
            //
            if(!g_bDisableEcho)
 8003e52:	4b3c      	ldr	r3, [pc, #240]	; (8003f44 <UARTStdioIntHandler+0x180>)
 8003e54:	781b      	ldrb	r3, [r3, #0]
 8003e56:	f083 0301 	eor.w	r3, r3, #1
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d03d      	beq.n	8003edc <UARTStdioIntHandler+0x118>
            {
                //
                // Handle backspace by erasing the last character in the
                // buffer.
                //
                if(cChar == '\b')
 8003e60:	79bb      	ldrb	r3, [r7, #6]
 8003e62:	2b08      	cmp	r3, #8
 8003e64:	d11a      	bne.n	8003e9c <UARTStdioIntHandler+0xd8>
                {
                    //
                    // If there are any characters already in the buffer, then
                    // delete the last.
                    //
                    if(!RX_BUFFER_EMPTY)
 8003e66:	4938      	ldr	r1, [pc, #224]	; (8003f48 <UARTStdioIntHandler+0x184>)
 8003e68:	4838      	ldr	r0, [pc, #224]	; (8003f4c <UARTStdioIntHandler+0x188>)
 8003e6a:	f7ff fc8b 	bl	8003784 <IsBufferEmpty>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	f083 0301 	eor.w	r3, r3, #1
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d010      	beq.n	8003e9c <UARTStdioIntHandler+0xd8>
                    {
                        //
                        // Rub out the previous character on the users
                        // terminal.
                        //
                        UARTwrite("\b \b", 3);
 8003e7a:	2103      	movs	r1, #3
 8003e7c:	4834      	ldr	r0, [pc, #208]	; (8003f50 <UARTStdioIntHandler+0x18c>)
 8003e7e:	f7ff fceb 	bl	8003858 <UARTwrite>

                        //
                        // Decrement the number of characters in the buffer.
                        //
                        if(g_ui32UARTRxWriteIndex == 0)
 8003e82:	4b31      	ldr	r3, [pc, #196]	; (8003f48 <UARTStdioIntHandler+0x184>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d103      	bne.n	8003e92 <UARTStdioIntHandler+0xce>
                        {
                            g_ui32UARTRxWriteIndex = UART_RX_BUFFER_SIZE - 1;
 8003e8a:	4b2f      	ldr	r3, [pc, #188]	; (8003f48 <UARTStdioIntHandler+0x184>)
 8003e8c:	227f      	movs	r2, #127	; 0x7f
 8003e8e:	601a      	str	r2, [r3, #0]
 8003e90:	e004      	b.n	8003e9c <UARTStdioIntHandler+0xd8>
                        }
                        else
                        {
                            g_ui32UARTRxWriteIndex--;
 8003e92:	4b2d      	ldr	r3, [pc, #180]	; (8003f48 <UARTStdioIntHandler+0x184>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	3b01      	subs	r3, #1
 8003e98:	4a2b      	ldr	r2, [pc, #172]	; (8003f48 <UARTStdioIntHandler+0x184>)
 8003e9a:	6013      	str	r3, [r2, #0]
                // If this character is LF and last was CR, then just gobble up
                // the character since we already echoed the previous CR and we
                // don't want to store 2 characters in the buffer if we don't
                // need to.
                //
                if((cChar == '\n') && bLastWasCR)
 8003e9c:	79bb      	ldrb	r3, [r7, #6]
 8003e9e:	2b0a      	cmp	r3, #10
 8003ea0:	d107      	bne.n	8003eb2 <UARTStdioIntHandler+0xee>
 8003ea2:	4b2c      	ldr	r3, [pc, #176]	; (8003f54 <UARTStdioIntHandler+0x190>)
 8003ea4:	f993 3000 	ldrsb.w	r3, [r3]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d002      	beq.n	8003eb2 <UARTStdioIntHandler+0xee>
                {
                    bLastWasCR = false;
 8003eac:	4b29      	ldr	r3, [pc, #164]	; (8003f54 <UARTStdioIntHandler+0x190>)
 8003eae:	2200      	movs	r2, #0
 8003eb0:	701a      	strb	r2, [r3, #0]
                }

                //
                // See if a newline or escape character was received.
                //
                if((cChar == '\r') || (cChar == '\n') || (cChar == 0x1b))
 8003eb2:	79bb      	ldrb	r3, [r7, #6]
 8003eb4:	2b0d      	cmp	r3, #13
 8003eb6:	d005      	beq.n	8003ec4 <UARTStdioIntHandler+0x100>
 8003eb8:	79bb      	ldrb	r3, [r7, #6]
 8003eba:	2b0a      	cmp	r3, #10
 8003ebc:	d002      	beq.n	8003ec4 <UARTStdioIntHandler+0x100>
 8003ebe:	79bb      	ldrb	r3, [r7, #6]
 8003ec0:	2b1b      	cmp	r3, #27
 8003ec2:	d10b      	bne.n	8003edc <UARTStdioIntHandler+0x118>
                    //
                    // If the character is a CR, then it may be followed by an
                    // LF which should be paired with the CR.  So remember that
                    // a CR was received.
                    //
                    if(cChar == '\r')
 8003ec4:	79bb      	ldrb	r3, [r7, #6]
 8003ec6:	2b0d      	cmp	r3, #13
 8003ec8:	d102      	bne.n	8003ed0 <UARTStdioIntHandler+0x10c>
                    {
                        bLastWasCR = 1;
 8003eca:	4b22      	ldr	r3, [pc, #136]	; (8003f54 <UARTStdioIntHandler+0x190>)
 8003ecc:	2201      	movs	r2, #1
 8003ece:	701a      	strb	r2, [r3, #0]
                    // put a CR in the receive buffer as a marker telling
                    // UARTgets() where the line ends.  We also send an
                    // additional LF to ensure that the local terminal echo
                    // receives both CR and LF.
                    //
                    cChar = '\r';
 8003ed0:	230d      	movs	r3, #13
 8003ed2:	71bb      	strb	r3, [r7, #6]
                    UARTwrite("\n", 1);
 8003ed4:	2101      	movs	r1, #1
 8003ed6:	4820      	ldr	r0, [pc, #128]	; (8003f58 <UARTStdioIntHandler+0x194>)
 8003ed8:	f7ff fcbe 	bl	8003858 <UARTwrite>

            //
            // If there is space in the receive buffer, put the character
            // there, otherwise throw it away.
            //
            if(!RX_BUFFER_FULL)
 8003edc:	2280      	movs	r2, #128	; 0x80
 8003ede:	491a      	ldr	r1, [pc, #104]	; (8003f48 <UARTStdioIntHandler+0x184>)
 8003ee0:	481a      	ldr	r0, [pc, #104]	; (8003f4c <UARTStdioIntHandler+0x188>)
 8003ee2:	f7ff fc2f 	bl	8003744 <IsBufferFull>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	f083 0301 	eor.w	r3, r3, #1
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d017      	beq.n	8003f22 <UARTStdioIntHandler+0x15e>
            {
                //
                // Store the new character in the receive buffer
                //
                g_pcUARTRxBuffer[g_ui32UARTRxWriteIndex] =
 8003ef2:	4b15      	ldr	r3, [pc, #84]	; (8003f48 <UARTStdioIntHandler+0x184>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	79b9      	ldrb	r1, [r7, #6]
 8003ef8:	4a18      	ldr	r2, [pc, #96]	; (8003f5c <UARTStdioIntHandler+0x198>)
 8003efa:	54d1      	strb	r1, [r2, r3]
                    (unsigned char)(cChar & 0xFF);
                ADVANCE_RX_BUFFER_INDEX(g_ui32UARTRxWriteIndex);
 8003efc:	4b12      	ldr	r3, [pc, #72]	; (8003f48 <UARTStdioIntHandler+0x184>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	3301      	adds	r3, #1
 8003f02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f06:	4a10      	ldr	r2, [pc, #64]	; (8003f48 <UARTStdioIntHandler+0x184>)
 8003f08:	6013      	str	r3, [r2, #0]

                //
                // If echo is enabled, write the character to the transmit
                // buffer so that the user gets some immediate feedback.
                //
                if(!g_bDisableEcho)
 8003f0a:	4b0e      	ldr	r3, [pc, #56]	; (8003f44 <UARTStdioIntHandler+0x180>)
 8003f0c:	781b      	ldrb	r3, [r3, #0]
 8003f0e:	f083 0301 	eor.w	r3, r3, #1
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d004      	beq.n	8003f22 <UARTStdioIntHandler+0x15e>
                {
                    UARTwrite((const char *)&cChar, 1);
 8003f18:	1dbb      	adds	r3, r7, #6
 8003f1a:	2101      	movs	r1, #1
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f7ff fc9b 	bl	8003858 <UARTwrite>

        //
        // If we wrote anything to the transmit buffer, make sure it actually
        // gets transmitted.
        //
        UARTPrimeTransmit(stdUsart);
 8003f22:	4b04      	ldr	r3, [pc, #16]	; (8003f34 <UARTStdioIntHandler+0x170>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4618      	mov	r0, r3
 8003f28:	f7ff fc44 	bl	80037b4 <UARTPrimeTransmit>

    }
}
 8003f2c:	bf00      	nop
 8003f2e:	3710      	adds	r7, #16
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}
 8003f34:	200049f8 	.word	0x200049f8
 8003f38:	20004968 	.word	0x20004968
 8003f3c:	2000496c 	.word	0x2000496c
 8003f40:	20004568 	.word	0x20004568
 8003f44:	20004564 	.word	0x20004564
 8003f48:	200049f0 	.word	0x200049f0
 8003f4c:	200049f4 	.word	0x200049f4
 8003f50:	08004050 	.word	0x08004050
 8003f54:	200049fc 	.word	0x200049fc
 8003f58:	08004054 	.word	0x08004054
 8003f5c:	20004970 	.word	0x20004970

08003f60 <memset>:
 8003f60:	4603      	mov	r3, r0
 8003f62:	4402      	add	r2, r0
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d100      	bne.n	8003f6a <memset+0xa>
 8003f68:	4770      	bx	lr
 8003f6a:	f803 1b01 	strb.w	r1, [r3], #1
 8003f6e:	e7f9      	b.n	8003f64 <memset+0x4>

08003f70 <__libc_init_array>:
 8003f70:	b570      	push	{r4, r5, r6, lr}
 8003f72:	2600      	movs	r6, #0
 8003f74:	4d0c      	ldr	r5, [pc, #48]	; (8003fa8 <__libc_init_array+0x38>)
 8003f76:	4c0d      	ldr	r4, [pc, #52]	; (8003fac <__libc_init_array+0x3c>)
 8003f78:	1b64      	subs	r4, r4, r5
 8003f7a:	10a4      	asrs	r4, r4, #2
 8003f7c:	42a6      	cmp	r6, r4
 8003f7e:	d109      	bne.n	8003f94 <__libc_init_array+0x24>
 8003f80:	f000 f828 	bl	8003fd4 <_init>
 8003f84:	2600      	movs	r6, #0
 8003f86:	4d0a      	ldr	r5, [pc, #40]	; (8003fb0 <__libc_init_array+0x40>)
 8003f88:	4c0a      	ldr	r4, [pc, #40]	; (8003fb4 <__libc_init_array+0x44>)
 8003f8a:	1b64      	subs	r4, r4, r5
 8003f8c:	10a4      	asrs	r4, r4, #2
 8003f8e:	42a6      	cmp	r6, r4
 8003f90:	d105      	bne.n	8003f9e <__libc_init_array+0x2e>
 8003f92:	bd70      	pop	{r4, r5, r6, pc}
 8003f94:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f98:	4798      	blx	r3
 8003f9a:	3601      	adds	r6, #1
 8003f9c:	e7ee      	b.n	8003f7c <__libc_init_array+0xc>
 8003f9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fa2:	4798      	blx	r3
 8003fa4:	3601      	adds	r6, #1
 8003fa6:	e7f2      	b.n	8003f8e <__libc_init_array+0x1e>
 8003fa8:	08004070 	.word	0x08004070
 8003fac:	08004070 	.word	0x08004070
 8003fb0:	08004070 	.word	0x08004070
 8003fb4:	08004074 	.word	0x08004074

08003fb8 <memcpy>:
 8003fb8:	440a      	add	r2, r1
 8003fba:	4291      	cmp	r1, r2
 8003fbc:	f100 33ff 	add.w	r3, r0, #4294967295
 8003fc0:	d100      	bne.n	8003fc4 <memcpy+0xc>
 8003fc2:	4770      	bx	lr
 8003fc4:	b510      	push	{r4, lr}
 8003fc6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003fca:	4291      	cmp	r1, r2
 8003fcc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003fd0:	d1f9      	bne.n	8003fc6 <memcpy+0xe>
 8003fd2:	bd10      	pop	{r4, pc}

08003fd4 <_init>:
 8003fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fd6:	bf00      	nop
 8003fd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fda:	bc08      	pop	{r3}
 8003fdc:	469e      	mov	lr, r3
 8003fde:	4770      	bx	lr

08003fe0 <_fini>:
 8003fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fe2:	bf00      	nop
 8003fe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fe6:	bc08      	pop	{r3}
 8003fe8:	469e      	mov	lr, r3
 8003fea:	4770      	bx	lr
